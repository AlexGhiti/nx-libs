
#### KeySymToUcs4 ####
imConv.c:122:        ucs4 = KeySymToUcs4(keysym);
imConv.c:197:        ucs4 = (ucs4_t) KeySymToUcs4(symbol);
imConv.c:266:        ucs4 = (ucs4_t) KeySymToUcs4(symbol);
imConv.c:338:        ucs4 = (ucs4_t) KeySymToUcs4(symbol);
imKStoUCS.c:272:KeySymToUcs4(KeySym keysym)
imLcPrs.c:418:    ucs = KeySymToUcs4(ks);
Ximint.h:195:unsigned int KeySymToUcs4 (

#### XActivateScreenSaver ####
FSSaver.c:33:XActivateScreenSaver(register Display *dpy)
Xlib.h:1934:extern int XActivateScreenSaver(

#### XAddConnectionWatch ####
XlibInt.c:2448: * fd with Xlib.  Any XConnectionWatchProc registered by XAddConnectionWatch
XlibInt.c:2458: * a XConnectionWatchProc with XAddConnectionWatch
XlibInt.c:2512: * Any XConnectionWatchProc registered by XAddConnectionWatch
XlibInt.c:2550: * Typically a XConnectionWatchProc registered with XAddConnectionWatch
XlibInt.c:2643:/* XAddConnectionWatch
XlibInt.c:2651:XAddConnectionWatch(
XlibInt.c:2662:    fprintf(stderr, "XAddConnectionWatch: Got called.\n");
XlibInt.c:2704: * Unregister a callback registered by XAddConnectionWatch.
XlibInt.c:2706: * XAddConnectionWatch.
Xlib.h:3991:extern Status XAddConnectionWatch(
Xlibint.h:209:	struct _XConnWatchInfo *conn_watchers; /* XAddConnectionWatch */
Xlibint.h:1246:struct _XConnWatchInfo {	/* info from XAddConnectionWatch */

#### XAddExtension ####
InitExt.c:69:XExtCodes *XAddExtension (Display *dpy)
Xlib.h:1754:extern XExtCodes *XAddExtension(

#### XAddHost ####
Host.c:105:XAddHost (
Host.c:121:XAddHosts (
Host.c:128:	(void) XAddHost(dpy, &hosts[i]);
Xlib.h:1938:extern int XAddHost(
Xlib.h:1943:extern int XAddHosts(

#### XAddHosts ####
Host.c:121:XAddHosts (
Xlib.h:1943:extern int XAddHosts(

#### XAddPixel ####
ImUtil.c:47:static int _XAddPixel(XImage *, long);
ImUtil.c:110: *	_XAddPixel	Adds a constant value to every pixel in an image
ImUtil.c:297:	image->f.add_pixel = _XAddPixel;
ImUtil.c:963:_XAddPixel (
Macros.c:283:#undef XAddPixel
Macros.c:284:int XAddPixel(
Xutil.h:209:extern int XAddPixel(
Xutil.h:225:#define XAddPixel(ximage, value) \

#### XAddToExtensionList ####
Font.c:348:    XAddToExtensionList(XEHeadOfExtensionList(dpy_union), pData);
Font.c:609:	    XAddToExtensionList(XEHeadOfExtensionList(fs_union), pData);
InitExt.c:104:XAddToExtensionList(
Xlib.h:1949:extern int XAddToExtensionList(

#### XAddToSaveSet ####
ChSaveSet.c:50:XAddToSaveSet(
Xlib.h:1954:extern int XAddToSaveSet(

#### XAllPlanes ####
Macros.c:77:unsigned long XAllPlanes(void) { return AllPlanes; }
Xlib.h:1798:extern unsigned long XAllPlanes(

#### XAllocClassHint ####
PropAlloc.c:58:XClassHint *XAllocClassHint (void)
Xutil.h:367:extern XClassHint *XAllocClassHint (

#### XAllocColor ####
AllCells.c:32:Status XAllocColorCells(
AllPlanes.c:32:Status XAllocColorPlanes(
cmsAllCol.c:59: *		values then use it in a call to XAllocColor.
cmsAllCol.c:72:    return(_XcmsSetGetColor(XAllocColor, dpy, colormap, pXcmsColor_in_out,
cmsAllNCol.c:63: *		RGB value is then used in a call to XAllocColor to allocate
cmsAllNCol.c:118:     * 3. Convert to XColor and call XAllocColor
cmsAllNCol.c:121:    if (XAllocColor(ccc->dpy, cmap, &XColor_in_out) == 0) {
GetColor.c:64:	    ret = XAllocColor(dpy, cmap, hard_def);
GetHColor.c:32:Status XAllocColor(
SetGetCols.c:106:    if ( !((*xColorProc == XAllocColor) || (*xColorProc == XStoreColor)
SetGetCols.c:136:    if (*xColorProc == XAllocColor) {
Xlib.h:1959:extern Status XAllocColor(
Xlib.h:1965:extern Status XAllocColorCells(
Xlib.h:1975:extern Status XAllocColorPlanes(

#### XAllocColorCells ####
AllCells.c:32:Status XAllocColorCells(
Xlib.h:1965:extern Status XAllocColorCells(

#### XAllocColorPlanes ####
AllPlanes.c:32:Status XAllocColorPlanes(
Xlib.h:1975:extern Status XAllocColorPlanes(

#### XAllocIconSize ####
PropAlloc.c:64:XIconSize *XAllocIconSize (void)
Xutil.h:371:extern XIconSize *XAllocIconSize (

#### XAllocNamedColor ####
GetColor.c:35:XAllocNamedColor(
Xcmsint.h:73:     *		XAllocNamedColor()
Xlib.h:1989:extern Status XAllocNamedColor(

#### XAllocSizeHints ####
PropAlloc.c:40:XSizeHints *XAllocSizeHints (void)
Xutil.h:375:extern XSizeHints *XAllocSizeHints (

#### XAllocStandardColormap ####
PropAlloc.c:46:XStandardColormap *XAllocStandardColormap (void)
Xutil.h:379:extern XStandardColormap *XAllocStandardColormap (

#### XAllocWMHints ####
PropAlloc.c:52:XWMHints *XAllocWMHints (void)
Xutil.h:383:extern XWMHints *XAllocWMHints (

#### XAllowEvents ####
AllowEv.c:33:XAllowEvents(
Xlib.h:1997:extern int XAllowEvents(

#### XAutoRepeatOff ####
AutoRep.c:42:XAutoRepeatOff (register Display *dpy)
Xlib.h:2003:extern int XAutoRepeatOff(

#### XAutoRepeatOn ####
AutoRep.c:33:XAutoRepeatOn (register Display *dpy)
Xlib.h:2007:extern int XAutoRepeatOn(

#### XBaseFontNameListOfFontSet ####
FSWrap.c:219:XBaseFontNameListOfFontSet(XFontSet font_set)
Xlib.h:3650:extern char *XBaseFontNameListOfFontSet(

#### XBell ####
Bell.c:33:XBell(
imThaiFlt.c:1084:	XBell(event->display, BellVolume);
imThaiFlt.c:1403:        XBell(ev->xkey.display, BellVolume);
XKBBell.c:150:        XBell(dpy, percent);
XKBBell.c:162:        XBell(dpy, percent);
Xlib.h:2011:extern int XBell(

#### XBitmapBitOrder ####
Macros.c:135:int XBitmapBitOrder(Display *dpy) { return (BitmapBitOrder(dpy)); }
Xlib.h:2016:extern int XBitmapBitOrder(

#### XBitmapPad ####
Macros.c:137:int XBitmapPad(Display *dpy) { return (BitmapPad(dpy)); }
Xlib.h:2020:extern int XBitmapPad(

#### XBitmapUnit ####
Macros.c:133:int XBitmapUnit(Display *dpy) { return (BitmapUnit(dpy)); }
Xlib.h:2024:extern int XBitmapUnit(

#### XBlackPixel ####
Macros.c:67:unsigned long XBlackPixel(Display *dpy, int scr)
Macros.c:184:unsigned long XBlackPixelOfScreen(Screen *s)
Xlib.h:1790:extern unsigned long XBlackPixel(
Xlib.h:1801:extern unsigned long XBlackPixelOfScreen(

#### XBlackPixelOfScreen ####
Macros.c:184:unsigned long XBlackPixelOfScreen(Screen *s)
Xlib.h:1801:extern unsigned long XBlackPixelOfScreen(

#### XCellsOfScreen ####
Macros.c:224:int XCellsOfScreen(Screen *s) { return (CellsOfScreen(s)); }
Xlib.h:2028:extern int XCellsOfScreen(

#### XChangeActivePointerGrab ####
ChActPGb.c:33:XChangeActivePointerGrab(
Xlib.h:2032:extern int XChangeActivePointerGrab(

#### XChangeGC ####
ChGC.c:34:XChangeGC (
omImText.c:59:    XChangeGC(dpy, gc, SET_VALUE_MASK, &values);
Xlib.h:2039:extern int XChangeGC(

#### XChangeKeyboardControl ####
AutoRep.c:37:	XChangeKeyboardControl (dpy, KBAutoRepeatMode, &values);
AutoRep.c:46:	XChangeKeyboardControl (dpy, KBAutoRepeatMode, &values);
ChKeyCon.c:33:XChangeKeyboardControl(
imThaiFlt.c:1176:    XChangeKeyboardControl (dpy, KBLed | KBLedMode,	&led_control);
Xlib.h:443:/* Data structure for XChangeKeyboardControl */
Xlib.h:2046:extern int XChangeKeyboardControl(

#### XChangeKeyboardMapping ####
SetPntMap.c:55:XChangeKeyboardMapping (
Xlib.h:2052:extern int XChangeKeyboardMapping(

#### XChangePointerControl ####
ChPntCon.c:33:XChangePointerControl(
Xlib.h:2060:extern int XChangePointerControl(

#### XChangeProperty ####
ChProp.c:33:XChangeProperty (
imTrX.c:287:	XChangeProperty(im->core.display, spec->ims_connect_wid,
imTrX.c:387:		    XChangeProperty(im->core.display, spec->lib_connect_wid, prop,
imTrX.c:410:	    XChangeProperty(im->core.display, spec->lib_connect_wid, prop,
imTrX.c:435:	    XChangeProperty(im->core.display, spec->lib_connect_wid, prop,
SetHints.c:96:	return XChangeProperty (dpy, w, property, XA_WM_SIZE_HINTS, 32,
SetHints.c:131:	return XChangeProperty (dpy, w, XA_WM_HINTS, XA_WM_HINTS, 32,
SetHints.c:171: * when examining a protocol structure.  This is because the XChangeProperty
SetHints.c:198:	    XChangeProperty (dpy, w, XA_WM_ICON_SIZE, XA_WM_ICON_SIZE, 32,
SetHints.c:229:	    XChangeProperty (dpy, w, XA_WM_COMMAND, XA_STRING, 8,
SetHints.c:261:	    XChangeProperty (dpy, w, XA_WM_ICON_NAME, XA_STRING, 8,
SetHints.c:286:	return XChangeProperty(dpy, w, XA_WM_TRANSIENT_FOR, XA_WINDOW, 32,
SetHints.c:313:	    XChangeProperty(dpy, w, XA_WM_CLASS, XA_STRING, 8,
SetNrmHint.c:114:    XChangeProperty (dpy, w, prop, XA_WM_SIZE_HINTS, 32,
SetRGBCMap.c:87:	    XChangeProperty (dpy, w, property, XA_RGB_COLOR_MAP, 32, mode,
SetRGBCMap.c:95:	XChangeProperty (dpy, w, property, XA_RGB_COLOR_MAP, 32,
SetTxtProp.c:66:    XChangeProperty (dpy, w, property, tp->encoding, tp->format,
SetWMCMapW.c:71:    XChangeProperty (dpy, w, prop, XA_WINDOW, 32,
SetWMProto.c:71:    XChangeProperty (dpy, w, prop, XA_ATOM, 32,
StBytes.c:96:    return XChangeProperty(dpy, RootWindow(dpy, 0), n_to_atom[buffer],
StName.c:39:    return XChangeProperty(dpy, w, XA_WM_NAME, XA_STRING,
StName.c:50:    return XChangeProperty(dpy, w, XA_WM_ICON_NAME, XA_STRING, 8,
WMProps.c:143:        XChangeProperty (dpy, w, XInternAtom(dpy, "WM_LOCALE_NAME", False),
Xatomtype.h:54: * XChangeProperty.  All fields must be longs as the semantics of property
Xlib.h:2069:extern int XChangeProperty(

#### XChangeSaveSet ####
ChSaveSet.c:33:XChangeSaveSet(
ChSaveSet.c:54:    return XChangeSaveSet(dpy,win,SetModeInsert);
ChSaveSet.c:62:    return XChangeSaveSet(dpy,win,SetModeDelete);
Xlib.h:2080:extern int XChangeSaveSet(

#### XChangeWindowAttributes ####
ChWAttrs.c:39:XChangeWindowAttributes (
Xlib.h:2086:extern int XChangeWindowAttributes(

#### XCheckIfEvent ####
ChkIfEv.c:38:Bool XCheckIfEvent (
ChkIfEv.c:88: * This is just like XCheckIfEvent() but doesn't
ChkIfEv.c:93:Bool XCheckIfEventNoFlush (
Xlib.h:2093:extern Bool XCheckIfEvent(
Xlib.h:2107: * This is just like XCheckIfEvent() but doesn't
Xlib.h:2112:extern Bool XCheckIfEventNoFlush(

#### XCheckIfEventNoFlush ####
ChkIfEv.c:93:Bool XCheckIfEventNoFlush (
Xlib.h:2112:extern Bool XCheckIfEventNoFlush(

#### XCheckMaskEvent ####
ChkMaskEv.c:44:Bool XCheckMaskEvent (
Xlib.h:2125:extern Bool XCheckMaskEvent(

#### XCheckTypedEvent ####
ChkTypEv.c:38:Bool XCheckTypedEvent (
Xlib.h:2131:extern Bool XCheckTypedEvent(

#### XCheckTypedWindowEvent ####
ChkTypWEv.c:38:Bool XCheckTypedWindowEvent (
Xlib.h:2137:extern Bool XCheckTypedWindowEvent(

#### XCheckWindowEvent ####
ChkWinEv.c:43:Bool XCheckWindowEvent (
Xlib.h:2144:extern Bool XCheckWindowEvent(

#### XCirculateSubwindows ####
CirWin.c:33:XCirculateSubwindows(
CirWinDn.c:33:XCirculateSubwindowsDown(
CirWinUp.c:33:XCirculateSubwindowsUp(
Xlib.h:2151:extern int XCirculateSubwindows(
Xlib.h:2157:extern int XCirculateSubwindowsDown(
Xlib.h:2162:extern int XCirculateSubwindowsUp(

#### XCirculateSubwindowsDown ####
CirWinDn.c:33:XCirculateSubwindowsDown(
Xlib.h:2157:extern int XCirculateSubwindowsDown(

#### XCirculateSubwindowsUp ####
CirWinUp.c:33:XCirculateSubwindowsUp(
Xlib.h:2162:extern int XCirculateSubwindowsUp(

#### XClearArea ####
ClearArea.c:33:XClearArea (
locking.c:186:    if (strcmp("XClearArea.c", file) && strcmp("XDrSegs.c", file)) /* ico */
locking.c:214:    if (strcmp("XClearArea.c", file) && strcmp("XDrSegs.c", file)) /* ico */
Xlib.h:2167:extern int XClearArea(

#### XClearWindow ####
Clear.c:33:XClearWindow(
Xlib.h:2177:extern int XClearWindow(

#### XClipBox ####
Region.c:158:XClipBox(
Xutil.h:387:extern int XClipBox(

#### XCloseDisplay ####
ClDisplay.c:43: * XCloseDisplay - XSync the connection to the X Server, close the connection,
ClDisplay.c:49:XCloseDisplay (
OpenDis.c:844: * and also by XCloseDisplay.   It needs to check whether all pointers
XKB.c:761:        XCloseDisplay(dpy);
Xlib.h:2182:extern int XCloseDisplay(

#### XCloseIM ####
IMWrap.c:128:XCloseIM(XIM im)
XlcDL.c:287: * since XCloseIM, XCloseOM, XlcClose aren't wrapped, but directly
Xlib.h:3855:extern Status XCloseIM(

#### XCloseOM ####
FSWrap.c:202:	XCloseOM(om);
FSWrap.c:261:    XCloseOM(font_set->core.om);
OMWrap.c:48:XCloseOM(XOM om)
XlcDL.c:287: * since XCloseIM, XCloseOM, XlcClose aren't wrapped, but directly
Xlcint.h:370:typedef Status (*XCloseOMProc)(
Xlcint.h:393:    XCloseOMProc	close;
Xlib.h:3586:extern Status XCloseOM(

#### XConfigureWindow ####
ReconfWin.c:36:XConfigureWindow(
ReconfWM.c:53:	XConfigureWindow (dpy, w, mask, changes);
ReconfWM.c:59:     * We need to inline XConfigureWindow and XSync so that everything is done
ReconfWM.c:66:     * XConfigureWindow (dpy, w, mask, changes);
Xlib.h:2186:extern int XConfigureWindow(

#### XConnectionNumber ####
Macros.c:43:int XConnectionNumber(Display *dpy) { return (ConnectionNumber(dpy)); }
Xlib.h:2193:extern int XConnectionNumber(

#### XContextDependentDrawing ####
FSWrap.c:231:XContextDependentDrawing(XFontSet font_set)
Xlib.h:3658:extern Bool XContextDependentDrawing(

#### XContextualDrawing ####
FSWrap.c:243:XContextualDrawing(XFontSet font_set)
Xlib.h:3666:extern Bool XContextualDrawing(

#### XConvertCase ####
imThaiFlt.c:798:	    XConvertCase(syms[0], keysym_return, &usym);
imThaiFlt.c:800:	    XConvertCase(syms[0], &lsym, &usym);
imThaiFlt.c:806:	    XConvertCase(syms[0], &lsym, &usym);
imThaiFlt.c:811:	XConvertCase(sym, &lsym, &usym);
imThaiFlt.c:814:	    XConvertCase(syms[0], &lsym, &usym);
KeyBind.c:105:	    XConvertCase(syms[col&~1], &lsym, &usym);
KeyBind.c:641:XConvertCase(
KeyBind.c:793:	    XConvertCase(syms[0], keysym_return, &usym);
KeyBind.c:799:	    XConvertCase(syms[0], &lsym, &usym);
KeyBind.c:804:	XConvertCase(sym, &lsym, &usym);
KeyBind.c:807:	    XConvertCase(syms[0], &lsym, &usym);
XKBCvt.c:165:    XConvertCase(sym, &lower, &upper);
XKBMisc.c:219:            XConvertCase(syms[0], &lower, &upper);
XKBMisc.c:238:                XConvertCase(syms[0], &lower, &upper);
Xutil.h:529:extern void XConvertCase(

#### XConvertSelection ####
ConvSel.c:33:XConvertSelection(
imDefIm.c:340:    XConvertSelection(display, selection, locales, locales, window,
imDefIm.c:363:    XConvertSelection(display, selection, transport, transport, window,
Xlib.h:2197:extern int XConvertSelection(

#### XCopyArea ####
CopyArea.c:33:XCopyArea(
Xlib.h:2206:extern int XCopyArea(

#### XCopyColormapAndFree ####
cmsCmap.c:287: *		Augments Xlib's XCopyColormapAndFree() to copy
CopyCmap.c:43:Colormap XCopyColormapAndFree(
Xlib.h:1549:extern Colormap XCopyColormapAndFree(

#### XCopyGC ####
CopyGC.c:33:XCopyGC (
Xlib.h:2219:extern int XCopyGC(

#### XCopyPlane ####
CopyPlane.c:33:XCopyPlane(
Xlib.h:2226:extern int XCopyPlane(

#### XCreateBitmapFromData ####
CrBFData.c:33: * XCreateBitmapFromData: Routine to make a pixmap of depth 1 from user
CrBFData.c:49:Pixmap XCreateBitmapFromData(
RdBitF.c:256:    *pixmap = XCreateBitmapFromData(display, d, (char *)data, *width, *height);
Xlib.h:1605:extern Pixmap XCreateBitmapFromData(

#### XCreateColormap ####
CrCmap.c:34:Colormap XCreateColormap(
Xlib.h:1553:extern Colormap XCreateColormap(

#### XCreateFontCursor ####
Cursor.c:34:Cursor XCreateFontCursor(
Xlib.h:1577:extern Cursor XCreateFontCursor(
Xlibint.h:184:	Font cursor_font;	   /* for XCreateFontCursor */

#### XCreateFontSet ####
FSWrap.c:164:XCreateFontSet (
imRmAttr.c:338:		    rep = XCreateFontSet(ic->core.im->core.display,
imRmAttr.c:346:		    rep = XCreateFontSet(ic->core.im->core.display,
Xlib.h:3631:extern XFontSet XCreateFontSet(

#### XCreateGC ####
CrBFData.c:57:    GC gc = XCreateGC(display, pix, (unsigned long) 0, (XGCValues *) 0);
CrGC.c:64:GC XCreateGC (
CrPFBData.c:66:    GC gc = XCreateGC(display, pix, GCForeground|GCBackground, &gcv);
OpenDis.c:724:	    if ((sp->default_gc = XCreateGC (dpy, sp->root,
Xlib.h:1585:extern GC XCreateGC(

#### XCreateGlyphCursor ####
CrGlCur.c:225:Cursor XCreateGlyphCursor(
Cursor.c:50:	return XCreateGlyphCursor (dpy, dpy->cursor_font, dpy->cursor_font,
Xlib.h:1568:extern Cursor XCreateGlyphCursor(

#### XCreateIC ####
ICWrap.c:228:XCreateIC(XIM im, ...)
Xlib.h:3875:extern XIC XCreateIC(

#### XCreateImage ####
GetImage.c:96:	    image = XCreateImage(dpy, _XVIDtoVisual(dpy, rep.visual),
GetImage.c:102:            image = XCreateImage (dpy, _XVIDtoVisual(dpy, rep.visual),
ImUtil.c:96: *	XCreateImage	Creates a default XImage data structure
ImUtil.c:274:	image->f.create_image = XCreateImage;
ImUtil.c:308:XImage *XCreateImage (
ImUtil.c:323:		  XCreateImage can calculate it.*/
Xlib.h:1442:extern XImage *XCreateImage(

#### XCreateOC ####
FSWrap.c:182:    if ((oc = XCreateOC(om, XNBaseFontName, base_font_name_list, NULL))) {
OCWrap.c:33:XCreateOC(XOM om, ...)
Xlcint.h:386:typedef XOC (*XCreateOCProc)(
Xlcint.h:396:    XCreateOCProc	create_oc;
Xlib.h:3608:extern XOC XCreateOC(

#### XCreatePixmap ####
CrBFData.c:56:    Pixmap pix = XCreatePixmap(display, d, width, height, 1);
CrCursor.c:43:Cursor XCreatePixmapCursor(
CrPFBData.c:34: * XCreatePixmapFromBitmapData: Routine to make a pixmap from user supplied bitmap data.
CrPFBData.c:51:Pixmap XCreatePixmapFromBitmapData(
CrPFBData.c:61:    Pixmap pix = XCreatePixmap(display, d, width, height, depth);
CrPixmap.c:40:Pixmap XCreatePixmap (
Xlib.h:1559:extern Cursor XCreatePixmapCursor(
Xlib.h:1598:extern Pixmap XCreatePixmap(
Xlib.h:1612:extern Pixmap XCreatePixmapFromBitmapData(

#### XCreatePixmapCursor ####
CrCursor.c:43:Cursor XCreatePixmapCursor(
Xlib.h:1559:extern Cursor XCreatePixmapCursor(

#### XCreatePixmapFromBitmapData ####
CrPFBData.c:34: * XCreatePixmapFromBitmapData: Routine to make a pixmap from user supplied bitmap data.
CrPFBData.c:51:Pixmap XCreatePixmapFromBitmapData(
Xlib.h:1612:extern Pixmap XCreatePixmapFromBitmapData(

#### XCreateRegion ####
PolyReg.c:494:    if (! (region = XCreateRegion())) return (Region) NULL;
Region.c:138:XCreateRegion(void)
Region.c:387:    if (! (s = XCreateRegion()) )
Region.c:389:    if (! (t = XCreateRegion()) ) {
Region.c:1457:    if (! (tra = XCreateRegion()) )
Region.c:1459:    if (! (trb = XCreateRegion()) ) {
Xutil.h:392:extern Region XCreateRegion(

#### XCreateSimpleWindow ####
CrWindow.c:32:Window XCreateSimpleWindow(
imDefIm.c:297:    if(!(window = XCreateSimpleWindow(display, DefaultRootWindow(display),
imTrans.c:111:    if (!(window = XCreateSimpleWindow(im->core.display,
imTrX.c:164:    if (!(spec->lib_connect_wid = XCreateSimpleWindow(im->core.display,
Xlib.h:1622:extern Window XCreateSimpleWindow(

#### XCreateWindow ####
EvToWire.c:185:		    register XCreateWindowEvent *ev =
EvToWire.c:186:			 (XCreateWindowEvent *) re;
imEvToWire.c:188:		    register XCreateWindowEvent *ev =
imEvToWire.c:189:			 (XCreateWindowEvent *) re;
imEvToWire.c:568:		    register XCreateWindowEvent *ev =
imEvToWire.c:569:			 (XCreateWindowEvent *) re;
Window.c:100:Window XCreateWindow(
XlibInt.c:3228:		    register XCreateWindowEvent *ev =
XlibInt.c:3229:			 (XCreateWindowEvent *) re;
Xlib.h:717:} XCreateWindowEvent;
Xlib.h:986:	XCreateWindowEvent xcreatewindow;
Xlib.h:1637:extern Window XCreateWindow(

#### XDefaultColormap ####
Macros.c:128:Colormap XDefaultColormap(Display *dpy, int scr)
Macros.c:194:Colormap XDefaultColormapOfScreen(Screen *s)
Xlib.h:1819:extern Colormap XDefaultColormap(
Xlib.h:1823:extern Colormap XDefaultColormapOfScreen(

#### XDefaultColormapOfScreen ####
Macros.c:194:Colormap XDefaultColormapOfScreen(Screen *s)
Xlib.h:1823:extern Colormap XDefaultColormapOfScreen(

#### XDefaultDepth ####
Macros.c:123:int XDefaultDepth(Display *dpy, int scr)
Macros.c:199:int XDefaultDepthOfScreen(Screen *s)
Xlib.h:2240:extern int XDefaultDepth(
Xlib.h:2245:extern int XDefaultDepthOfScreen(

#### XDefaultDepthOfScreen ####
Macros.c:199:int XDefaultDepthOfScreen(Screen *s)
Xlib.h:2245:extern int XDefaultDepthOfScreen(

#### XDefaultGC ####
Macros.c:62:GC XDefaultGC(Display *dpy, int scr)
Macros.c:204:GC XDefaultGCOfScreen(Screen *s)
Xlib.h:1783:extern GC XDefaultGC(
Xlib.h:1787:extern GC XDefaultGCOfScreen(

#### XDefaultGCOfScreen ####
Macros.c:204:GC XDefaultGCOfScreen(Screen *s)
Xlib.h:1787:extern GC XDefaultGCOfScreen(

#### XDefaultRootWindow ####
Macros.c:52:Window XDefaultRootWindow (Display *dpy)
Xlib.h:1770:extern Window XDefaultRootWindow(

#### XDefaultScreen ####
Macros.c:50:int XDefaultScreen(Display *dpy) { return (DefaultScreen(dpy)); }
Macros.c:175:Screen *XDefaultScreenOfDisplay(Display *dpy)
Xlib.h:1833:extern Screen *XDefaultScreenOfDisplay(
Xlib.h:2249:extern int XDefaultScreen(

#### XDefaultScreenOfDisplay ####
Macros.c:175:Screen *XDefaultScreenOfDisplay(Display *dpy)
Xlib.h:1833:extern Screen *XDefaultScreenOfDisplay(

#### XDefaultString ####
lcGenConv.c:939:	    /* output default_string of XDefaultString() */
lcGenConv.c:1965:	    /* output default_string of XDefaultString() */
lcWrap.c:488:XDefaultString(void)
Xlcint.h:309:typedef const char* (*XDefaultStringProc)(
Xlcint.h:326:    XDefaultStringProc			default_string;
XlcPubI.h:94:    const char *default_string;		/* for XDefaultString() */
Xutil.h:396:extern const char *XDefaultString (void);

#### XDefaultVisual ####
Macros.c:57:Visual *XDefaultVisual(Display *dpy, int scr)
Macros.c:209:Visual *XDefaultVisualOfScreen(Screen *s)
Xlib.h:1776:extern Visual *XDefaultVisual(
Xlib.h:1780:extern Visual *XDefaultVisualOfScreen(

#### XDefaultVisualOfScreen ####
Macros.c:209:Visual *XDefaultVisualOfScreen(Screen *s)
Xlib.h:1780:extern Visual *XDefaultVisualOfScreen(

#### XDefineCursor ####
DefCursor.c:33:XDefineCursor (
Xlib.h:2253:extern int XDefineCursor(

#### XDeleteContext ####
Context.c:57:   XDeleteContext(a,b,c) will delete the entry in (a,b,c).
Context.c:271:int XDeleteContext(Display *display, XID rid, XContext context)
Xutil.h:398:extern int XDeleteContext(

#### XDeleteModifiermapEntry ####
ModMap.c:167:XDeleteModifiermapEntry(XModifierKeymap *map,
Xlib.h:1414:extern XModifierKeymap *XDeleteModifiermapEntry(

#### XDeleteProperty ####
DelProp.c:33:XDeleteProperty(
Xlib.h:2259:extern int XDeleteProperty(

#### XDestroyIC ####
ICWrap.c:263:XDestroyIC(XIC ic)
XDefaultIMIF.c:358:/*BugId4255571. This Xfree() should be removed because XDestroyIC() still need ic after invoking _DestroyIC() and there is a XFree(ic) at the end of XDestroyIC() already.
Xlib.h:3879:extern void XDestroyIC(

#### XDestroyImage ####
GetImage.c:31:#include <nx-X11/Xutil.h>		/* for XDestroyImage */
GetImage.c:114:	    XDestroyImage(image);
GetImage.c:141:	XDestroyImage(temp_image);
ImUtil.c:35:static int _XDestroyImage(XImage *);
ImUtil.c:97: *	_XDestroyImage	Deletes an XImage data structure
ImUtil.c:275:	image->f.destroy_image = _XDestroyImage;
ImUtil.c:435:static int _XDestroyImage (XImage *ximage)
Macros.c:252:#undef XDestroyImage
Macros.c:254:XDestroyImage(
WrBitF.c:123:  XDestroyImage(image);
Xutil.h:196:extern int XDestroyImage(
Xutil.h:217:#define XDestroyImage(ximage) \

#### XDestroyOC ####
OCWrap.c:64:XDestroyOC(XOC oc)
Xlcint.h:420:typedef void (*XDestroyOCProc)(
Xlcint.h:542:    XDestroyOCProc 		destroy;
Xlib.h:3613:extern void XDestroyOC(

#### XDestroyRegion ####
PolyReg.c:523:	XDestroyRegion(region);
Region.c:284:XDestroyRegion(
Region.c:390:	XDestroyRegion(s);
Region.c:398:    XDestroyRegion(s);
Region.c:399:    XDestroyRegion(t);
Region.c:1460:	XDestroyRegion(tra);
Region.c:1466:    XDestroyRegion(tra);
Region.c:1467:    XDestroyRegion(trb);
Xutil.h:404:extern int XDestroyRegion(

#### XDestroySubwindows ####
DestSubs.c:33:XDestroySubwindows(
Xlib.h:2270:extern int XDestroySubwindows(

#### XDestroyWindow ####
cmsCmap.c:212:	    XDestroyWindow(dpy, tmpWindow);
DestWind.c:33:XDestroyWindow (
EvToWire.c:199:		    register XDestroyWindowEvent *ev =
EvToWire.c:200:				(XDestroyWindowEvent *) re;
imDefIm.c:375:		XDestroyWindow(display, window);
imDefIm.c:386:    XDestroyWindow(display, window);
imEvToWire.c:202:		    register XDestroyWindowEvent *ev =
imEvToWire.c:203:				(XDestroyWindowEvent *) re;
imEvToWire.c:582:		    register XDestroyWindowEvent *ev =
imEvToWire.c:583:				(XDestroyWindowEvent *) re;
imTrans.c:137:    XDestroyWindow(im->core.display, spec->window);
imTrX.c:239:    XDestroyWindow(im->core.display,
XlibInt.c:3242:		    register XDestroyWindowEvent *ev =
XlibInt.c:3243:				(XDestroyWindowEvent *) re;
Xlib.h:726:} XDestroyWindowEvent;
Xlib.h:987:	XDestroyWindowEvent xdestroywindow;
Xlib.h:2265:extern int XDestroyWindow(

#### XDirectionalDependentDrawing ####
FSWrap.c:237:XDirectionalDependentDrawing(XFontSet font_set)
Xlib.h:3662:extern Bool XDirectionalDependentDrawing(

#### XDisableAccessControl ####
ChAccCon.c:39:XDisableAccessControl(register Display *dpy)
Xlib.h:2283:extern int XDisableAccessControl(

#### XDisplayCells ####
Macros.c:106:int XDisplayCells(Display *dpy, int scr)
Xlib.h:2288:extern int XDisplayCells(

#### XDisplayHeight ####
Macros.c:86:int XDisplayHeight(Display *dpy, int scr)
Macros.c:96:int XDisplayHeightMM(Display *dpy, int scr)
Xlib.h:2293:extern int XDisplayHeight(
Xlib.h:2298:extern int XDisplayHeightMM(

#### XDisplayHeightMM ####
Macros.c:96:int XDisplayHeightMM(Display *dpy, int scr)
Xlib.h:2298:extern int XDisplayHeightMM(

#### XDisplayKeycodes ####
Misc.c:48:XDisplayKeycodes(
Xlib.h:2303:extern int XDisplayKeycodes(

#### XDisplayMotionBufferSize ####
Misc.c:42:unsigned long XDisplayMotionBufferSize(Display *dpy)
Xlib.h:1726:extern unsigned long XDisplayMotionBufferSize(

#### XDisplayName ####
ConnDis.c:640:     *  XDisplayString() and XDisplayName() agree.
DisName.c:30:/* XDisplayName.c */
DisName.c:40: *	strncpy( displaybuf, XDisplayName( display ), sizeof(displaybuf) );
DisName.c:55:XDisplayName(
Xlib.h:1516:extern char *XDisplayName(

#### XDisplayOfIM ####
IMWrap.c:146:XDisplayOfIM(XIM im)
Xlib.h:3867:extern Display *XDisplayOfIM(

#### XDisplayOfOM ####
OMWrap.c:120:XDisplayOfOM(XOM om)
Xlib.h:3600:extern Display *XDisplayOfOM(

#### XDisplayOfScreen ####
Macros.c:180:Display *XDisplayOfScreen(Screen *s) { return (DisplayOfScreen(s)); }
Xlib.h:1826:extern Display *XDisplayOfScreen(

#### XDisplayPlanes ####
Macros.c:101:int XDisplayPlanes(Display *dpy, int scr)
Xlib.h:2309:extern int XDisplayPlanes(

#### XDisplayString ####
ConnDis.c:640:     *  XDisplayString() and XDisplayName() agree.
Macros.c:121:char *XDisplayString(Display *dpy) { return (DisplayString(dpy)); }
Xlib.h:1816:extern char *XDisplayString(

#### XDisplayWidth ####
Macros.c:81:int XDisplayWidth(Display *dpy, int scr)
Macros.c:91:int XDisplayWidthMM(Display *dpy, int scr)
Xlib.h:2314:extern int XDisplayWidth(
Xlib.h:2319:extern int XDisplayWidthMM(

#### XDisplayWidthMM ####
Macros.c:91:int XDisplayWidthMM(Display *dpy, int scr)
Xlib.h:2319:extern int XDisplayWidthMM(

#### XDoesBackingStore ####
Macros.c:232:int XDoesBackingStore(Screen *s) { return (DoesBackingStore(s)); }
Xlib.h:2275:extern int XDoesBackingStore(

#### XDoesSaveUnders ####
Macros.c:230:Bool XDoesSaveUnders(Screen *s) { return (DoesSaveUnders(s)); }
Xlib.h:2279:extern Bool XDoesSaveUnders(

#### XDrawArc ####
DrArc.c:27:/* Note to future maintainers:  XDrawArc does NOT batch successive PolyArc
DrArc.c:39:XDrawArc(
DrArcs.c:35:XDrawArcs(
Xlib.h:2324:extern int XDrawArc(
Xlib.h:2336:extern int XDrawArcs(

#### XDrawArcs ####
DrArcs.c:35:XDrawArcs(
Xlib.h:2336:extern int XDrawArcs(

#### XDrawImageString16 ####
ImText16.c:33:XDrawImageString16(
Xlib.h:2354:extern int XDrawImageString16(

#### XDrawImageString ####
ImText16.c:33:XDrawImageString16(
ImText.c:33:XDrawImageString(
omDefault.c:410:    XDrawImageString(dpy, d, gc, x, y, text, length);
XDefaultOMIF.c:814:    XDrawImageString(dpy, d, gc, x, y, text, length);
Xlib.h:2344:extern int XDrawImageString(
Xlib.h:2354:extern int XDrawImageString16(

#### XDrawLine ####
DrArc.c:28:   requests into a single request like XDrawLine, XDrawPoint, etc.
DrLine.c:38:XDrawLine (
DrLines.c:33:XDrawLines (
Xlib.h:2364:extern int XDrawLine(
Xlib.h:2374:extern int XDrawLines(

#### XDrawLines ####
DrLines.c:33:XDrawLines (
Xlib.h:2374:extern int XDrawLines(

#### XDrawPoint ####
DrArc.c:28:   requests into a single request like XDrawLine, XDrawPoint, etc.
DrPoint.c:37:XDrawPoint(
DrPoints.c:33:XDrawPoints(
Xlib.h:2383:extern int XDrawPoint(
Xlib.h:2391:extern int XDrawPoints(

#### XDrawPoints ####
DrPoints.c:33:XDrawPoints(
Xlib.h:2391:extern int XDrawPoints(

#### XDrawRectangle ####
DrRect.c:38:XDrawRectangle(
DrRects.c:33:XDrawRectangles(
Xlib.h:2400:extern int XDrawRectangle(
Xlib.h:2410:extern int XDrawRectangles(

#### XDrawRectangles ####
DrRects.c:33:XDrawRectangles(
Xlib.h:2410:extern int XDrawRectangles(

#### XDrawSegments ####
DrSegs.c:33:XDrawSegments (
Xlib.h:2418:extern int XDrawSegments(

#### XDrawString16 ####
omText.c:123:		XDrawString16(dpy, d, gc, wx, wy, buf2b, 1);
omText.c:130:		XDrawString16(dpy, d, gc, wx, wy, buf2b, 1);
omText.c:212:		XDrawString16(dpy, d, gc, x, y, (XChar2b *)ptr, char_len);
Text16.c:33:XDrawString16(
Xlib.h:2436:extern int XDrawString16(

#### XDrawString ####
omDefault.c:352:    XDrawString(dpy, d, gc, x, y, text, length);
omText.c:123:		XDrawString16(dpy, d, gc, wx, wy, buf2b, 1);
omText.c:130:		XDrawString16(dpy, d, gc, wx, wy, buf2b, 1);
omText.c:143:		XDrawString(dpy, d, gc, wx, wy, buf, 1);
omText.c:150:		XDrawString(dpy, d, gc, wx, wy, buf, 1);
omText.c:212:		XDrawString16(dpy, d, gc, x, y, (XChar2b *)ptr, char_len);
omText.c:216:		XDrawString(dpy, d, gc, x, y, (char *)ptr, char_len);
Text16.c:33:XDrawString16(
Text.c:33:XDrawString(
XDefaultOMIF.c:782:    XDrawString(dpy, d, gc, x, y, text, length);
Xlib.h:2426:extern int XDrawString(
Xlib.h:2436:extern int XDrawString16(

#### XDrawText16 ####
PolyTxt16.c:33:XDrawText16(
Xlib.h:2456:extern int XDrawText16(

#### XDrawText ####
PolyTxt16.c:33:XDrawText16(
PolyTxt.c:33:XDrawText(
Xlib.h:2446:extern int XDrawText(
Xlib.h:2456:extern int XDrawText16(

#### XEHeadOfExtensionList ####
Font.c:321:    pData = XFindOnExtensionList(XEHeadOfExtensionList(dpy_union),
Font.c:348:    XAddToExtensionList(XEHeadOfExtensionList(dpy_union), pData);
Font.c:609:	    XAddToExtensionList(XEHeadOfExtensionList(fs_union), pData);
Font.c:637:    if ((pData = XFindOnExtensionList(XEHeadOfExtensionList(fs_union),
InitExt.c:98:XExtData **XEHeadOfExtensionList(XEDataObject object)
Xlib.h:1761:extern XExtData **XEHeadOfExtensionList(

#### XESetBeforeFlush ####
InitExt.c:389:BeforeFlushType XESetBeforeFlush(
Xlibint.h:1197:extern void (*XESetBeforeFlush(

#### XESetCloseDisplay ####
InitExt.c:218:CloseDisplayType XESetCloseDisplay(
Xlibint.h:1086:extern int (*XESetCloseDisplay(

#### XESetCopyEventCookie ####
InitExt.c:280:CopyEventCookieType XESetCopyEventCookie(
Xlibint.h:1160:extern Bool (*XESetCopyEventCookie(

#### XESetCopyGC ####
InitExt.c:143:CopyGCType XESetCopyGC(
Xlibint.h:1026:extern int (*XESetCopyGC(

#### XESetCreateFont ####
InitExt.c:188:CreateFontType XESetCreateFont(
Xlibint.h:1062:extern int (*XESetCreateFont(

#### XESetCreateGC ####
InitExt.c:128:CreateGCType XESetCreateGC(
Xlibint.h:1014:extern int (*XESetCreateGC(

#### XESetError ####
InitExt.c:344:ErrorType XESetError(
InitExt.c:359:ErrorStringType XESetErrorString(
Xlibint.h:1097:extern int (*XESetError(
Xlibint.h:1110:extern char* (*XESetErrorString(

#### XESetErrorString ####
InitExt.c:359:ErrorStringType XESetErrorString(
Xlibint.h:1110:extern char* (*XESetErrorString(

#### XESetEventToWire ####
InitExt.c:302:EventToWireType XESetEventToWire(
Xlibint.h:1173:extern Status (*XESetEventToWire(

#### XESetFlushGC ####
InitExt.c:158:FlushGCType XESetFlushGC(
Xlibint.h:1038:extern int (*XESetFlushGC(

#### XESetFreeFont ####
InitExt.c:203:FreeFontType XESetFreeFont(
Xlibint.h:1074:extern int (*XESetFreeFont(

#### XESetFreeGC ####
InitExt.c:173:FreeGCType XESetFreeGC(
Xlibint.h:1050:extern int (*XESetFreeGC(

#### XESetPrintErrorValues ####
InitExt.c:374:PrintErrorType XESetPrintErrorValues(
Xlibint.h:1124:extern void (*XESetPrintErrorValues (

#### XESetWireToError ####
InitExt.c:322:WireToErrorType XESetWireToError(
Xlibint.h:1185:extern Bool (*XESetWireToError(

#### XESetWireToEvent ####
InitExt.c:239:WireToEventType XESetWireToEvent(
InitExt.c:259:WireToEventCookieType XESetWireToEventCookie(
XKBUse.c:811:    XESetWireToEvent(dpy, ev_base + XkbEventCode, wire_to_event);
Xlibint.h:1136:extern Bool (*XESetWireToEvent(
Xlibint.h:1148:extern Bool (*XESetWireToEventCookie(

#### XESetWireToEventCookie ####
InitExt.c:259:WireToEventCookieType XESetWireToEventCookie(
Xlibint.h:1148:extern Bool (*XESetWireToEventCookie(

#### XEmptyRegion ####
Region.c:1476:XEmptyRegion(
Xutil.h:408:extern int XEmptyRegion(

#### XEnableAccessControl ####
ChAccCon.c:33:XEnableAccessControl(register Display *dpy)
Xlib.h:2466:extern int XEnableAccessControl(

#### XEqualRegion ####
Region.c:1487:XEqualRegion(Region r1, Region r2)
Xutil.h:412:extern int XEqualRegion(

#### XEventMaskOfScreen ####
Macros.c:234:long XEventMaskOfScreen(Screen *s) { return (EventMaskOfScreen(s)); }
Xlib.h:1836:extern long XEventMaskOfScreen(

#### XEventsQueued ####
ChkIfEv.c:71:		_XEventsQueued(dpy, QueuedAfterReading);
ChkIfEv.c:127:		_XEventsQueued(dpy, QueuedAfterReading);
ChkMaskEv.c:78:		_XEventsQueued(dpy, QueuedAfterReading);
ChkTypEv.c:69:		_XEventsQueued(dpy, QueuedAfterReading);
ChkTypWEv.c:71:		_XEventsQueued(dpy, QueuedAfterReading);
ChkWinEv.c:79:		_XEventsQueued(dpy, QueuedAfterReading);
Pending.c:38:int XEventsQueued (
Pending.c:44:    fprintf(stderr, "\nXEventsQueued: Called with a display at [%p].\n", (void *)dpy);
Pending.c:51:	ret_val = _XEventsQueued (dpy, mode);
Pending.c:53:    fprintf(stderr, "\nXEventsQueued: Going to unlock the display at [%p].\n", (void *)dpy);
Pending.c:66:	ret_val = _XEventsQueued (dpy, QueuedAfterFlush);
XlibInt.c:1101:_XEventsQueued(
XlibInt.c:1116:	printf("_XEventsQueued called in thread %x\n", XThread_Self());
XlibInt.c:1128:            fprintf(stderr, "_XEventsQueued: Returning [%d] after display failure.\n",
XlibInt.c:1173:        fprintf(stderr, "_XEventsQueued: Checking bytes readable.\n");
XlibInt.c:1202:            fprintf(stderr, "_XEventsQueued: Calling poll().\n");
XlibInt.c:1209:            fprintf(stderr, "_XEventsQueued: Calling select().\n");
XlibInt.c:1257:            fprintf(stderr, "_XEventsQueued: Returning [%d].\n", dpy->qlen);
Xlib.h:2470:extern int XEventsQueued(
Xlibint.h:106:	int conn_checker;         /* ugly thing used by _XEventsQueued */
Xlibint.h:940:extern int _XEventsQueued(

#### XExtendedMaxRequestSize ####
Misc.c:63:long XExtendedMaxRequestSize(Display *dpy)
Xlib.h:1717:extern long XExtendedMaxRequestSize(

#### XExtentsOfFontSet ####
FSWrap.c:249:XExtentsOfFontSet(XFontSet font_set)
imRm.c:747:	fset_extents = XExtentsOfFontSet(fontset);
Xlib.h:3670:extern XFontSetExtents *XExtentsOfFontSet(

#### XFetchBuffer ####
StBytes.c:55:char *XFetchBuffer (
StBytes.c:85:    return (XFetchBuffer (dpy, nbytes, 0));
Xlib.h:1496:extern char *XFetchBuffer(

#### XFetchBytes ####
StBytes.c:81:char *XFetchBytes (
Xlib.h:1492:extern char *XFetchBytes(

#### XFetchName ####
FetchName.c:36:Status XFetchName (
Xlib.h:2475:extern Status XFetchName(

#### XFillArc ####
FillArc.c:37:XFillArc(
FillArcs.c:35:XFillArcs(
Xlib.h:2481:extern int XFillArc(
Xlib.h:2493:extern int XFillArcs(

#### XFillArcs ####
FillArcs.c:35:XFillArcs(
Xlib.h:2493:extern int XFillArcs(

#### XFillPolygon ####
FillPoly.c:33:XFillPolygon(
Xlib.h:2501:extern int XFillPolygon(

#### XFillRectangle ####
FillRct.c:37:XFillRectangle(
FillRcts.c:33:XFillRectangles(
omImText.c:56:    XFillRectangle(dpy, d, gc, x + extent.x, y + extent.y, extent.width,
Xlib.h:2511:extern int XFillRectangle(
Xlib.h:2521:extern int XFillRectangles(

#### XFillRectangles ####
FillRcts.c:33:XFillRectangles(
Xlib.h:2521:extern int XFillRectangles(

#### XFilterEvent ####
FilterEv.c:72:XFilterEvent(
FilterEv.c:77:    XFilterEventList	p;
RegstFlt.c:65:    register XFilterEventList fl;
RegstFlt.c:86:    XFilterEventRec		*rec;
RegstFlt.c:88:    rec = Xmalloc(sizeof(XFilterEventRec));
RegstFlt.c:118:    XFilterEventRec		*rec;
RegstFlt.c:120:    rec = Xmalloc(sizeof(XFilterEventRec));
RegstFlt.c:145:    register XFilterEventList	*prev, fl;
Xlcint.h:79:typedef Bool (*XFilterEventProc)(
Xlcint.h:91:    XFilterEventProc filter;
Xlcint.h:93:} XFilterEventRec, *XFilterEventList;
Xlib.h:3915:extern Bool XFilterEvent(

#### XFindContext ####
Context.c:56:   XFindContext(a,b,c,&d) will set d to be the value in position (a,b,c).
Context.c:236:int XFindContext(Display *display, XID rid, XContext context, XPointer *data)
Xutil.h:417:extern int XFindContext(

#### XFindOnExtensionList ####
Font.c:321:    pData = XFindOnExtensionList(XEHeadOfExtensionList(dpy_union),
Font.c:637:    if ((pData = XFindOnExtensionList(XEHeadOfExtensionList(fs_union),
InitExt.c:113:XExtData *XFindOnExtensionList(
Xlib.h:1757:extern XExtData *XFindOnExtensionList(

#### XFlush ####
ChGC.c:47:	_XFlushGCCache(dpy, gc);
ChkIfEv.c:74:		_XFlush(dpy);
ChkMaskEv.c:81:		_XFlush(dpy);
ChkTypEv.c:72:		_XFlush(dpy);
ChkTypWEv.c:74:		_XFlush(dpy);
ChkWinEv.c:82:		_XFlush(dpy);
CopyGC.c:50:         _XFlushGCCache(dpy, srcGC);
CrGC.c:315:void _XFlushGCCache(
CrGC.c:335:XFlushGC(
Flush.c:36:XFlush (register Display *dpy)
Flush.c:39:    _XFlush (dpy);
imTrans.c:240:    XFlush(im->core.display);
imTrX.c:194:    XFlush(im->core.display);
imTrX.c:488:_XimXFlush(Xim im)
imTrX.c:490:    XFlush(im->core.display);
imTrX.c:513:    im->private.proto.flush    = _XimXFlush;
PolyTxt16.c:90:    	_XFlush (dpy);
PolyTxt16.c:237:       _XFlush (dpy);
PolyTxt.c:90:    	_XFlush (dpy);
PolyTxt.c:230:       _XFlush (dpy);
SetClMask.c:43:    _XFlushGCCache(dpy, gc);
SetFont.c:42:	_XFlushGCCache(dpy, gc);
SetStip.c:42:    _XFlushGCCache(dpy, gc);
SetTile.c:42:    _XFlushGCCache(dpy, gc);
Text16.c:71:    	_XFlush (dpy);
Text16.c:124:       _XFlush (dpy);
Text.c:71:    	_XFlush (dpy);
Text.c:135:       _XFlush (dpy);
XlibInt.c:940:static void _XFlushInt(
XlibInt.c:946: * _XFlush - Flush the X request buffer.  If the buffer is empty, no
XlibInt.c:950:void _XFlush(
XlibInt.c:957:    _XFlushInt(dpy, NULL);
XlibInt.c:960:/* _XFlushInt - Internal version of _XFlush used to do multi-threaded
XlibInt.c:964:static void _XFlushInt(
XlibInt.c:978:        fprintf(stderr, "_XFlushInt: Entering flush with [%d] bytes to write.\n",
XlibInt.c:984:	 * callers of _XFlush() are not verifying this before they call it.
XlibInt.c:989:        fprintf(stderr, "_XFlushInt: Returning with I/O error detected.\n");
XlibInt.c:1122:	    _XFlush(dpy);
XlibInt.c:1249:	    /* _XFlush can enqueue events */
XlibInt.c:1412:		    _XFlush (dpy);
XlibInt.c:2180:    _XFlushInt(dpy, cvl ? cvl->cv : NULL);
XlibInt.c:2192:    _XFlush(dpy);
XlibInt.c:3882:	    _XFlush(dpy);
XlibInt.c:3984:       _XFlush(dpy);
Xlib.h:1594:extern void XFlushGC(
Xlib.h:2529:extern int XFlush(
Xlibint.h:88:#define _XFlush _XFlushIt
Xlibint.h:429:#define XlibDisplayWriting	(1L << 6) /* in _XFlushInt, _XSend */
Xlibint.h:551:extern void _XFlushGCCache(Display *dpy, GC gc);
Xlibint.h:553:	if ((gc)->dirty) _XFlushGCCache((dpy), (gc))
Xlibint.h:589:        _XFlush (dpy); \
Xlibint.h:937:extern void _XFlush(

#### XFlushGC ####
ChGC.c:47:	_XFlushGCCache(dpy, gc);
CopyGC.c:50:         _XFlushGCCache(dpy, srcGC);
CrGC.c:315:void _XFlushGCCache(
CrGC.c:335:XFlushGC(
SetClMask.c:43:    _XFlushGCCache(dpy, gc);
SetFont.c:42:	_XFlushGCCache(dpy, gc);
SetStip.c:42:    _XFlushGCCache(dpy, gc);
SetTile.c:42:    _XFlushGCCache(dpy, gc);
Xlib.h:1594:extern void XFlushGC(
Xlibint.h:551:extern void _XFlushGCCache(Display *dpy, GC gc);
Xlibint.h:553:	if ((gc)->dirty) _XFlushGCCache((dpy), (gc))

#### XFontsOfFontSet ####
FSWrap.c:208:XFontsOfFontSet(
imRmAttr.c:977:	list_ret = XFontsOfFontSet((XFontSet)p->value,
imRmAttr.c:1028:	list_ret = XFontsOfFontSet((XFontSet)p->value,
imRmAttr.c:1205:	list_ret = XFontsOfFontSet((XFontSet)value,
imRmAttr.c:1246:	list_ret = XFontsOfFontSet((XFontSet)value,
Xlib.h:3644:extern int XFontsOfFontSet(

#### XForceScreenSaver ####
FSSaver.c:35:    XForceScreenSaver (dpy, ScreenSaverActive);
FSSaver.c:42:    XForceScreenSaver (dpy, ScreenSaverReset);
FSSaver.c:47:XForceScreenSaver(
Xlib.h:2533:extern int XForceScreenSaver(

#### XFree ####
ChkMaskEv.c:56:	_XFreeEventCookies(dpy);
ChkTypEv.c:50:	_XFreeEventCookies(dpy);
ChkTypWEv.c:51:	_XFreeEventCookies(dpy);
ChkWinEv.c:56:	_XFreeEventCookies(dpy);
ClDisplay.c:60:		    XFreeGC (dpy, sp->default_gc);
ClDisplay.c:80:	_XFreeDisplayStructure (dpy);
cmsProp.c:137:	    XFree (prop_ret);
Context.c:132:static void _XFreeContextDB(Display *display)
Context.c:147:	_XFreeMutex(&db->linfo);
Context.c:200:	    display->free_funcs->context_db = _XFreeContextDB;
CrBFData.c:59:        XFreePixmap(display, pix);
CrBFData.c:77:        XFreeGC(display, gc);
CrPFBData.c:68:        XFreePixmap(display, pix);
CrPFBData.c:86:        XFreeGC(display, gc);
Font.c:4:Copyright (c) 2000  The XFree86 Project, Inc.
Font.c:24:XFree86 Project shall not be used in advertising or otherwise to promote the
Font.c:26:authorization from the X Consortium and the XFree86 Project.
Font.c:151:XFreeFont(
Font.c:172:    _XFreeExtData(fs->ext_data);
Font.c:699:	_XFreeExtData(fs->ext_data);
Font.c:705:	XFreeFont(dpy, fs);
FontInfo.c:168:	flist[i] = NULL; /* required in case XFreeFontNames is called */
FontInfo.c:200:XFreeFontInfo (
FontNames.c:91:	*ch = 1; /* make sure it is non-zero for XFreeFontNames */
FontNames.c:123:XFreeFontNames(char **list)
FreeCmap.c:35:XFreeColormap(
FreeCols.c:33:XFreeColors(
FreeCurs.c:33:XFreeCursor(
FreeEData.c:33:_XFreeExtData (XExtData *extension)
FreeEventData.c:31:XFreeEventData(Display *dpy, XGenericEventCookie *event)
FreeEventData.c:36:        XFree(event->data);
FreeGC.c:33:XFreeGC (
FreeGC.c:46:    _XFreeExtData(gc->ext_data);
FreePix.c:33:XFreePixmap(
FSWrap.c:257:XFreeFontSet(
GetFPath.c:92:XFreeFontPath (char **list)
imConv.c:33:/* 2000 Modifier: Ivan Pascal	The XFree86 Project.
imDefIm.c:305:	XFree( (XPointer)str );
imDefIm.c:308:    XFree( (XPointer)str );
imDefIm.c:347:	XFree((XPointer)address);
imDefIm.c:353:	    XFree( locale_name[i] );
imDefIm.c:357:    XFree((XPointer)address);
imDefIm.c:374:		XFree((XPointer)address);
imDefIm.c:381:    XFree((XPointer)address);
imDefIm.c:385:	    XFree( locale_name[i] );
imDefIm.c:416:	    XFree((XPointer)prop_return);
imDefIm.c:429:    XFree((XPointer)prop_return);
imExten.c:453:        XFree(buf);
imExten.c:456:    XFree(buf);
imInsClbk.c:106:	XFree( atoms );
imInsClbk.c:130:    XFree( atoms );
imInsClbk.c:140:	    XFree( tmp );
imInsClbk.c:261:		XFree( icb );
imRmAttr.c:963:	XFree(colormap_ret);
imRmAttr.c:1014:	XFree(colormap_ret);
imThaiFlt.c:591:            XFree(screc.text->string.mbs);
imThaiFlt.c:593:        XFree(screc.text);
imThaiFlt.c:625:                XFree(screc.text->string.wcs);
imThaiFlt.c:628:                XFree(screc.text->string.mbs);
imThaiFlt.c:631:        XFree(screc.text);
imThaiFlt.c:1276:            XFreeModifiermap(map);
imThaiFlt.c:1280:    XFreeModifiermap(map);
imTrX.c:85:_XimXFreeIntrCallback(
imTrX.c:241:    _XimXFreeIntrCallback(im);
imTrX.c:372:		XFree(prop_ret);
imTrX.c:379:		XFree(prop_ret);
imTrX.c:400:		XFree(prop_ret);
imTrX.c:416:	XFree(prop_ret);
imTrX.c:425:		XFree(prop_ret);
imTrX.c:438:	XFree(prop_ret);
IntAtom.c:40:_XFreeAtomTable(Display *dpy)
IntAtom.c:76:	dpy->free_funcs->atoms = _XFreeAtomTable;
IntAtom.c:131:	    dpy->free_funcs->atoms = _XFreeAtomTable;
KeyBind.c:218:	XFreeModifiermap(dpy->modifiermap);
KeyBind.c:220:    dpy->free_funcs->modifiermap = XFreeModifiermap;
KeyBind.c:245:	    XFreeModifiermap(event->display->modifiermap);
KeyBind.c:898:_XFreeKeyBindings(
KeyBind.c:942:    dpy->free_funcs->key_bindings = _XFreeKeyBindings;
lcCT.c:35: *  Modifier: Ivan Pascal     The XFree86 Project
lcCT.c:36: *  Modifier: Bruno Haible    The XFree86 Project
lcCT.c:119:    /* Backward compatibility with XFree86 3.x */
lcDefConv.c:27: * Modifier: Ivan Pascal        The XFree86 Project
lcGenConv.c:35: *  Modifier: Ivan Pascal      The XFree86 Project
lcRM.c:24: * Bug fixes: Bruno Haible	XFree86 Inc.
lcUtil.c:24: * Bug fixes: Bruno Haible	XFree86 Inc.
LiHosts.c:68: * can be freed using XFree.
ListExt.c:102:XFreeExtensionList (char **list)
locking.c:40:#undef _XFreeMutex
locking.c:128:static void _XFreeMutex(
locking.c:401:static void _XFreeDisplayLock(
locking.c:520:	_XFreeDisplayLock(dpy);
locking.c:527:	_XFreeDisplayLock(dpy);
locking.c:606:    _XFreeMutex_fn = _XFreeMutex;
locking.c:608:    _XFreeDisplayLock_fn = _XFreeDisplayLock;
MaskEvent.c:55:	_XFreeEventCookies(dpy);
ModMap.c:115:XFreeModifiermap(XModifierKeymap *map)
ModMap.c:160:    (void) XFreeModifiermap(map);
NextEvent.c:47:	_XFreeEventCookies(dpy);
omGeneric.c:307:	    XFreeFontNames(fn_list);
omGeneric.c:495:    XFreeFontNames(list);
omGeneric.c:645:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:649:            XFree(prop_fname);
omGeneric.c:650:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:655:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:1171:    XFreeStringList(name_list);
omGeneric.c:1176:    XFreeStringList(name_list);
omGeneric.c:1329:		XFreeFont(dpy,font_data->font);		/* ADD 1996.01.7 */
omGeneric.c:1331:		XFreeFontInfo(NULL, font_data->font, 1);/* Add 1996.01.23 */
omGeneric.c:1366:		    XFreeFont(dpy,font_set->font);
omGeneric.c:1368:		    XFreeFontInfo(NULL, font_set->font, 1);
omGeneric.c:1373:		    XFreeFontInfo(NULL, font_set->info, 1);
omGeneric.c:1428:    XFreeStringList(oc->core.font_info.font_name_list);
omGeneric.c:1430:    XFreeStringList(oc->core.missing_list.charset_list);
omGeneric.c:1689:	XFreeStringList(om->core.required_charset.charset_list);
omXChar.c:294:    XFreeFontInfo(NULL, font_set->info, 1);
OpenDis.c:87:void (*_XFreeDisplayLock_fn)(Display *dpy) = NULL;
OpenDis.c:90:#define FreeDisplayLock(d)	if (_XFreeDisplayLock_fn) (*_XFreeDisplayLock_fn)(d)
OpenDis.c:231:	 * Initialize pointers to NULL so that XFreeDisplayStructure will
OpenDis.c:353:	if ((dpy->free_funcs = Xcalloc(1, sizeof(_XFreeFuncRec))) == NULL) {
OpenDis.c:842:/* XFreeDisplayStructure frees all the storage associated with a
OpenDis.c:851:void _XFreeDisplayStructure(Display *dpy)
OpenDis.c:863:	    _XFreeEventCookies(dpy);
OpenDis.c:909:			     _XFreeExtData (dp->visuals[k].ext_data);
OpenDis.c:917:		_XFreeExtData (sp->ext_data);
OpenDis.c:927:	      _XFreeExtData (dpy->pixmap_format[i].ext_data);
OpenDis.c:939:	_XFreeExtData (dpy->ext_data);
OpenDis.c:969:	_XFreeX11XCBStructure(dpy);
OpenDis.c:986:    _XFreeDisplayStructure (dpy);
PrOfId.c:63: *		the application is responsible for freeing (using XFree)
Region.c:277:	_XFreeTemp(dpy, (char *)xr, total);
RegstFlt.c:62:_XFreeIMFilters(
RegstFlt.c:100:    display->free_funcs->im_filters = _XFreeIMFilters;
RegstFlt.c:132:    display->free_funcs->im_filters = _XFreeIMFilters;
TextToStr.c:110:void XFreeStringList (char **list)
UIThrStubs.c:40: * Modifications by Carlos A M dos Santos, XFree86 Project, November 1999.
WinEvent.c:58:	_XFreeEventCookies(dpy);
XDefaultIMIF.c:240:    XFree(im->private);
XDefaultIMIF.c:241:    XFree(im->core.im_name);
XDefaultIMIF.c:242:    XFree(im->core.res_name);
XDefaultIMIF.c:243:    XFree(im->core.res_class);
XDefaultIMIF.c:351:    XFree(ic);
XDefaultIMIF.c:358:/*BugId4255571. This Xfree() should be removed because XDestroyIC() still need ic after invoking _DestroyIC() and there is a XFree(ic) at the end of XDestroyIC() already.
XDefaultIMIF.c:360:   	XFree(ic); */
XDefaultIMIF.c:455:    XFree(mb_buf);
XDefaultOMIF.c:296:	XFreeFontNames(list);
XDefaultOMIF.c:302:	XFreeFont(dpy, fs);
XDefaultOMIF.c:355:			XFreeFontInfo(fn_list, fs_list, list_num);
XDefaultOMIF.c:448:    XFreeStringList(name_list);
XDefaultOMIF.c:452:    XFreeStringList(name_list);
XDefaultOMIF.c:526:    XFreeStringList(oc->core.font_info.font_name_list);
XDefaultOMIF.c:531:		XFreeFont(dpy, font);
XDefaultOMIF.c:533:		XFreeFontInfo(NULL, font, 1);
XDefaultOMIF.c:539:    XFreeStringList(oc->core.missing_list.charset_list);
XDefaultOMIF.c:936:	XFreeStringList(om->core.required_charset.charset_list);
XKBSetGeom.c:440:        _XFreeTemp(dpy, tbuf, sz);
XlibInt.c:85:void (*_XFreeMutex_fn)(LockInfoPtr) = NULL;
XlibInt.c:2806:   jar. _XFreeEventCookies removes all unclaimed cookies from the jar
XlibInt.c:2809:   _XFreeDisplayStructure calls _XFreeEventCookies for each cookie in the
XlibInt.c:2831:_XFreeEventCookies(Display *dpy)
XlibInt.c:2843:        XFree(e->ev.data);
XlibInt.c:2844:        XFree(e);
XlibInt.c:3011:	 * _XFreeDisplayStructure */
XlibInt.c:3778: * MT safe, but you must hand the buffer back with _XFreeTemp.
XlibInt.c:3792:void _XFreeTemp(
XlibInt.c:3829:XFree (void *data)
XlibInt.c:4194:void (**_XFreeMutex_fn_p)(LockInfoPtr) = &_XFreeMutex_fn;
Xrm.c:803:	_XFreeMutex(&from->linfo);
Xrm.c:2662:	_XFreeMutex(&db->linfo);
locking.h:154:extern void (*_XFreeDisplayLock_fn)(Display *dpy);
Xintatom.h:29:extern void _XFreeAtomTable(Display *dpy);
Xintconn.h:34:extern void _XFreeDisplayStructure(Display *dpy);
Xlib.h:69:/* API mentioning "UTF8" or "utf8" is an XFree86 extension, introduced in
Xlib.h:1923:extern void XFreeStringList(
Xlib.h:2538:extern int XFree(
Xlib.h:2542:extern int XFreeColormap(
Xlib.h:2547:extern int XFreeColors(
Xlib.h:2555:extern int XFreeCursor(
Xlib.h:2560:extern int XFreeExtensionList(
Xlib.h:2564:extern int XFreeFont(
Xlib.h:2569:extern int XFreeFontInfo(
Xlib.h:2575:extern int XFreeFontNames(
Xlib.h:2579:extern int XFreeFontPath(
Xlib.h:2583:extern int XFreeGC(
Xlib.h:2588:extern int XFreeModifiermap(
Xlib.h:2592:extern int XFreePixmap(
Xlib.h:3639:extern void XFreeFontSet(
Xlib.h:4026:extern void XFreeEventData(
Xlibint.h:104:	struct _XFreeFuncs *free_funcs; /* internal free functions */
Xlibint.h:304:#define _XFreeMutex_fn (*_XFreeMutex_fn_p)
Xlibint.h:314:extern void (*_XFreeMutex_fn)(
Xlibint.h:347:#define _XFreeMutex(lock)	if (_XFreeMutex_fn) (*_XFreeMutex_fn)(lock);
Xlibint.h:355:#define _XFreeMutex(lock)
Xlibint.h:736:typedef struct _XFreeFuncs {
Xlibint.h:737:    FreeFuncType atoms;		/* _XFreeAtomTable */
Xlibint.h:738:    FreeModmapType modifiermap;	/* XFreeModifiermap */
Xlibint.h:739:    FreeFuncType key_bindings;	/* _XFreeKeyBindings */
Xlibint.h:740:    FreeFuncType context_db;	/* _XFreeContextDB */
Xlibint.h:744:    FreeFuncType im_filters;	/* _XFreeIMFilters */
Xlibint.h:746:} _XFreeFuncRec;
Xlibint.h:891:extern void _XFreeTemp(
Xlibint.h:1010:extern int _XFreeExtData(
Xlibint.h:1341:extern void _XFreeEventCookies(
Xutil.h:180:    /* The following is an XFree86 extension, introduced in November 2000 */

#### XFreeColormap ####
FreeCmap.c:35:XFreeColormap(
Xlib.h:2542:extern int XFreeColormap(

#### XFreeColors ####
FreeCols.c:33:XFreeColors(
Xlib.h:2547:extern int XFreeColors(

#### XFreeCursor ####
FreeCurs.c:33:XFreeCursor(
Xlib.h:2555:extern int XFreeCursor(

#### XFreeEventData ####
FreeEventData.c:31:XFreeEventData(Display *dpy, XGenericEventCookie *event)
Xlib.h:4026:extern void XFreeEventData(

#### XFreeExtensionList ####
ListExt.c:102:XFreeExtensionList (char **list)
Xlib.h:2560:extern int XFreeExtensionList(

#### XFreeFont ####
Font.c:151:XFreeFont(
Font.c:705:	XFreeFont(dpy, fs);
FontInfo.c:168:	flist[i] = NULL; /* required in case XFreeFontNames is called */
FontInfo.c:200:XFreeFontInfo (
FontNames.c:91:	*ch = 1; /* make sure it is non-zero for XFreeFontNames */
FontNames.c:123:XFreeFontNames(char **list)
FSWrap.c:257:XFreeFontSet(
GetFPath.c:92:XFreeFontPath (char **list)
omGeneric.c:307:	    XFreeFontNames(fn_list);
omGeneric.c:495:    XFreeFontNames(list);
omGeneric.c:645:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:650:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:655:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:1329:		XFreeFont(dpy,font_data->font);		/* ADD 1996.01.7 */
omGeneric.c:1331:		XFreeFontInfo(NULL, font_data->font, 1);/* Add 1996.01.23 */
omGeneric.c:1366:		    XFreeFont(dpy,font_set->font);
omGeneric.c:1368:		    XFreeFontInfo(NULL, font_set->font, 1);
omGeneric.c:1373:		    XFreeFontInfo(NULL, font_set->info, 1);
omXChar.c:294:    XFreeFontInfo(NULL, font_set->info, 1);
XDefaultOMIF.c:296:	XFreeFontNames(list);
XDefaultOMIF.c:302:	XFreeFont(dpy, fs);
XDefaultOMIF.c:355:			XFreeFontInfo(fn_list, fs_list, list_num);
XDefaultOMIF.c:531:		XFreeFont(dpy, font);
XDefaultOMIF.c:533:		XFreeFontInfo(NULL, font, 1);
Xlib.h:2564:extern int XFreeFont(
Xlib.h:2569:extern int XFreeFontInfo(
Xlib.h:2575:extern int XFreeFontNames(
Xlib.h:2579:extern int XFreeFontPath(
Xlib.h:3639:extern void XFreeFontSet(

#### XFreeFontInfo ####
FontInfo.c:200:XFreeFontInfo (
omGeneric.c:645:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:650:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:655:            XFreeFontInfo(fn_list, fs_list, list_num);
omGeneric.c:1331:		XFreeFontInfo(NULL, font_data->font, 1);/* Add 1996.01.23 */
omGeneric.c:1368:		    XFreeFontInfo(NULL, font_set->font, 1);
omGeneric.c:1373:		    XFreeFontInfo(NULL, font_set->info, 1);
omXChar.c:294:    XFreeFontInfo(NULL, font_set->info, 1);
XDefaultOMIF.c:355:			XFreeFontInfo(fn_list, fs_list, list_num);
XDefaultOMIF.c:533:		XFreeFontInfo(NULL, font, 1);
Xlib.h:2569:extern int XFreeFontInfo(

#### XFreeFontNames ####
FontInfo.c:168:	flist[i] = NULL; /* required in case XFreeFontNames is called */
FontNames.c:91:	*ch = 1; /* make sure it is non-zero for XFreeFontNames */
FontNames.c:123:XFreeFontNames(char **list)
omGeneric.c:307:	    XFreeFontNames(fn_list);
omGeneric.c:495:    XFreeFontNames(list);
XDefaultOMIF.c:296:	XFreeFontNames(list);
Xlib.h:2575:extern int XFreeFontNames(

#### XFreeFontPath ####
GetFPath.c:92:XFreeFontPath (char **list)
Xlib.h:2579:extern int XFreeFontPath(

#### XFreeFontSet ####
FSWrap.c:257:XFreeFontSet(
Xlib.h:3639:extern void XFreeFontSet(

#### XFreeGC ####
ClDisplay.c:60:		    XFreeGC (dpy, sp->default_gc);
CrBFData.c:77:        XFreeGC(display, gc);
CrPFBData.c:86:        XFreeGC(display, gc);
FreeGC.c:33:XFreeGC (
Xlib.h:2583:extern int XFreeGC(

#### XFreeModifiermap ####
imThaiFlt.c:1276:            XFreeModifiermap(map);
imThaiFlt.c:1280:    XFreeModifiermap(map);
KeyBind.c:218:	XFreeModifiermap(dpy->modifiermap);
KeyBind.c:220:    dpy->free_funcs->modifiermap = XFreeModifiermap;
KeyBind.c:245:	    XFreeModifiermap(event->display->modifiermap);
ModMap.c:115:XFreeModifiermap(XModifierKeymap *map)
ModMap.c:160:    (void) XFreeModifiermap(map);
Xlib.h:2588:extern int XFreeModifiermap(
Xlibint.h:738:    FreeModmapType modifiermap;	/* XFreeModifiermap */

#### XFreePixmap ####
CrBFData.c:59:        XFreePixmap(display, pix);
CrPFBData.c:68:        XFreePixmap(display, pix);
FreePix.c:33:XFreePixmap(
Xlib.h:2592:extern int XFreePixmap(

#### XFreeStringList ####
omGeneric.c:1171:    XFreeStringList(name_list);
omGeneric.c:1176:    XFreeStringList(name_list);
omGeneric.c:1428:    XFreeStringList(oc->core.font_info.font_name_list);
omGeneric.c:1430:    XFreeStringList(oc->core.missing_list.charset_list);
omGeneric.c:1689:	XFreeStringList(om->core.required_charset.charset_list);
TextToStr.c:110:void XFreeStringList (char **list)
XDefaultOMIF.c:448:    XFreeStringList(name_list);
XDefaultOMIF.c:452:    XFreeStringList(name_list);
XDefaultOMIF.c:526:    XFreeStringList(oc->core.font_info.font_name_list);
XDefaultOMIF.c:539:    XFreeStringList(oc->core.missing_list.charset_list);
XDefaultOMIF.c:936:	XFreeStringList(om->core.required_charset.charset_list);
Xlib.h:1923:extern void XFreeStringList(

#### XGContextFromGC ####
CrGC.c:342:GContext XGContextFromGC(GC gc)
Xlib.h:1591:extern GContext XGContextFromGC(

#### XGeometry ####
Geom.c:43:XGeometry (
Xlib.h:2597:extern int XGeometry(

#### XGetAtomName ####
GetAtomNm.c:34:char *_XGetAtomName(
GetAtomNm.c:59:char *XGetAtomName(
GetAtomNm.c:67:    if ((name = _XGetAtomName(dpy, atom))) {
GetAtomNm.c:97:} _XGetAtomNameState;
GetAtomNm.c:100:Bool _XGetAtomNameHandler(
GetAtomNm.c:107:    register _XGetAtomNameState *state;
GetAtomNm.c:111:    state = (_XGetAtomNameState *)data;
GetAtomNm.c:142:XGetAtomNames (
GetAtomNm.c:149:    _XGetAtomNameState async_state;
GetAtomNm.c:162:    async.handler = _XGetAtomNameHandler;
GetAtomNm.c:166:	if (!(names_return[i] = _XGetAtomName(dpy, atoms[i]))) {
imDefIm.c:302:    if( !(str = XGetAtomName( display, selection )) )
omGeneric.c:191:	return XGetAtomName(dpy, fp);
XDefaultOMIF.c:152:	return XGetAtomName(dpy, fp);
XKB.c:36:XkbGetAtomNameFunc      _XkbGetAtomNameFunc = XGetAtomName;
XKB.c:773:    _XkbGetAtomNameFunc = (getName ? getName : XGetAtomName);
Xlib.h:1501:extern char *XGetAtomName(
Xlib.h:1505:extern Status XGetAtomNames(

#### XGetAtomNames ####
GetAtomNm.c:142:XGetAtomNames (
Xlib.h:1505:extern Status XGetAtomNames(

#### XGetClassHint ####
GetHints.c:299:XGetClassHint(
Xutil.h:424:extern Status XGetClassHint(

#### XGetCommand ####
GetHints.c:229:Status XGetCommand (
Xlib.h:1905:extern Status XGetCommand(

#### XGetDefault ####
GetDflt.c:174:XGetDefault(
OpenDis.c:889:	/* if RM database was allocated by XGetDefault() free it */
Xrm.c:352:    /* destroy database if set up implicitly by XGetDefault() */
Xlib.h:1511:extern char *XGetDefault(
Xlibint.h:430:#define XlibDisplayDfltRMDB     (1L << 7) /* mark if RM db from XGetDefault */

#### XGetErrorDatabaseText ####
ErrDes.c:113:        (void) XGetErrorDatabaseText(dpy, "XProtoError", buf,
ErrDes.c:130:	(void) XGetErrorDatabaseText(dpy, "XProtoError", buf, "", buffer, nbytes);
ErrDes.c:139:XGetErrorDatabaseText(
XlibInt.c:3515:    XGetErrorDatabaseText(dpy, mtype, "XError", "X Error", mesg, BUFSIZ);
XlibInt.c:3517:    XGetErrorDatabaseText(dpy, mtype, "MajorCode", "Request Major code %d",
XlibInt.c:3522:	XGetErrorDatabaseText(dpy, "XRequest", number, "", buffer, BUFSIZ);
XlibInt.c:3536:	XGetErrorDatabaseText(dpy, mtype, "MinorCode", "Request Minor code %d",
XlibInt.c:3542:	    XGetErrorDatabaseText(dpy, "XRequest", mesg, "", buffer, BUFSIZ);
XlibInt.c:3568:	XGetErrorDatabaseText(dpy, mtype, buffer, "", mesg, BUFSIZ);
XlibInt.c:3590:	    XGetErrorDatabaseText(dpy, mtype, "Value", "Value 0x%x",
XlibInt.c:3593:	    XGetErrorDatabaseText(dpy, mtype, "AtomID", "AtomID 0x%x",
XlibInt.c:3596:	    XGetErrorDatabaseText(dpy, mtype, "ResourceID", "ResourceID 0x%x",
XlibInt.c:3602:    XGetErrorDatabaseText(dpy, mtype, "ErrorSerial", "Error Serial #%d",
XlibInt.c:3606:    XGetErrorDatabaseText(dpy, mtype, "CurrentSerial", "Current Serial #%d",
Xlib.h:2613:extern int XGetErrorDatabaseText(

#### XGetErrorText ####
ErrDes.c:100:XGetErrorText(
XlibInt.c:3514:    XGetErrorText(dpy, event->error_code, buffer, BUFSIZ);
Xlib.h:2622:extern int XGetErrorText(

#### XGetEventData ####
GetEventData.c:31:XGetEventData(Display *dpy, XGenericEventCookie *event)
XlibInt.c:2805:   _XFetchEventCookie (called from XGetEventData) removes a cookie from the
Xlib.h:4021:extern Bool XGetEventData(

#### XGetFontPath ####
GetFPath.c:33:char **XGetFontPath(
Xlib.h:1669:extern char **XGetFontPath(

#### XGetFontProperty ####
GetFProp.c:33:XGetFontProperty(
omGeneric.c:190:    if (XGetFontProperty(fs, XA_FONT, &fp))
XDefaultOMIF.c:151:    if (XGetFontProperty(fs, XA_FONT, &fp))
Xlib.h:2629:extern Bool XGetFontProperty(

#### XGetGCValues ####
GetGCVals.c:46:Status XGetGCValues (
omImText.c:49:    XGetGCValues(dpy, gc, GET_VALUE_MASK, &values);
Xlib.h:2635:extern Status XGetGCValues(

#### XGetGeometry ####
GetGeom.c:32:Status XGetGeometry (
imRm.c:607:    if(XGetGeometry(im->core.display, (Drawable)ic->core.focus_window,
SetStCmap.c:75:	/* already caught the XGetGeometry error in _XScreenOfWindow */
XlibInt.c:3960:    if (XGetGeometry (dpy, w, &root, &x, &y, &width, &height,
Xlib.h:2642:extern Status XGetGeometry(

#### XGetICValues ####
ICWrap.c:281:XGetICValues(XIC ic, ...)
Xlib.h:3907:extern char *XGetICValues(

#### XGetIMValues ####
ICWrap.c:195:XGetIMValues(XIM im, ...)
Xlib.h:3859:extern char *XGetIMValues(

#### XGetIconName ####
FetchName.c:66:Status XGetIconName (
Xlib.h:2654:extern Status XGetIconName(

#### XGetIconSizes ####
GetHints.c:169: * XGetIconSizes reads the property
GetHints.c:173:Status XGetIconSizes (
Xutil.h:430:extern Status XGetIconSizes(

#### XGetImage ####
GetImage.c:47:XImage *XGetImage (
GetImage.c:136:	temp_image = XGetImage(dpy, d, x, y, width, height,
WrBitF.c:115:  image = XGetImage(display, bitmap, 0,0,width, height, 1L, XYPixmap);
Xlib.h:1457:extern XImage *XGetImage(

#### XGetInputFocus ####
GetIFocus.c:33:XGetInputFocus(
Xlib.h:2660:extern int XGetInputFocus(

#### XGetKeyboardControl ####
GetKCnt.c:33:XGetKeyboardControl (
Xlib.h:456:/* Data structure for XGetKeyboardControl */
Xlib.h:2666:extern int XGetKeyboardControl(

#### XGetKeyboardMapping ####
GetPntMap.c:87:XGetKeyboardMapping (Display *dpy,
KeyBind.c:268:	keysyms = XGetKeyboardMapping (dpy, (KeyCode) dpy->min_keycode,
Xlib.h:1701:extern KeySym *XGetKeyboardMapping(

#### XGetModifierMapping ####
imThaiFlt.c:1270:    map = XGetModifierMapping (d);
KeyBind.c:214:    if (! (map = XGetModifierMapping(dpy)))
ModMap.c:34:XGetModifierMapping(register Display *dpy)
Xlib.h:1424:extern XModifierKeymap	*XGetModifierMapping(

#### XGetMotionEvents ####
GetMoEv.c:33:XTimeCoord *XGetMotionEvents(
Xlib.h:467:/* Data structure for XGetMotionEvents.  */
Xlib.h:1406:extern XTimeCoord *XGetMotionEvents(

#### XGetNormalHints ####
GetHints.c:159:XGetNormalHints (
Xutil.h:437:extern Status XGetNormalHints(

#### XGetOCValues ####
OCWrap.c:117:XGetOCValues(XOC oc, ...)
Xlcint.h:430:typedef char* (*XGetOCValuesProc)(
Xlcint.h:544:    XGetOCValuesProc 		get_values;
Xlib.h:3626:extern char *XGetOCValues(

#### XGetOMValues ####
OMWrap.c:94:XGetOMValues(XOM om, ...)
Xlcint.h:380:typedef char* (*XGetOMValuesProc)(
Xlcint.h:395:    XGetOMValuesProc	get_values;
Xlib.h:3595:extern char *XGetOMValues(

#### XGetPixel ####
ImUtil.c:36:static unsigned long _XGetPixel(XImage *, int, int);
ImUtil.c:37:static unsigned long _XGetPixel1(XImage *, int, int);
ImUtil.c:38:static unsigned long _XGetPixel8(XImage *, int, int);
ImUtil.c:39:static unsigned long _XGetPixel16(XImage *, int, int);
ImUtil.c:40:static unsigned long _XGetPixel32(XImage *, int, int);
ImUtil.c:98: *	_XGetPixel	Reads a pixel from an image data structure
ImUtil.c:99: *	_XGetPixel32	Reads a pixel from a 32-bit Z image data structure
ImUtil.c:100: *	_XGetPixel16	Reads a pixel from a 16-bit Z image data structure
ImUtil.c:101: *	_XGetPixel8	Reads a pixel from an 8-bit Z image data structure
ImUtil.c:102: *	_XGetPixel1	Reads a pixel from an 1-bit image data structure
ImUtil.c:277:	    image->f.get_pixel = _XGetPixel8;
ImUtil.c:281:	    image->f.get_pixel = _XGetPixel1;
ImUtil.c:285:	    image->f.get_pixel = _XGetPixel32;
ImUtil.c:289:	    image->f.get_pixel = _XGetPixel16;
ImUtil.c:292:	    image->f.get_pixel = _XGetPixel;
ImUtil.c:470:static unsigned long _XGetPixel (
ImUtil.c:533:static unsigned long _XGetPixel32 (
ImUtil.c:561:	    return XGetPixel(ximage, x, y);
ImUtil.c:565:static unsigned long _XGetPixel16 (
ImUtil.c:585:	    return XGetPixel(ximage, x, y);
ImUtil.c:589:static unsigned long _XGetPixel8 (
ImUtil.c:604:	    return XGetPixel(ximage, x, y);
ImUtil.c:608:static unsigned long _XGetPixel1 (
ImUtil.c:628:	    return XGetPixel(ximage, x, y);
ImUtil.c:888:		pixel = XGetPixel(ximage, col, row);
ImUtil.c:948:		pixel = XGetPixel(srcimg, col, row);
ImUtil.c:1009:		    register unsigned long pixel = XGetPixel(ximage, x, y);
Macros.c:259:#undef XGetPixel
Macros.c:260:unsigned long XGetPixel(
PutImage.c:1000:		    XPutPixel(&img, i, j, XGetPixel(image, req_xoffset + i,
WrBitF.c:67:      if (XGetPixel(image, x, y))
Xutil.h:198:extern unsigned long XGetPixel(
Xutil.h:219:#define XGetPixel(ximage, x, y) \

#### XGetPointerControl ####
GetPCnt.c:33:XGetPointerControl(
Xlib.h:2671:extern int XGetPointerControl(

#### XGetPointerMapping ####
GetPntMap.c:39:int XGetPointerMapping (
Xlib.h:2678:extern int XGetPointerMapping(

#### XGetRGBColormaps ####
GetRGBCMap.c:38:Status XGetRGBColormaps (
GetStCmap.c:74:    stat = XGetRGBColormaps (dpy, w, &stdcmaps, &nstdcmaps, property);
imRmAttr.c:958:	if (!(XGetRGBColormaps(ic->core.im->core.display,
imRmAttr.c:1009:	if (!(XGetRGBColormaps(ic->core.im->core.display,
imRm.c:2823:	if (!(XGetRGBColormaps(ic->core.im->core.display,
imRm.c:2845:	if (!(XGetRGBColormaps(ic->core.im->core.display,
Xutil.h:443:extern Status XGetRGBColormaps(

#### XGetScreenSaver ####
GetSSaver.c:33:XGetScreenSaver(
Xlib.h:2684:extern int XGetScreenSaver(

#### XGetSelectionOwner ####
GetSOwner.c:32:Window XGetSelectionOwner(
imDefIm.c:422:	if((im_window = XGetSelectionOwner(display, atoms[i])) == (Window)None)
imInsClbk.c:112:	if(XGetSelectionOwner (display, atoms[ii])) {
Xlib.h:1633:extern Window XGetSelectionOwner(

#### XGetSizeHints ####
GetHints.c:59:Status XGetSizeHints (
GetHints.c:155:	return (XGetSizeHints(dpy, w, zhints, XA_WM_ZOOM_HINTS));
GetHints.c:164:	return (XGetSizeHints(dpy, w, hints, XA_WM_NORMAL_HINTS));
Xutil.h:451:extern Status XGetSizeHints(

#### XGetStandardColormap ####
GetStCmap.c:64:Status XGetStandardColormap (
Xutil.h:458:extern Status XGetStandardColormap(

#### XGetSubImage ####
GetImage.c:122:XImage *XGetSubImage(
Xlib.h:1467:extern XImage *XGetSubImage(

#### XGetTextProperty ####
GetHints.c:239:    if (!XGetTextProperty (dpy, w, &tp, XA_WM_COMMAND)) return 0;
GetTxtProp.c:60:Status XGetTextProperty (
GetTxtProp.c:95:    return (XGetTextProperty (dpy, w, tp, XA_WM_NAME));
GetTxtProp.c:103:    return (XGetTextProperty (dpy, w, tp, XA_WM_ICON_NAME));
GetTxtProp.c:111:    return (XGetTextProperty (dpy, w, tp, XA_WM_CLIENT_MACHINE));
Xutil.h:465:extern Status XGetTextProperty(

#### XGetTransientForHint ####
GetHints.c:269:XGetTransientForHint(
Xlib.h:2692:extern Status XGetTransientForHint(

#### XGetVisualInfo ####
cmsCmap.c:143:	visualList = XGetVisualInfo(dpy, VisualScreenMask, &visualTemplate,
VisUtil.c:56:XVisualInfo *XGetVisualInfo(
Xutil.h:472:extern XVisualInfo *XGetVisualInfo(

#### XGetWMClientMachine ####
GetTxtProp.c:106:Status XGetWMClientMachine (
Xutil.h:479:extern Status XGetWMClientMachine(

#### XGetWMColormapWindows ####
GetWMCMapW.c:56:Status XGetWMColormapWindows (
Xlib.h:1911:extern Status XGetWMColormapWindows(

#### XGetWMHints ####
GetHints.c:106:XWMHints *XGetWMHints (
Xutil.h:485:extern XWMHints *XGetWMHints(

#### XGetWMIconName ####
GetTxtProp.c:98:Status XGetWMIconName (
Xutil.h:490:extern Status XGetWMIconName(

#### XGetWMName ####
GetTxtProp.c:90:Status XGetWMName (
Xutil.h:496:extern Status XGetWMName(

#### XGetWMNormalHints ####
GetNrmHint.c:120:Status XGetWMNormalHints (
Xutil.h:502:extern Status XGetWMNormalHints(

#### XGetWMProtocols ####
GetWMProto.c:56:Status XGetWMProtocols (
Xlib.h:1883:extern Status XGetWMProtocols(

#### XGetWMSizeHints ####
GetNrmHint.c:63:Status XGetWMSizeHints (
GetNrmHint.c:126:    return (XGetWMSizeHints (dpy, w, hints, supplied, XA_WM_NORMAL_HINTS));
Xutil.h:509:extern Status XGetWMSizeHints(

#### XGetWindowAttributes ####
cmsCmap.c:267:     * it may require the use of XGetWindowAttributes (a round trip request)
cmsCmap.c:437:	 * cmap, so use XGetWindowAttributes() to extract that
cmsCmap.c:453:	    if (XGetWindowAttributes(dpy, pRec->windowID, &windowAttr)) {
GetWAttrs.c:88:_XGetWindowAttributes(
GetWAttrs.c:141:XGetWindowAttributes(
GetWAttrs.c:149:    ret = _XGetWindowAttributes(dpy, w, attr);
imDefLkup.c:469:    if (!XGetWindowAttributes(im->core.display, ic->core.focus_window, &atr))
imInsClbk.c:197:	XGetWindowAttributes( display, root, &attr );
imRm.c:638:    if(XGetWindowAttributes(im->core.display, ic->core.client_window,
imTrX.c:184:	XGetWindowAttributes(im->core.display, spec->lib_connect_wid, &atr);
Xlib.h:2713:extern Status XGetWindowAttributes(
Xlibint.h:1328:Status _XGetWindowAttributes(

#### XGetWindowProperty ####
cmsProp.c:131:	xgwp_ret = XGetWindowProperty (pDpy, w, property, 0, len, False,
FetchName.c:46:    if (XGetWindowProperty(dpy, w, XA_WM_NAME, 0L, (long)BUFSIZ, False, XA_STRING,
FetchName.c:54:	/* The data returned by XGetWindowProperty is guarranteed to
FetchName.c:76:    if (XGetWindowProperty(dpy, w, XA_WM_ICON_NAME, 0L, (long)BUFSIZ, False,
FetchName.c:85:	/* The data returned by XGetWindowProperty is guarranteed to
GetHints.c:70:	if (XGetWindowProperty(dpy, w, property, 0L,
GetHints.c:116:	if (XGetWindowProperty(dpy, w, XA_WM_HINTS,
GetHints.c:188:	if (XGetWindowProperty(dpy, w, XA_WM_ICON_SIZE, 0L, 60L,
GetHints.c:279:    if (XGetWindowProperty(dpy, w, XA_WM_TRANSIENT_FOR, 0L, 1L, False,
GetHints.c:311:    if (XGetWindowProperty(dpy, w, XA_WM_CLASS, 0L, (long)BUFSIZ, False,
GetNrmHint.c:76:    if (XGetWindowProperty (dpy, w, property, 0L,
GetProp.c:34:XGetWindowProperty(
GetRGBCMap.c:57:    if (XGetWindowProperty (dpy, w, property, 0L, 1000000L, False,
GetTxtProp.c:71:    if (XGetWindowProperty (display, window, property, 0L, 1000000L, False,
GetWMCMapW.c:72:    if (XGetWindowProperty (dpy, w, prop,
GetWMProto.c:72:    if (XGetWindowProperty (dpy, w, prop,
imDefIm.c:264:    if( XGetWindowProperty( display, window, target, 0L, 1000000L,
imDefIm.c:408:    if(XGetWindowProperty(display, RootWindow(display, 0),
imInsClbk.c:99:    if( XGetWindowProperty( display, RootWindow(display, 0), ims, 0L, 1000000L,
imTrX.c:366:	return_code = XGetWindowProperty(im->core.display,
imTrX.c:380:		if (XGetWindowProperty(im->core.display,
imTrX.c:401:		if (XGetWindowProperty(im->core.display,
imTrX.c:419:	return_code = XGetWindowProperty(im->core.display,
ScrResStr.c:44:	XGetWindowProperty(screen->display, screen->root, prop_name,
StBytes.c:68:    if (XGetWindowProperty(dpy, RootWindow(dpy, 0), n_to_atom[buffer],
Xatomtype.h:53: * This files defines crock C structures for calling XGetWindowProperty and
Xlib.h:2698:extern int XGetWindowProperty(

#### XGetZoomHints ####
GetHints.c:150:XGetZoomHints (
Xutil.h:517:extern Status XGetZoomHints(

#### XGrabButton ####
GrButton.c:33:XGrabButton(
Xlib.h:2719:extern int XGrabButton(

#### XGrabKey ####
GrKeybd.c:31:int XGrabKeyboard (
GrKey.c:33:XGrabKey(
Xlib.h:2732:extern int XGrabKey(
Xlib.h:2742:extern int XGrabKeyboard(

#### XGrabKeyboard ####
GrKeybd.c:31:int XGrabKeyboard (
Xlib.h:2742:extern int XGrabKeyboard(

#### XGrabPointer ####
GrPointer.c:32:int XGrabPointer(
Xlib.h:2751:extern int XGrabPointer(

#### XGrabServer ####
GrServer.c:33:XGrabServer (register Display *dpy)
Xlib.h:2763:extern int XGrabServer(

#### XHeightMMOfScreen ####
Macros.c:220:int XHeightMMOfScreen(Screen *s) { return (HeightMMOfScreen(s)); }
Xlib.h:2767:extern int XHeightMMOfScreen(

#### XHeightOfScreen ####
Macros.c:216:int XHeightOfScreen(Screen *s) { return (HeightOfScreen(s)); }
Xlib.h:2771:extern int XHeightOfScreen(

#### XIMOfIC ####
ICWrap.c:366:XIMOfIC(XIC ic)
imThaiFlt.c:568:            im = (Xim) XIMOfIC((XIC)ic);
imThaiFlt.c:1194:    im = (Xim) XIMOfIC((XIC)ic);
Xlib.h:3911:extern XIM XIMOfIC(

#### XIconifyWindow ####
Iconify.c:65:Status XIconifyWindow (
Xlib.h:1895:extern Status XIconifyWindow(

#### XIfEvent ####
IfEvent.c:38:XIfEvent (
imDefIm.c:257:	XIfEvent(display, &event, _CheckSNEvent, (XPointer)&window);
imTrX.c:197:	XIfEvent(im->core.display, &event, _CheckConnect, (XPointer)im);
imTrX.c:476:	XIfEvent(im->core.display, ev, _CheckCMEvent, (XPointer)im);
Xlib.h:2775:extern int XIfEvent(

#### XImageByteOrder ####
Macros.c:139:int XImageByteOrder(Display *dpy) { return (ImageByteOrder(dpy)); }
Xlib.h:2786:extern int XImageByteOrder(

#### XInitExtension ####
Font.c:337:	XExtCodes *codes = XInitExtension(dpy, XF86BIGFONTNAME);
InitExt.c:41:XExtCodes *XInitExtension (
XKBUse.c:739:    if ((codes = XInitExtension(dpy, XkbName)) == NULL) {
Xlib.h:1749:extern XExtCodes *XInitExtension(

#### XInitImage ####
ImUtil.c:271:void _XInitImageFuncPtrs (
ImUtil.c:383:	_XInitImageFuncPtrs (image);
ImUtil.c:388:Status XInitImage (XImage *image)
ImUtil.c:422:	_XInitImageFuncPtrs (image);
ImUtil.c:560:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:584:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:603:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:627:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:747:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:772:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:787:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:816:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:868:	_XInitImageFuncPtrs (subimage);
PutImage.c:997:	    _XInitImageFuncPtrs(&img);
ImUtil.h:28:_XInitImageFuncPtrs(
Xlib.h:1454:extern Status XInitImage(

#### XInitThreads ####
locking.c:572:Status XInitThreads(void)
locking.c:583:	"XInitThreads called, but no libthread in the calling program!\n" );
locking.c:621:Status XInitThreads(void)
XlibInt.c:81:/* these pointers get initialized by XInitThreads */
XlibInt.c:900:/* NOTE: only called if !XTHREADS, or when XInitThreads wasn't called. */
Xlib.h:1735:extern Status XInitThreads(

#### XInsertModifiermapEntry ####
ModMap.c:125:XInsertModifiermapEntry(XModifierKeymap *map,
Xlib.h:1428:extern XModifierKeymap	*XInsertModifiermapEntry(

#### XInstallColormap ####
InsCmap.c:33:XInstallColormap(
Xlib.h:2790:extern int XInstallColormap(

#### XInternAtom ####
GetWMCMapW.c:68:    prop =  XInternAtom(dpy, "WM_COLORMAP_WINDOWS", False);
GetWMProto.c:68:    prop =  XInternAtom(dpy, "WM_PROTOCOLS", False);
Iconify.c:72:    prop = XInternAtom (dpy, "WM_CHANGE_STATE", False);
imDefIm.c:337:    if((locales = XInternAtom(display, XIM_LOCALES, True)) == (Atom)None)
imDefIm.c:360:    if((transport = XInternAtom(display, XIM_TRANSPORT, True)) == (Atom)None)
imDefIm.c:405:    if((imserver = XInternAtom(display, XIM_SERVERS, True)) == (Atom)None)
imInsClbk.c:94:    if( (ims = XInternAtom( display, XIM_SERVERS, True )) == None  ||
imTrX.c:286:	atom = XInternAtom(im->core.display, _NewAtom(atomName), False);
imTrX.c:502:    spec->improtocolid = XInternAtom(im->core.display, _XIM_PROTOCOL, False);
imTrX.c:503:    spec->imconnectid  = XInternAtom(im->core.display, _XIM_XCONNECT, False);
imTrX.c:504:    spec->immoredataid = XInternAtom(im->core.display, _XIM_MOREDATA, False);
IntAtom.c:57:Atom _XInternAtom(
IntAtom.c:162:XInternAtom (
IntAtom.c:175:    if ((atom = _XInternAtom(dpy, name, onlyIfExists, &sig, &idx, &n))) {
IntAtom.c:240:XInternAtoms (
IntAtom.c:265:	if (!(atoms_return[i] = _XInternAtom(dpy, names[i], onlyIfExists,
lcPrTxt.c:142:    else if (encoding == XInternAtom(dpy, "UTF8_STRING", False))
lcPrTxt.c:144:    else if (encoding == XInternAtom(dpy, "COMPOUND_TEXT", False))
lcPrTxt.c:146:    else if (encoding == XInternAtom(dpy, XLC_PUBLIC(lcd, encoding_name), False))
lcTxtPr.c:102:	    encoding = XInternAtom(dpy, "UTF8_STRING", False);
lcTxtPr.c:106:	    encoding = XInternAtom(dpy, "COMPOUND_TEXT", False);
lcTxtPr.c:110:	    encoding = XInternAtom(dpy, XLC_PUBLIC(lcd, encoding_name), False);
lcTxtPr.c:176:	    encoding = XInternAtom(dpy, "COMPOUND_TEXT", False);
LRGB.c:467:    Atom  CorrectAtom = XInternAtom (dpy, XDCCC_CORRECT_ATOM_NAME, True);
LRGB.c:468:    Atom  MatrixAtom  = XInternAtom (dpy, XDCCC_MATRIX_ATOM_NAME, True);
ScrResStr.c:42:    prop_name = XInternAtom(screen->display, "SCREEN_RESOURCES", True);
SetWMCMapW.c:68:    prop = XInternAtom (dpy, "WM_COLORMAP_WINDOWS", False);
SetWMProto.c:68:    prop = XInternAtom (dpy, "WM_PROTOCOLS", False);
WMProps.c:143:        XChangeProperty (dpy, w, XInternAtom(dpy, "WM_LOCALE_NAME", False),
XKB.c:35:XkbInternAtomFunc       _XkbInternAtomFunc  = XInternAtom;
XKB.c:772:    _XkbInternAtomFunc = (getAtom ? getAtom : XInternAtom);
XKBUse.c:692:                        xkbi->composeLED = XInternAtom(dpy, str, False);
XKBUse.c:704:            xkbi->composeLED = XInternAtom(dpy, "Compose", False);
Xlib.h:1537:extern Atom XInternAtom(
Xlib.h:1542:extern Status XInternAtoms(
Xlibint.h:185:	struct _XDisplayAtoms *atoms; /* for XInternAtom */

#### XInternAtoms ####
IntAtom.c:240:XInternAtoms (
Xlib.h:1542:extern Status XInternAtoms(

#### XInternalConnectionNumbers ####
XlibInt.c:2457: * XInternalConnectionNumbers or, more typically, by registering
XlibInt.c:2548:/* XInternalConnectionNumbers
XlibInt.c:2558:XInternalConnectionNumbers(
XlibInt.c:2569:    fprintf(stderr, "XInternalConnectionNumbers: Got called.\n");
Xlib.h:3980:extern Status XInternalConnectionNumbers(

#### XIntersectRegion ####
Region.c:346:			 else XIntersectRegion(a,b,c)
Region.c:486:XIntersectRegion(
Xutil.h:523:extern int XIntersectRegion(

#### XKeycodeToKeysym ####
KeyBind.c:57:#define	XKeycodeToKeysym	_XKeycodeToKeysym
KeyBind.c:118:XKeycodeToKeysym(Display *dpy,
XKBBind.c:96:XKeycodeToKeysym(Display *dpy,
XKBBind.c:107:        return _XKeycodeToKeysym(dpy, kc, col);
XKBBind.c:225:    return XKeycodeToKeysym(dpy, event->keycode, col);
XKBlibint.h:133:extern KeySym _XKeycodeToKeysym(
Xlib.h:1688:extern KeySym XKeycodeToKeysym(

#### XKeysymToKeycode ####
imThaiFlt.c:1266:    KeyCode numlock_keycode = XKeysymToKeycode (d, XK_Num_Lock);
KeyBind.c:58:#define	XKeysymToKeycode	_XKeysymToKeycode
KeyBind.c:132:XKeysymToKeycode(
XKBBind.c:153:XKeysymToKeycode(Display *dpy, KeySym ks)
XKBBind.c:158:        return _XKeysymToKeycode(dpy, ks);
XKBlibint.h:143:extern KeyCode _XKeysymToKeycode(
Xlib.h:2795:extern KeyCode XKeysymToKeycode(

#### XKeysymToString ####
KeysymStr.c:71:char *XKeysymToString(KeySym ks)
Xlib.h:1519:extern char *XKeysymToString(

#### XKillClient ####
KillCl.c:33:XKillClient(
Xlib.h:2800:extern int XKillClient(

#### XLastKnownRequestProcessed ####
Macros.c:164:unsigned long XLastKnownRequestProcessed(Display *dpy)
Xlib.h:1810:extern unsigned long XLastKnownRequestProcessed(

#### XListDepths ####
Depths.c:34: * XListDepths - return info from connection setup
Depths.c:36:int *XListDepths (
Xlib.h:1867:extern int *XListDepths(

#### XListExtensions ####
ListExt.c:33:char **XListExtensions(
Xlib.h:1673:extern char **XListExtensions(

#### XListFonts ####
FontInfo.c:42:char **XListFontsWithInfo(
FontInfo.c:152:	    nbytes++; /* make first string 1 byte longer, to match XListFonts */
FontInfo.c:159:	    *flist[0] = 0; /* zero to distinguish from XListFonts */
FontNames.c:35:XListFonts(
omGeneric.c:302:	    fn_list = XListFontsWithInfo(dpy, font_set->font_name, 1, &fn_num,
omGeneric.c:489:    list = XListFonts(oc->core.om->core.display, pattern, 1, &count);
omGeneric.c:638:	if ((fn_list = XListFontsWithInfo(dpy, pattern,
omGeneric.c:774:    /* This may mot be needed anymore as XListFonts() takes care of this */
XDefaultOMIF.c:292:    list = XListFonts(dpy, pattern, 1, &count);
XDefaultOMIF.c:349:		if ((fn_list = XListFontsWithInfo(dpy, font_name,
Xlib.h:1656:extern char **XListFonts(
Xlib.h:1662:extern char **XListFontsWithInfo(

#### XListFontsWithInfo ####
FontInfo.c:42:char **XListFontsWithInfo(
omGeneric.c:302:	    fn_list = XListFontsWithInfo(dpy, font_set->font_name, 1, &fn_num,
omGeneric.c:638:	if ((fn_list = XListFontsWithInfo(dpy, pattern,
XDefaultOMIF.c:349:		if ((fn_list = XListFontsWithInfo(dpy, font_name,
Xlib.h:1662:extern char **XListFontsWithInfo(

#### XListHosts ####
LiHosts.c:71:XHostAddress *XListHosts (
Xlib.h:1682:extern XHostAddress *XListHosts(

#### XListInstalledColormaps ####
LiICmaps.c:32:Colormap *XListInstalledColormaps(
Xlib.h:1651:extern Colormap *XListInstalledColormaps(

#### XListPixmapFormats ####
PixFormats.c:34: * XListPixmapFormats - return info from connection setup
PixFormats.c:37:XPixmapFormatValues *XListPixmapFormats (
Xlib.h:1863:extern XPixmapFormatValues *XListPixmapFormats(

#### XListProperties ####
LiProps.c:32:Atom *XListProperties(
Xlib.h:1677:extern Atom *XListProperties(

#### XLoadFont ####
Cursor.c:46:	    dpy->cursor_font = XLoadFont (dpy, CURSORFONT);
LoadFont.c:33:XLoadFont (
Xlib.h:1581:extern Font XLoadFont(

#### XLoadQueryFont ####
Font.c:91:XFontStruct *XLoadQueryFont(
Font.c:684:    fs = XLoadQueryFont(dpy, buf);
omGeneric.c:210:	    fd->font = XLoadQueryFont(dpy, fd->xlfd_name);
omGeneric.c:233:       font_set->font = XLoadQueryFont(dpy, font_set->font_name);
omXChar.c:288:    font_set->font = XLoadQueryFont(oc->core.om->core.display,
XDefaultOMIF.c:197:	font_set->font = XLoadQueryFont(dpy, font_set->font_name);
XDefaultOMIF.c:298:	fs = XLoadQueryFont(dpy, pattern);
Xlib.h:1395:extern XFontStruct *XLoadQueryFont(

#### XLocaleOfFontSet ####
FSWrap.c:225:XLocaleOfFontSet(XFontSet font_set)
Xlib.h:3654:extern char *XLocaleOfFontSet(

#### XLocaleOfIM ####
IMWrap.c:155:XLocaleOfIM(XIM im)
Xlib.h:3871:extern char *XLocaleOfIM(

#### XLocaleOfOM ####
OMWrap.c:126:XLocaleOfOM(XOM om)
Xlib.h:3604:extern char *XLocaleOfOM(

#### XLockDisplay ####
LockDis.c:43:XLockDisplay(
LockDis.c:52:     * XLockDisplay returns, in case they have any side effects the
LockDis.c:53:     * caller of XLockDisplay was trying to protect against.
LockDis.c:54:     * XLockDisplay puts itself at the head of the event waiters queue
locking.c:153:static void _XLockDisplayWarn(
locking.c:451:static void _XLockDisplay(
locking.c:457:    _XLockDisplayWarn(dpy, file, line);
locking.c:478:    _XLockDisplayWarn(dpy, file, line);
locking.c:502:	/* signal other threads that might be waiting in XLockDisplay */
locking.c:547:    xcondition_set_name(dpy->lock->cv, "XLockDisplay");
locking.c:550:    dpy->lock_fns->lock_display = _XLockDisplay;
locking.c:561:    dpy->lock->lock_wait = NULL; /* filled in by XLockDisplay() */
XlibInt.c:1137:	 * or XLockDisplay
XlibInt.c:1142:	    /* some thread is in XProcessInternalConnection or XLockDisplay
XlibInt.c:1367:	 * or XLockDisplay
XlibInt.c:1372:	    /* some thread is in XProcessInternalConnection or XLockDisplay
locking.h:64:	/* for XLockDisplay */
locking.h:65:	int locking_level;	/* how many times into XLockDisplay we are */
locking.h:66:	xthread_t locking_thread; /* thread that did XLockDisplay */
locking.h:67:	xcondition_t cv;	/* wait if another thread has XLockDisplay */
Xlib.h:1739:extern void XLockDisplay(

#### XLookupColor ####
LookupCol.c:36:XLookupColor (
Xcmsint.h:74:     *		XLookupColor()
Xlib.h:2805:extern Status XLookupColor(

#### XLookupKeysym ####
KeyBind.c:59:#define	XLookupKeysym		_XLookupKeysym
KeyBind.c:150:XLookupKeysym(
XKBBind.c:218:XLookupKeysym(register XKeyEvent * event, int col)
XKBBind.c:223:        return _XLookupKeysym(event, col);
XKBlibint.h:148:extern KeySym _XLookupKeysym(
Xlib.h:1697:extern KeySym XLookupKeysym(

#### XLookupString ####
imConv.c:47: * rather than just call _XLookupString (i.e. the pre-XKB XLookupString)
imConv.c:49: * _XLookupString doesn't grok.
imConv.c:54:#define	XLOOKUPSTRING XLookupString
imConv.c:148:    ret = XLookupString(event, (char *)buffer, nbytes, keysym, status);
imDefFlt.c:55:    XLookupString(ev, buf, BUFSIZE, &keysym, NULL);
imLcFlt.c:55:    XLookupString((XKeyEvent *)ev, buf, sizeof(buf), &keysym, NULL);
imLcFlt.c:99:	XLookupString((XKeyEvent *)ev, buf, sizeof(buf), &keysym, NULL);
KeyBind.c:61:#define	XLookupString		_XLookupString
KeyBind.c:876:XLookupString (
XDefaultIMIF.c:419:    length = XLookupString(ev, buffer, bytes, keysym, &NotSupportedYet);
XDefaultIMIF.c:445:    length = XLookupString(ev, mb_buf, wlen, keysym, &NotSupportedYet);
XKBBind.c:672:XLookupString(register XKeyEvent *event,
XKBBind.c:724:    /* that were used to compute the symbol here, but pre-XKB XLookupString */
XKBUse.c:714:                    "XKEYBOARD XLookupString: %slatin-1, %s lookup modifiers\n",
XKBUse.c:718:                    "XKEYBOARD XLookupString: %sconsume shift and lock, %scontrol fallback\n",
XKBlibint.h:178:extern  int _XLookupString(
Xlibint.h:172:	KeySym lock_meaning;	   /* for XLookupString */
Xlibint.h:183:	struct _XKeytrans *key_bindings; /* for XLookupString */
Xutil.h:230: * Compose sequence status structure, used in calling XLookupString.
Xutil.h:535:extern int XLookupString(

#### XLowerWindow ####
LowerWin.c:33:XLowerWindow(
Xlib.h:2813:extern int XLowerWindow(

#### XMapRaised ####
MapRaised.c:33:XMapRaised (
Xlib.h:2818:extern int XMapRaised(

#### XMapSubwindows ####
MapSubs.c:33:XMapSubwindows(
Xlib.h:2823:extern int XMapSubwindows(

#### XMapWindow ####
MapWindow.c:33:XMapWindow (
Xlib.h:2828:extern int XMapWindow(

#### XMaskEvent ####
MaskEvent.c:44:XMaskEvent (
Xlib.h:2833:extern int XMaskEvent(

#### XMatchVisualInfo ####
VisUtil.c:189:Status XMatchVisualInfo(
Xutil.h:543:extern Status XMatchVisualInfo(

#### XMaxCmapsOfScreen ####
Macros.c:228:int XMaxCmapsOfScreen(Screen *s) { return (MaxCmapsOfScreen(s)); }
Xlib.h:2839:extern int XMaxCmapsOfScreen(

#### XMaxRequestSize ####
Misc.c:32:long XMaxRequestSize(Display *dpy)
Xlib.h:1714:extern long XMaxRequestSize(

#### XMinCmapsOfScreen ####
Macros.c:226:int XMinCmapsOfScreen(Screen *s) { return (MinCmapsOfScreen(s)); }
Xlib.h:2843:extern int XMinCmapsOfScreen(

#### XMoveResizeWindow ####
ConfWind.c:33:XMoveResizeWindow(
Xlib.h:2847:extern int XMoveResizeWindow(

#### XMoveWindow ####
MoveWin.c:33:XMoveWindow (
Xlib.h:2856:extern int XMoveWindow(

#### XNewModifiermap ####
ModMap.c:97:XNewModifiermap(int keyspermodifier)
ModMap.c:149:    if ((newmap = XNewModifiermap(map->max_keypermod+1)) == NULL)
Xlib.h:1438:extern XModifierKeymap *XNewModifiermap(

#### XNextEvent ####
NextEvent.c:38:XNextEvent (
XlibInt.c:2807:   (called by XNextEvent).
XlibInt.c:2850: * next call to XNextEvent().
Xlib.h:2863:extern int XNextEvent(

#### XNextRequest ####
Macros.c:142:unsigned long XNextRequest(Display *dpy)
Macros.c:147:/* XNextRequest() differs from the rest of the functions here because it is
Macros.c:151: * but we can at least make XNextRequest() do the right thing.
Macros.c:153:unsigned long XNextRequest(Display *dpy)
Macros.c:157:    next_request = _XNextRequest(dpy);
Xlib.h:1807:extern unsigned long XNextRequest(

#### XNoOp ####
Macros.c:293:XNoOp (register Display *dpy)
Xlib.h:2868:extern int XNoOp(

#### XOMOfOC ####
OCWrap.c:85:XOMOfOC(XOC oc)
Xlib.h:3617:extern XOM XOMOfOC(

#### XOffsetRegion ####
Region.c:299:XOffsetRegion(
Region.c:347:#define ZShiftRegion(a,b) if (xdir) XOffsetRegion(a,b,0); \
Region.c:348:			  else XOffsetRegion(a,0,b)
Region.c:397:    XOffsetRegion(r, dx, dy);
Xutil.h:551:extern int XOffsetRegion(

#### XOpenDisplay ####
ConnDis.c:1011: * so we can tell XOpenDisplay to not bother looking for it by
DisName.c:32: * Returns the name of the display XOpenDisplay would use.  This is better
DisName.c:39: * For example, this is used in XOpenDisplay() as
OpenDis.c:111:XOpenDisplay (
OpenDis.c:152:        fprintf(stderr, "\nXOpenDisplay: Called with display [%s].\n", display);
OpenDis.c:228:        fprintf(stderr, "\nXOpenDisplay: Connected display with dpy->fd = [%d].\n", dpy->fd);
OpenDis.c:808:        fprintf(stderr, "XOpenDisplay: Returning display at [%p].\n", dpy);
OpenDis.c:843: * Display.  It is used by XOpenDisplay if it runs out of memory,
OpenDis.c:846: * by XOpenDisplay before the Display structure is fully formed.
OpenDis.c:847: * XOpenDisplay must be sure to initialize all the pointers to NULL
OpenDis.c:975:/* OutOfMemory is called if malloc fails.  XOpenDisplay returns NULL
XKB.c:747:    dpy = XOpenDisplay(name);
Xlib.h:1484:extern Display *XOpenDisplay(

#### XOpenIM ####
IMWrap.c:115:XOpenIM(Display *display, XrmDatabase rdb, char *res_name, char *res_class)
Xlcint.h:237:typedef XIM (*XOpenIMProc)(
Xlcint.h:317:    XOpenIMProc				open_im;
Xlib.h:3848:extern XIM XOpenIM(

#### XOpenOM ####
FSWrap.c:178:    om = XOpenOM(dpy, NULL, NULL, NULL);
OMWrap.c:33:XOpenOM(Display *dpy, XrmDatabase rdb, _Xconst char *res_name,
Xlcint.h:229:typedef XOM (*XOpenOMProc)(
Xlcint.h:316:    XOpenOMProc				open_om;
Xlib.h:3579:extern XOM XOpenOM(

#### XParseColor ####
ParseCol.c:36:XParseColor (
Xcmsint.h:75:     *		XParseColor()
Xlib.h:2872:extern Status XParseColor(

#### XParseGeometry ####
Geom.c:64:	pmask = XParseGeometry(pos, &px, &py, &pwidth, &pheight);
Geom.c:65:	dmask = XParseGeometry(def, &dx, &dy, &dwidth, &dheight);
ParseGeom.c:37: *    XParseGeometry parses strings of the form
ParseGeom.c:73:XParseGeometry (
WMGeom.c:94:    rmask = umask = XParseGeometry (user_geom, &ux, &uy, &uwidth, &uheight);
WMGeom.c:95:    dmask = XParseGeometry (def_geom, &dx, &dy, &dwidth, &dheight);
Xlib.h:2879:extern int XParseGeometry(
Xutil.h:66: * Bitmask returned by XParseGeometry().  Each bit tells if the corresponding

#### XPeekEvent ####
PeekEvent.c:39:XPeekEvent (
Xlib.h:2887:extern int XPeekEvent(

#### XPeekIfEvent ####
PeekIfEv.c:39:XPeekIfEvent (
Xlib.h:2892:extern int XPeekIfEvent(

#### XPending ####
Pending.c:59:int XPending (register Display *dpy)
Xlib.h:2903:extern int XPending(

#### XPlanesOfScreen ####
Macros.c:222:int XPlanesOfScreen(Screen *s) { return (PlanesOfScreen(s)); }
Xlib.h:2907:extern int XPlanesOfScreen(

#### XPointInRegion ####
Region.c:1507:XPointInRegion(
Xutil.h:557:extern Bool XPointInRegion(

#### XPolygonRegion ####
PolyReg.c:472:XPolygonRegion(
Xutil.h:563:extern Region XPolygonRegion(

#### XProcessInternalConnection ####
XlibInt.c:818:		    _XProcessInternalConnection(dpy, ilist);
XlibInt.c:1136:	 * unless we were called from within XProcessInternalConnection
XlibInt.c:1142:	    /* some thread is in XProcessInternalConnection or XLockDisplay
XlibInt.c:1366:	 * unless we were called from within XProcessInternalConnection
XlibInt.c:1372:	    /* some thread is in XProcessInternalConnection or XLockDisplay
XlibInt.c:2453: * and detects input available, it must call XProcessInternalConnection,
XlibInt.c:2592:void _XProcessInternalConnection(
XlibInt.c:2616:/* XProcessInternalConnection
XlibInt.c:2622:XProcessInternalConnection(
XlibInt.c:2630:    fprintf(stderr, "XProcessInternalConnection: Got called.\n");
XlibInt.c:2636:	    _XProcessInternalConnection(dpy, info_list);
locking.h:69:	xthread_t conni_thread;	/* thread in XProcessInternalConnection */
Xlib.h:3986:extern void XProcessInternalConnection(
Xlibint.h:426:#define XlibDisplayProcConni	(1L << 4) /* in _XProcessInternalConnection */
Xlibint.h:1231:extern void _XProcessInternalConnection(

#### XProtocolRevision ####
Macros.c:117:int XProtocolRevision(Display *dpy) { return (ProtocolRevision(dpy));}
Xlib.h:2911:extern int XProtocolRevision(

#### XProtocolVersion ####
Macros.c:115:int XProtocolVersion(Display *dpy) { return (ProtocolVersion(dpy)); }
Xlib.h:2915:extern int XProtocolVersion(

#### XPutBackEvent ####
imDefLkup.c:375:    XPutBackEvent(d, &ev);
imDefLkup.c:728:    XPutBackEvent(im->core.display, (XEvent *)&ev);
imExten.c:159:    XPutBackEvent(im->core.display, &ev);
imLcFlt.c:123:	    XPutBackEvent(d, ev);
imLcFlt.c:153:	_XPutBackEvent(d, ev);
imThaiFlt.c:1419:    XPutBackEvent(d, ev);
imTrans.c:239:    XPutBackEvent(im->core.display, &ev);
imTrX.c:359:	    XPutBackEvent(im->core.display, event);
imTrX.c:414:	    XPutBackEvent(im->core.display, event);
PutBEvent.c:29:/* XPutBackEvent puts an event back at the head of the queue. */
PutBEvent.c:36:_XPutBackEvent (
PutBEvent.c:77:XPutBackEvent (
PutBEvent.c:84:	ret = _XPutBackEvent(dpy, event);
XlibInt.c:829:	       XPutBackEvent.  We notice it here and if we needed an event,
XlibInt.c:1460:		   done XPutBackEvent.  Which we can use so we're done. */
XlibInt.c:1572:			return -2; /* internal connection did XPutBackEvent */
XlibInt.c:1578:			return -2; /* internal connection did XPutBackEvent */
Xlib.h:2920:extern int XPutBackEvent(
Xlibint.h:1333:int _XPutBackEvent (

#### XPutImage ####
CrBFData.c:76:        XPutImage(display, pix, gc, &ximage, 0, 0, 0, 0, width, height);
CrPFBData.c:85:        XPutImage(display, pix, gc, &ximage, 0, 0, 0, 0, width, height);
PutImage.c:932:XPutImage (
Xlib.h:2925:extern int XPutImage(

#### XPutPixel ####
ImUtil.c:41:static int _XPutPixel(XImage *, int, int, unsigned long);
ImUtil.c:42:static int _XPutPixel1(XImage *, int, int, unsigned long);
ImUtil.c:43:static int _XPutPixel8(XImage *, int, int, unsigned long);
ImUtil.c:44:static int _XPutPixel16(XImage *, int, int, unsigned long);
ImUtil.c:45:static int _XPutPixel32(XImage *, int, int, unsigned long);
ImUtil.c:103: *	_XPutPixel	Writes a pixel into an image data structure
ImUtil.c:104: *	_XPutPixel32	Writes a pixel into a 32-bit Z image data structure
ImUtil.c:105: *	_XPutPixel16	Writes a pixel into a 16-bit Z image data structure
ImUtil.c:106: *	_XPutPixel8	Writes a pixel into an 8-bit Z image data structure
ImUtil.c:107: *	_XPutPixel1	Writes a pixel into an 1-bit image data structure
ImUtil.c:278:	    image->f.put_pixel = _XPutPixel8;
ImUtil.c:282:	    image->f.put_pixel = _XPutPixel1;
ImUtil.c:286:	    image->f.put_pixel = _XPutPixel32;
ImUtil.c:290:	    image->f.put_pixel = _XPutPixel16;
ImUtil.c:293:	    image->f.put_pixel = _XPutPixel;
ImUtil.c:648:static int _XPutPixel (
ImUtil.c:721:static int _XPutPixel32 (
ImUtil.c:748:	    return XPutPixel(ximage, x, y, pixel);
ImUtil.c:752:static int _XPutPixel16 (
ImUtil.c:773:	    return XPutPixel(ximage, x, y, pixel);
ImUtil.c:777:static int _XPutPixel8 (
ImUtil.c:788:	    return XPutPixel(ximage, x, y, pixel);
ImUtil.c:792:static int _XPutPixel1 (
ImUtil.c:817:	    return XPutPixel(ximage, x, y, pixel);
ImUtil.c:889:		XPutPixel(subimage, (col - x), (row - y), pixel);
ImUtil.c:949:		XPutPixel(dstimg, x + col, y + row, pixel);
ImUtil.c:1011:		    XPutPixel(ximage, x, y, pixel);
Macros.c:266:#undef XPutPixel
Macros.c:267:int XPutPixel(
PutImage.c:1000:		    XPutPixel(&img, i, j, XGetPixel(image, req_xoffset + i,
Xutil.h:201:extern int XPutPixel(
Xutil.h:221:#define XPutPixel(ximage, x, y, pixel) \

#### XQLength ####
Macros.c:79:int XQLength(Display *dpy) { return (QLength(dpy)); }
Xlib.h:2938:extern int XQLength(

#### XQueryBestCursor ####
QuCurShp.c:32:Status XQueryBestCursor(
Xlib.h:2942:extern Status XQueryBestCursor(

#### XQueryBestSize ####
QuBest.c:32:Status XQueryBestSize(
Xlib.h:2951:extern Status XQueryBestSize(

#### XQueryBestStipple ####
QuStipShp.c:32:Status XQueryBestStipple(
Xlib.h:2961:extern Status XQueryBestStipple(

#### XQueryBestTile ####
QuTileShp.c:32:Status XQueryBestTile(
Xlib.h:2970:extern Status XQueryBestTile(

#### XQueryColor ####
QuCol.c:63: *		This routine uses XQueryColor to obtain the X RGB values
QuCol.c:76:    return(_XcmsSetGetColor(XQueryColor, dpy, colormap,
QuColor.c:33:XQueryColor(
QuColors.c:33:_XQueryColors(
QuColors.c:75:XQueryColors(
QuColors.c:90:	_XQueryColors(dpy, cmap, defs, n);
QuColors.c:95:	_XQueryColors(dpy, cmap, defs, ncolors);
QuCols.c:63: *		This routine uses XQueryColors to obtain the X RGB values
QuCols.c:76:    return(_XcmsSetGetColors(XQueryColors, dpy, colormap,
SetGetCols.c:107:	    || (*xColorProc == XQueryColor)) ) {
SetGetCols.c:115:    if (*xColorProc == XQueryColor) {
SetGetCols.c:140:    } else if ((*xColorProc == XQueryColor) || (*xColorProc == XStoreColor)) {
SetGetCols.c:141:	/* Note: XQueryColor and XStoreColor do not return any Status */
SetGetCols.c:229:    if ( !((*xColorProc == XStoreColors) || (*xColorProc == XQueryColors)) ) {
SetGetCols.c:245:    if (*xColorProc == XQueryColors) {
SetGetCols.c:267:    if ((*xColorProc == XQueryColors) || (*xColorProc == XStoreColors)){
SetGetCols.c:268:	/* Note: XQueryColors and XStoreColors do not return any Status */
Xlib.h:2979:extern int XQueryColor(
Xlib.h:2985:extern int XQueryColors(

#### XQueryColors ####
QuColors.c:33:_XQueryColors(
QuColors.c:75:XQueryColors(
QuColors.c:90:	_XQueryColors(dpy, cmap, defs, n);
QuColors.c:95:	_XQueryColors(dpy, cmap, defs, ncolors);
QuCols.c:63: *		This routine uses XQueryColors to obtain the X RGB values
QuCols.c:76:    return(_XcmsSetGetColors(XQueryColors, dpy, colormap,
SetGetCols.c:229:    if ( !((*xColorProc == XStoreColors) || (*xColorProc == XQueryColors)) ) {
SetGetCols.c:245:    if (*xColorProc == XQueryColors) {
SetGetCols.c:267:    if ((*xColorProc == XQueryColors) || (*xColorProc == XStoreColors)){
SetGetCols.c:268:	/* Note: XQueryColors and XStoreColors do not return any Status */
Xlib.h:2985:extern int XQueryColors(

#### XQueryExtension ####
InitExt.c:47:	if (!XQueryExtension(dpy, name,
QuExt.c:33:XQueryExtension(
Xlib.h:2992:extern Bool XQueryExtension(

#### XQueryFont ####
Font.c:55:static XFontStruct *_XQueryFont(
Font.c:121:	font_result = _XQueryFont(dpy, fid, seq);
Font.c:127:XFontStruct *XQueryFont (
Font.c:144:	font_result = _XQueryFont(dpy, fid, 0L);
Font.c:181:_XQueryFont (
Font.c:436:    /* The function _XQueryFont benefits from a "magic" error handler for
Xlib.h:1400:extern XFontStruct *XQueryFont(

#### XQueryKeymap ####
QuKeybd.c:37:XQueryKeymap(
Xlib.h:3000:extern int XQueryKeymap(

#### XQueryPointer ####
QuPntr.c:32:Bool XQueryPointer(
Xlib.h:3005:extern Bool XQueryPointer(

#### XQueryTextExtents16 ####
QuTextE16.c:33:XQueryTextExtents16 (
Xlib.h:3028:extern int XQueryTextExtents16(

#### XQueryTextExtents ####
QuTextE16.c:33:XQueryTextExtents16 (
QuTextExt.c:33:XQueryTextExtents (
Xlib.h:3017:extern int XQueryTextExtents(
Xlib.h:3028:extern int XQueryTextExtents16(

#### XQueryTree ####
QuTree.c:32:Status XQueryTree (
Xlib.h:3039:extern Status XQueryTree(

#### XRaiseWindow ####
RaiseWin.c:33:XRaiseWindow (
Xlib.h:3048:extern int XRaiseWindow(

#### XReadBitmapFile ####
RdBitF.c:109:XReadBitmapFileData (
RdBitF.c:240:XReadBitmapFile (
RdBitF.c:253:    res = XReadBitmapFileData(filename, width, height, &data, x_hot, y_hot);
Xlib.h:3053:extern int XReadBitmapFile(
Xlib.h:3064:extern int XReadBitmapFileData(
Xutil.h:338: * return codes for XReadBitmapFile and XWriteBitmapFile

#### XReadBitmapFileData ####
RdBitF.c:109:XReadBitmapFileData (
RdBitF.c:253:    res = XReadBitmapFileData(filename, width, height, &data, x_hot, y_hot);
Xlib.h:3064:extern int XReadBitmapFileData(

#### XRebindKeysym ####
KeyBind.c:912:XRebindKeysym (
Xlib.h:3073:extern int XRebindKeysym(

#### XRecolorCursor ####
RecolorC.c:33:XRecolorCursor(
Xlib.h:3082:extern int XRecolorCursor(

#### XReconfigureWMWindow ####
ReconfWM.c:37:Status XReconfigureWMWindow (
Xlib.h:1875:extern Status XReconfigureWMWindow(

#### XRectInRegion ####
Region.c:1526:XRectInRegion(
Xutil.h:276:/* Return values from XRectInRegion() */
Xutil.h:569:extern int XRectInRegion(

#### XRefreshKeyboardMapping ####
KeyBind.c:60:#define	XRefreshKeyboardMapping	_XRefreshKeyboardMapping
KeyBind.c:228:XRefreshKeyboardMapping(register XMappingEvent *event)
XKBBind.c:354:        _XRefreshKeyboardMapping((XMappingEvent *) event);
XKBBind.c:390:XRefreshKeyboardMapping(register XMappingEvent * event)
XKBBind.c:398:    (void) _XRefreshKeyboardMapping(event);
XKBlibint.h:153:extern int _XRefreshKeyboardMapping(
Xlib.h:3089:extern int XRefreshKeyboardMapping(

#### XRegisterIMInstantiateCallback ####
IMWrap.c:165:XRegisterIMInstantiateCallback(
Xlib.h:3953:extern Bool XRegisterIMInstantiateCallback(

#### XRemoveConnectionWatch ####
XlibInt.c:2703:/* XRemoveConnectionWatch
XlibInt.c:2709:XRemoveConnectionWatch(
XlibInt.c:2721:    fprintf(stderr, "XRemoveConnectionWatch: Got called.\n");
Xlib.h:3997:extern void XRemoveConnectionWatch(

#### XRemoveFromSaveSet ####
ChSaveSet.c:58:XRemoveFromSaveSet (
Xlib.h:3093:extern int XRemoveFromSaveSet(

#### XRemoveHost ####
Host.c:113:XRemoveHost (
Host.c:134:XRemoveHosts (
Host.c:141:	(void) XRemoveHost(dpy, &hosts[i]);
Xlib.h:3098:extern int XRemoveHost(
Xlib.h:3103:extern int XRemoveHosts(

#### XRemoveHosts ####
Host.c:134:XRemoveHosts (
Xlib.h:3103:extern int XRemoveHosts(

#### XReparentWindow ####
RepWindow.c:33:XReparentWindow(
Xlib.h:3109:extern int XReparentWindow(

#### XResetScreenSaver ####
FSSaver.c:40:XResetScreenSaver(register Display *dpy)
Xlib.h:3117:extern int XResetScreenSaver(

#### XResizeWindow ####
ChWindow.c:33:XResizeWindow(
Xlib.h:3121:extern int XResizeWindow(

#### XResourceManagerString ####
Misc.c:37:char *XResourceManagerString(Display *dpy)
Xlib.h:1720:extern char *XResourceManagerString(

#### XRestackWindows ####
RestackWs.c:33:XRestackWindows (
Xlib.h:3128:extern int XRestackWindows(

#### XRootWindow ####
Macros.c:45:Window XRootWindow (Display *dpy, int scr)
Macros.c:182:Window XRootWindowOfScreen(Screen *s) { return (RootWindowOfScreen(s)); }
Xlib.h:1766:extern Window XRootWindow(
Xlib.h:1773:extern Window XRootWindowOfScreen(

#### XRootWindowOfScreen ####
Macros.c:182:Window XRootWindowOfScreen(Screen *s) { return (RootWindowOfScreen(s)); }
Xlib.h:1773:extern Window XRootWindowOfScreen(

#### XRotateBuffers ####
StBytes.c:45:XRotateBuffers (
Xlib.h:3134:extern int XRotateBuffers(

#### XRotateWindowProperties ####
RotProp.c:33:XRotateWindowProperties(
StBytes.c:49:    /* XRotateWindowProperties wants a non-const Atom*, but it doesn't
StBytes.c:52:    return XRotateWindowProperties(dpy, RootWindow(dpy, 0), (Atom *)n_to_atom, 8, rotate);
Xlib.h:3139:extern int XRotateWindowProperties(

#### XSaveContext ####
Context.c:55:   XSaveContext(a,b,c,d) will store d in position (a,b,c) of the array.
Context.c:159:int XSaveContext(
Xutil.h:577:extern int XSaveContext(

#### XScreenCount ####
Macros.c:111:int XScreenCount(Display *dpy) { return (ScreenCount(dpy)); }
Xlib.h:3147:extern int XScreenCount(

#### XScreenNumberOfScreen ####
Macros.c:236:int XScreenNumberOfScreen (register Screen *scr)
Xlib.h:1840:extern int XScreenNumberOfScreen(

#### XScreenOfDisplay ####
Macros.c:170:Screen *XScreenOfDisplay(Display *dpy, int scr)
Xlib.h:1829:extern Screen *XScreenOfDisplay(

#### XScreenResourceString ####
ScrResStr.c:33:char *XScreenResourceString(Screen *screen)
Xlib.h:1723:extern char *XScreenResourceString(

#### XSelectInput ####
imDefFlt.c:390:	    XSelectInput(im->core.display, im->private.proto.im_window,
imExten.c:108:    XSelectInput(im->core.display, ic->core.focus_window, select_mask);
imInsClbk.c:200:	XSelectInput( display, root,
imTrX.c:186:	XSelectInput(im->core.display, spec->lib_connect_wid, event_mask);
SelInput.c:33:XSelectInput (
Xlib.h:3151:extern int XSelectInput(

#### XSendEvent ####
Iconify.c:85:        return (XSendEvent (dpy, root, False,
imTrX.c:192:    XSendEvent(im->core.display, im->private.proto.im_window,
imTrX.c:294:	    XSendEvent(im->core.display, spec->ims_connect_wid,
imTrX.c:311:	    XSendEvent(im->core.display, spec->ims_connect_wid,
ReconfWM.c:138:        return (XSendEvent (dpy, root, False,
SendEvent.c:37:XSendEvent(
Withdraw.c:80:        return (XSendEvent (dpy, root, False,
Xlib.h:3157:extern Status XSendEvent(

#### XServerVendor ####
Macros.c:113:char *XServerVendor(Display *dpy) { return (ServerVendor(dpy)); }
Xlib.h:1813:extern char *XServerVendor(

#### XSetAccessControl ####
ChAccCon.c:35:    return XSetAccessControl(dpy, EnableAccess);
ChAccCon.c:41:    return XSetAccessControl(dpy, DisableAccess);
ChAccCon.c:45:XSetAccessControl(
Xlib.h:3165:extern int XSetAccessControl(

#### XSetAfterFunction ####
Synchro.c:59:int (*XSetAfterFunction(
Xlib.h:1529:extern int (*XSetAfterFunction(

#### XSetArcMode ####
GCMisc.c:33:XSetArcMode (
Xlib.h:3170:extern int XSetArcMode(

#### XSetAuthorization ####
ConnDis.c:910:void XSetAuthorization (
Xlib.h:4003:extern void XSetAuthorization(

#### XSetBackground ####
SetBack.c:33:XSetBackground (
Xlib.h:3176:extern int XSetBackground(

#### XSetClassHint ####
SetHints.c:291:XSetClassHint(
WMProps.c:138:	XSetClassHint (dpy, w, classHints);
Xutil.h:584:extern int XSetClassHint(

#### XSetClipMask ####
SetClMask.c:33:XSetClipMask (
Xlib.h:3182:extern int XSetClipMask(

#### XSetClipOrigin ####
SetClOrig.c:33:XSetClipOrigin (
Xlib.h:3188:extern int XSetClipOrigin(

#### XSetClipRectangles ####
Region.c:275:	_XSetClipRectangles(dpy, gc, 0, 0, xr, r->numRects, YXBanded);
SetCRects.c:33:void _XSetClipRectangles (
SetCRects.c:65:XSetClipRectangles (
SetCRects.c:75:    _XSetClipRectangles (dpy, gc, clip_x_origin, clip_y_origin, rectangles, n,
Xlib.h:3195:extern int XSetClipRectangles(
Xlibint.h:1320:extern void _XSetClipRectangles (

#### XSetCloseDownMode ####
ChClMode.c:33:XSetCloseDownMode(
Xlib.h:3205:extern int XSetCloseDownMode(

#### XSetCommand ####
SetHints.c:207:XSetCommand (
SetHints.c:271:	if (argv != NULL) XSetCommand(dpy, w, argv, argc);
WMProps.c:101:	XSetCommand (dpy, w, argv, argc);
Xlib.h:3210:extern int XSetCommand(

#### XSetDashes ####
SetDashes.c:33:XSetDashes (
Xlib.h:3217:extern int XSetDashes(

#### XSetErrorHandler ####
ErrHndlr.c:39:XSetErrorHandler(XErrorHandler handler)
OpenDis.c:173:	if (_XErrorFunction == NULL) (void) XSetErrorHandler (NULL);
Xlib.h:1849:extern XErrorHandler XSetErrorHandler (

#### XSetFillRule ####
GCMisc.c:49:XSetFillRule (
Xlib.h:3225:extern int XSetFillRule(

#### XSetFillStyle ####
GCMisc.c:65:XSetFillStyle (
omImText.c:53:    XSetFillStyle(dpy, gc, FillSolid);
Xlib.h:3231:extern int XSetFillStyle(

#### XSetFont ####
omDefault.c:351:    XSetFont(dpy, gc, font->fid);
omDefault.c:409:    XSetFont(dpy, gc, (*oc->core.font_info.font_struct_list)->fid);
omText.c:208:            XSetFont(dpy, gc, font->fid);
omText.c:246:            XSetFont(dpy, gc, font->fid);
SetFont.c:33:XSetFont (
SetFPath.c:35:XSetFontPath (
XDefaultOMIF.c:781:    XSetFont(dpy, gc, font->fid);
XDefaultOMIF.c:813:    XSetFont(dpy, gc, (*oc->core.font_info.font_struct_list)->fid);
Xlib.h:3237:extern int XSetFont(
Xlib.h:3243:extern int XSetFontPath(

#### XSetFontPath ####
SetFPath.c:35:XSetFontPath (
Xlib.h:3243:extern int XSetFontPath(

#### XSetForeground ####
omImText.c:52:    XSetForeground(dpy, gc, values.background);
SetFore.c:33:XSetForeground (
Xlib.h:3249:extern int XSetForeground(

#### XSetFunction ####
omImText.c:51:    XSetFunction(dpy, gc, GXcopy);
SetFunc.c:33:XSetFunction (
Xlib.h:3255:extern int XSetFunction(

#### XSetGraphicsExposures ####
GCMisc.c:81:XSetGraphicsExposures (
Xlib.h:3261:extern int XSetGraphicsExposures(

#### XSetICFocus ####
ICWrap.c:345:XSetICFocus(XIC ic)
Xlib.h:3883:extern void XSetICFocus(

#### XSetICValues ####
ICWrap.c:311:XSetICValues(XIC ic, ...)
Xlib.h:3903:extern char *XSetICValues(

#### XSetIMValues ####
ICWrap.c:167:XSetIMValues(XIM im, ...)
Xlib.h:3863:extern char *XSetIMValues(

#### XSetIOErrorHandler ####
ErrHndlr.c:67:XSetIOErrorHandler(XIOErrorHandler handler)
OpenDis.c:174:	if (_XIOErrorFunction == NULL) (void) XSetIOErrorHandler (NULL);
Xlib.h:1858:extern XIOErrorHandler XSetIOErrorHandler (

#### XSetIconName ####
StName.c:45:XSetIconName (
Xlib.h:3267:extern int XSetIconName(

#### XSetIconSizes ####
SetHints.c:176:XSetIconSizes (
Xutil.h:590:extern int XSetIconSizes(

#### XSetInputFocus ####
SetIFocus.c:33:XSetInputFocus(
Xlib.h:3273:extern int XSetInputFocus(

#### XSetLineAttributes ####
SetLStyle.c:33:XSetLineAttributes(
Xlib.h:3280:extern int XSetLineAttributes(

#### XSetLocaleModifiers ####
lcWrap.c:75:XSetLocaleModifiers(
Xlib.h:3575:extern char *XSetLocaleModifiers(

#### XSetModifierMapping ####
ModMap.c:74:XSetModifierMapping(
Xlib.h:3289:extern int XSetModifierMapping(

#### XSetNormalHints ####
SetHints.c:154: * XSetNormalHints sets the property
SetHints.c:159:XSetNormalHints (			/* old routine */
SetHints.c:273:	if (hints != NULL) XSetNormalHints(dpy, w, hints);
Xutil.h:597:extern int XSetNormalHints(

#### XSetOCValues ####
OCWrap.c:91:XSetOCValues(XOC oc, ...)
Xlcint.h:424:typedef char* (*XSetOCValuesProc)(
Xlcint.h:543:    XSetOCValuesProc 		set_values;
Xlib.h:3621:extern char *XSetOCValues(

#### XSetOMValues ####
OMWrap.c:68:XSetOMValues(XOM om, ...)
Xlcint.h:374:typedef char* (*XSetOMValuesProc)(
Xlcint.h:394:    XSetOMValuesProc	set_values;
Xlib.h:3590:extern char *XSetOMValues(

#### XSetPlaneMask ####
SetPMask.c:33:XSetPlaneMask (
Xlib.h:3294:extern int XSetPlaneMask(

#### XSetPointerMapping ####
SetPntMap.c:34:XSetPointerMapping (
Xlib.h:3300:extern int XSetPointerMapping(

#### XSetRGBColormaps ####
SetRGBCMap.c:38:void XSetRGBColormaps (
SetStCmap.c:91:    XSetRGBColormaps (dpy, w, &stdcmap, 1, property);
Xutil.h:603:extern void XSetRGBColormaps(

#### XSetRegion ####
Region.c:254:XSetRegion(
Xutil.h:709:extern int XSetRegion(

#### XSetScreenSaver ####
SetSSaver.c:33:XSetScreenSaver(
Xlib.h:3306:extern int XSetScreenSaver(

#### XSetSelectionOwner ####
SetSOwner.c:33:XSetSelectionOwner(
Xlib.h:3314:extern int XSetSelectionOwner(

#### XSetSizeHints ####
SetHints.c:61:XSetSizeHints(		/* old routine */
SetHints.c:149:	return XSetSizeHints (dpy, w, zhints, XA_WM_ZOOM_HINTS);
SetHints.c:164:	return XSetSizeHints (dpy, w, hints, XA_WM_NORMAL_HINTS);
Xutil.h:611:extern int XSetSizeHints(

#### XSetStandardColormap ####
SetStCmap.c:64:void XSetStandardColormap(
Xutil.h:715:extern void XSetStandardColormap(

#### XSetStandardProperties ####
SetHints.c:236: * XSetStandardProperties sets the following properties:
SetHints.c:245:XSetStandardProperties (
Xutil.h:618:extern int XSetStandardProperties(

#### XSetState ####
SetState.c:33:XSetState(
Xlib.h:3321:extern int XSetState(

#### XSetStipple ####
SetStip.c:33:XSetStipple (
Xlib.h:3330:extern int XSetStipple(

#### XSetSubwindowMode ####
GCMisc.c:97:XSetSubwindowMode (
Xlib.h:3336:extern int XSetSubwindowMode(

#### XSetTSOrigin ####
SetTSOrig.c:33:XSetTSOrigin (
Xlib.h:3342:extern int XSetTSOrigin(

#### XSetTextProperty ####
SetTxtProp.c:60:void XSetTextProperty (
SetTxtProp.c:75:    XSetTextProperty (dpy, w, tp, XA_WM_NAME);
SetTxtProp.c:83:    XSetTextProperty (dpy, w, tp, XA_WM_ICON_NAME);
SetTxtProp.c:91:    XSetTextProperty (dpy, w, tp, XA_WM_CLIENT_MACHINE);
Xutil.h:629:extern void XSetTextProperty(

#### XSetTile ####
SetTile.c:33:XSetTile (
Xlib.h:3349:extern int XSetTile(

#### XSetTransientForHint ####
SetHints.c:281:XSetTransientForHint(
Xlib.h:1926:extern int XSetTransientForHint(

#### XSetWMClientMachine ####
SetTxtProp.c:86:void XSetWMClientMachine (
WMProps.c:109:    XSetWMClientMachine (dpy, w, &textprop);
Xutil.h:636:extern void XSetWMClientMachine(

#### XSetWMColormapWindows ####
SetWMCMapW.c:60:Status XSetWMColormapWindows (
Xlib.h:1917:extern Status XSetWMColormapWindows(

#### XSetWMHints ####
SetHints.c:102: * XSetWMHints sets the property
SetHints.c:107:XSetWMHints (
SetHints.c:275:	if (phints.flags != 0) XSetWMHints(dpy, w, &phints);
WMProps.c:113:    if (wmHints) XSetWMHints (dpy, w, wmHints);
Xutil.h:642:extern int XSetWMHints(

#### XSetWMIconName ####
SetTxtProp.c:78:void XSetWMIconName (
WMProps.c:93:    if (iconName) XSetWMIconName (dpy, w, iconName);
Xutil.h:648:extern void XSetWMIconName(

#### XSetWMName ####
SetTxtProp.c:70:void XSetWMName (
WMProps.c:92:    if (windowName) XSetWMName (dpy, w, windowName);
Xutil.h:654:extern void XSetWMName(

#### XSetWMNormalHints ####
SetNrmHint.c:120:void XSetWMNormalHints (
WMProps.c:112:    if (sizeHints) XSetWMNormalHints (dpy, w, sizeHints);
Xutil.h:660:extern void XSetWMNormalHints(

#### XSetWMProperties ####
mbWMProps.c:61:    XSetWMProperties(dpy, w, wprop, iprop, argv, argc,
mbWMProps.c:68:    /* Note: The WM_LOCALE_NAME property is set by XSetWMProperties. */
utf8WMProps.c:83:    XSetWMProperties(dpy, w, wprop, iprop, argv, argc,
utf8WMProps.c:90:    /* Note: The WM_LOCALE_NAME property is set by XSetWMProperties. */
WMProps.c:64: * XSetWMProperties sets the following properties:
WMProps.c:75:void XSetWMProperties (
Xutil.h:666:extern void XSetWMProperties(

#### XSetWMProtocols ####
SetWMCMapW.c:56: * XSetWMProtocols sets the property
SetWMProto.c:56: * XSetWMProtocols sets the property
SetWMProto.c:60:Status XSetWMProtocols (
Xlib.h:1889:extern Status XSetWMProtocols(

#### XSetWMSizeHints ####
SetNrmHint.c:62:void XSetWMSizeHints (
SetNrmHint.c:125:    XSetWMSizeHints (dpy, w, hints, XA_WM_NORMAL_HINTS);
Xutil.h:702:extern void XSetWMSizeHints(

#### XSetWindowBackground ####
Backgnd.c:33:XSetWindowBackground(
PmapBgnd.c:33:XSetWindowBackgroundPixmap(
Xlib.h:3355:extern int XSetWindowBackground(
Xlib.h:3361:extern int XSetWindowBackgroundPixmap(

#### XSetWindowBackgroundPixmap ####
PmapBgnd.c:33:XSetWindowBackgroundPixmap(
Xlib.h:3361:extern int XSetWindowBackgroundPixmap(

#### XSetWindowBorder ####
BdrWidth.c:36:XSetWindowBorderWidth(
Border.c:33:XSetWindowBorder(
PmapBord.c:33:XSetWindowBorderPixmap(
Xlib.h:3367:extern int XSetWindowBorder(
Xlib.h:3373:extern int XSetWindowBorderPixmap(
Xlib.h:3379:extern int XSetWindowBorderWidth(

#### XSetWindowBorderPixmap ####
PmapBord.c:33:XSetWindowBorderPixmap(
Xlib.h:3373:extern int XSetWindowBorderPixmap(

#### XSetWindowBorderWidth ####
BdrWidth.c:36:XSetWindowBorderWidth(
Xlib.h:3379:extern int XSetWindowBorderWidth(

#### XSetWindowColormap ####
ChCmap.c:33:XSetWindowColormap(
Xlib.h:3385:extern int XSetWindowColormap(

#### XSetZoomHints ####
SetHints.c:139: * XSetZoomHints sets the property
SetHints.c:144:XSetZoomHints (
Xutil.h:722:extern int XSetZoomHints(

#### XShrinkRegion ####
Region.c:379:XShrinkRegion(
Xutil.h:728:extern int XShrinkRegion(

#### XStoreBuffer ####
StBytes.c:89:XStoreBuffer (
StBytes.c:106:    return XStoreBuffer (dpy, bytes, nbytes, 0);
Xlib.h:3391:extern int XStoreBuffer(

#### XStoreBytes ####
StBytes.c:101:XStoreBytes (
Xlib.h:3398:extern int XStoreBytes(

#### XStoreColor ####
SetGetCols.c:106:    if ( !((*xColorProc == XAllocColor) || (*xColorProc == XStoreColor)
SetGetCols.c:140:    } else if ((*xColorProc == XQueryColor) || (*xColorProc == XStoreColor)) {
SetGetCols.c:141:	/* Note: XQueryColor and XStoreColor do not return any Status */
SetGetCols.c:147:    if ((*xColorProc == XStoreColor)) {
SetGetCols.c:229:    if ( !((*xColorProc == XStoreColors) || (*xColorProc == XQueryColors)) ) {
SetGetCols.c:267:    if ((*xColorProc == XQueryColors) || (*xColorProc == XStoreColors)){
SetGetCols.c:268:	/* Note: XQueryColors and XStoreColors do not return any Status */
SetGetCols.c:275:    if (*xColorProc == XStoreColors) {
StCol.c:64: *		values then use it in a call to XStoreColor.
StCol.c:72: *		Since XStoreColor has no return value this routine
StCol.c:80:    return(_XcmsSetGetColor(XStoreColor, dpy, colormap,
StColor.c:33:XStoreColor(
StColors.c:33:XStoreColors(
StCols.c:66: *		values then use it in a call to XStoreColors.
StCols.c:74: *		Since XStoreColors has no return value, this routine
StCols.c:98:    retval = _XcmsSetGetColors (XStoreColors, dpy, colormap,
StNColor.c:59:	    return XStoreColor(dpy, cmap, &scr_def);
Xlib.h:3404:extern int XStoreColor(
Xlib.h:3410:extern int XStoreColors(

#### XStoreColors ####
SetGetCols.c:229:    if ( !((*xColorProc == XStoreColors) || (*xColorProc == XQueryColors)) ) {
SetGetCols.c:267:    if ((*xColorProc == XQueryColors) || (*xColorProc == XStoreColors)){
SetGetCols.c:268:	/* Note: XQueryColors and XStoreColors do not return any Status */
SetGetCols.c:275:    if (*xColorProc == XStoreColors) {
StColors.c:33:XStoreColors(
StCols.c:66: *		values then use it in a call to XStoreColors.
StCols.c:74: *		Since XStoreColors has no return value, this routine
StCols.c:98:    retval = _XcmsSetGetColors (XStoreColors, dpy, colormap,
Xlib.h:3410:extern int XStoreColors(

#### XStoreName ####
SetHints.c:258:	if (name != NULL) XStoreName (dpy, w, name);
StName.c:34:XStoreName (
StNColor.c:36:XStoreNamedColor(
Xcmsint.h:76:     *		XStoreNamedColor()
Xlib.h:3417:extern int XStoreName(
Xlib.h:3423:extern int XStoreNamedColor(

#### XStoreNamedColor ####
StNColor.c:36:XStoreNamedColor(
Xcmsint.h:76:     *		XStoreNamedColor()
Xlib.h:3423:extern int XStoreNamedColor(

#### XStringListToTextProperty ####
StrToText.c:35: * XStringListToTextProperty - fill in TextProperty structure with
StrToText.c:41:Status XStringListToTextProperty (
Xutil.h:734:extern Status XStringListToTextProperty(

#### XStringToKeysym ####
imLcPrs.c:560:	keysym = XStringToKeysym(tokenbuf);
imLcPrs.c:590:	    rhs_keysym = XStringToKeysym(tokenbuf);
imLcPrs.c:600:	rhs_keysym = XStringToKeysym(tokenbuf);
StrKeysym.c:74:XStringToKeysym(_Xconst char *s)
StrKeysym.c:175:        ret = XStringToKeysym(tmp);
Xlib.h:1711:extern KeySym XStringToKeysym(

#### XSubImage ####
ImUtil.c:46:static XImage *_XSubImage(XImage *, int, int, unsigned int, unsigned int);
ImUtil.c:108: *	_XSubImage	Clones a new (sub)image from an existing one
ImUtil.c:295:	image->f.sub_image = _XSubImage;
ImUtil.c:831:static XImage *_XSubImage (
Macros.c:274:#undef XSubImage
Macros.c:275:XImage *XSubImage(
Xutil.h:205:extern XImage *XSubImage(
Xutil.h:223:#define XSubImage(ximage, x, y, width, height)  \

#### XSubtractRegion ####
Region.c:1426:XSubtractRegion(
Region.c:1463:    (void) XSubtractRegion(sra,srb,tra);
Region.c:1464:    (void) XSubtractRegion(srb,sra,trb);
Xutil.h:740:extern int XSubtractRegion(

#### XSupportsLocale ####
lcWrap.c:96:XSupportsLocale(void)
Xlib.h:3573:extern Bool XSupportsLocale (void);

#### XSync ####
ClDisplay.c:43: * XCloseDisplay - XSync the connection to the X Server, close the connection,
ClDisplay.c:65:	    XSync(dpy, 1);  /* throw away pending events, catch errors */
ClDisplay.c:73:		XSync(dpy, 1);
OpenDis.c:735:	(void) XSynchronize(dpy, _Xdebug);
ReconfWM.c:59:     * We need to inline XConfigureWindow and XSync so that everything is done
ReconfWM.c:104:     * XSync (dpy, 0)
Sync.c:35:XSync (
Synchro.c:33:static int _XSyncFunction(register Display *dpy)
Synchro.c:35:	XSync(dpy,0);
Synchro.c:39:int (*XSynchronize(Display *dpy, int onoff))(Display *)
Synchro.c:45:	    func = _XSyncFunction;
Xlib.h:1523:extern int (*XSynchronize(
Xlib.h:3431:extern int XSync(

#### XSynchronize ####
OpenDis.c:735:	(void) XSynchronize(dpy, _Xdebug);
Synchro.c:39:int (*XSynchronize(Display *dpy, int onoff))(Display *)
Xlib.h:1523:extern int (*XSynchronize(

#### XTextExtents16 ####
omText.c:117:		XTextExtents16(font, buf2b, 1,
omTextExt.c:72:	    XTextExtents16(font, xchar2b_buf, buf_len, &direction,
TextExt16.c:44: * XTextExtents16 - compute the extents of string given as a sequence of
TextExt16.c:48:XTextExtents16 (
TextExt16.c:120: * subset of XTextExtents16.
TextExt.c:71: * what is done in XTextExtents16.
Xlib.h:3446:extern int XTextExtents16(

#### XTextExtents ####
omDefault.c:149:    XTextExtents(*oc->core.font_info.font_struct_list, text, length, &direction,
omText.c:117:		XTextExtents16(font, buf2b, 1,
omText.c:137:		XTextExtents(font, buf, 1,
omTextExt.c:72:	    XTextExtents16(font, xchar2b_buf, buf_len, &direction,
omTextExt.c:75:	    XTextExtents(font, (char *) xchar2b_buf, buf_len, &direction,
TextExt16.c:44: * XTextExtents16 - compute the extents of string given as a sequence of
TextExt16.c:48:XTextExtents16 (
TextExt16.c:120: * subset of XTextExtents16.
TextExt.c:68: * XTextExtents - compute the extents of string given as a sequences of eight
TextExt.c:71: * what is done in XTextExtents16.
TextExt.c:74:XTextExtents (
TextExt.c:145: * subset of XTextExtents.
XDefaultOMIF.c:637:    XTextExtents(*oc->core.font_info.font_struct_list, text, length, &direction,
Xlib.h:3436:extern int XTextExtents(
Xlib.h:3446:extern int XTextExtents16(

#### XTextPropertyToStringList ####
GetHints.c:256:    if (!XTextPropertyToStringList (&tp, &argv, &argc)) {
TextToStr.c:37: * XTextPropertyToStringList - set list and count to contain data stored in
TextToStr.c:41:Status XTextPropertyToStringList (
Xutil.h:774:extern Status XTextPropertyToStringList(

#### XTextWidth16 ####
omText.c:213:		x += XTextWidth16(font, (XChar2b *)ptr, char_len);
omTextEsc.c:184:		escapement += XTextWidth16(font, (XChar2b *)ptr, char_len);
TextExt16.c:119: * XTextWidth16 - compute the width of sequence of XChar2bs.  This is a
TextExt16.c:123:XTextWidth16 (
Xlib.h:3462:extern int XTextWidth16(

#### XTextWidth ####
omDefault.c:93:    return XTextWidth(*oc->core.font_info.font_struct_list, text, length);
omDefault.c:354:    return XTextWidth(font, text, length);
omText.c:213:		x += XTextWidth16(font, (XChar2b *)ptr, char_len);
omText.c:217:		x += XTextWidth(font, (char *)ptr, char_len);
omTextEsc.c:184:		escapement += XTextWidth16(font, (XChar2b *)ptr, char_len);
omTextEsc.c:187:		escapement += XTextWidth(font, (char *)ptr, char_len);
TextExt16.c:119: * XTextWidth16 - compute the width of sequence of XChar2bs.  This is a
TextExt16.c:123:XTextWidth16 (
TextExt.c:144: * XTextWidth - compute the width of a string of eightbit bytes.  This is a
TextExt.c:148:XTextWidth (
XDefaultOMIF.c:606:    return XTextWidth(*oc->core.font_info.font_struct_list, text, length);
XDefaultOMIF.c:784:    return XTextWidth(font, text, length);
Xlib.h:3456:extern int XTextWidth(
Xlib.h:3462:extern int XTextWidth16(

#### XTranslateCoordinates ####
TrCoords.c:32:Bool XTranslateCoordinates(
Xlib.h:3468:extern Bool XTranslateCoordinates(

#### XUndefineCursor ####
UndefCurs.c:33:XUndefineCursor (
Xlib.h:3479:extern int XUndefineCursor(

#### XUngrabButton ####
UngrabBut.c:33:XUngrabButton(
Xlib.h:3484:extern int XUngrabButton(

#### XUngrabKey ####
UngrabKbd.c:33:XUngrabKeyboard (
UngrabKey.c:33:XUngrabKey(
Xlib.h:3491:extern int XUngrabKey(
Xlib.h:3498:extern int XUngrabKeyboard(

#### XUngrabKeyboard ####
UngrabKbd.c:33:XUngrabKeyboard (
Xlib.h:3498:extern int XUngrabKeyboard(

#### XUngrabPointer ####
UngrabPtr.c:33:XUngrabPointer(
Xlib.h:3503:extern int XUngrabPointer(

#### XUngrabServer ####
UngrabSvr.c:33:XUngrabServer (
Xlib.h:3508:extern int XUngrabServer(

#### XUninstallColormap ####
UninsCmap.c:33:XUninstallColormap(
Xlib.h:3512:extern int XUninstallColormap(

#### XUnionRectWithRegion ####
Region.c:170:XUnionRectWithRegion(
Xutil.h:801:extern int XUnionRectWithRegion(

#### XUnionRegion ####
Region.c:186:    return XUnionRegion(&region, source, dest);
Region.c:345:#define ZOpRegion(a,b,c) if (grow) XUnionRegion(a,b,c); \
Region.c:349:#define ZCopyRegion(a,b) XUnionRegion(a,a,b)
Region.c:1143:XUnionRegion(
Region.c:1465:    (void) XUnionRegion(tra,trb,dr);
Xutil.h:807:extern int XUnionRegion(

#### XUnloadFont ####
ClDisplay.c:63:		XUnloadFont (dpy, dpy->cursor_font);
UnldFont.c:33:XUnloadFont(
Xlib.h:3517:extern int XUnloadFont(

#### XUnlockDisplay ####
LockDis.c:75:XUnlockDisplay(
locking.c:205:static void _XUnlockDisplay(
locking.c:552:    dpy->lock_fns->unlock_display = _XUnlockDisplay;
Xlib.h:1743:extern void XUnlockDisplay(

#### XUnmapSubwindows ####
UnmapSubs.c:33:XUnmapSubwindows(
Xlib.h:3522:extern int XUnmapSubwindows(

#### XUnmapWindow ####
UnmapWin.c:33:XUnmapWindow (
Withdraw.c:70:    XUnmapWindow (dpy, w);
Xlib.h:3527:extern int XUnmapWindow(

#### XUnregisterIMInstantiateCallback ####
IMWrap.c:186:XUnregisterIMInstantiateCallback(
Xlib.h:3962:extern Bool XUnregisterIMInstantiateCallback(

#### XUnsetICFocus ####
ICWrap.c:356:XUnsetICFocus(XIC ic)
Xlib.h:3887:extern void XUnsetICFocus(

#### XVaCreateNestedList ####
ICWrap.c:149:XVaCreateNestedList(int dummy, ...)
Xlib.h:3947:extern XVaNestedList XVaCreateNestedList(

#### XVendorRelease ####
Macros.c:119:int XVendorRelease(Display *dpy) { return (VendorRelease(dpy)); }
Xlib.h:3532:extern int XVendorRelease(

#### XVisualIDFromVisual ####
Misc.c:58:VisualID XVisualIDFromVisual(Visual *visual)
Xlib.h:1729:extern VisualID XVisualIDFromVisual(

#### XWMGeometry ####
WMGeom.c:46:XWMGeometry (
Xutil.h:813:extern int XWMGeometry(

#### XWarpPointer ####
WarpPtr.c:33:XWarpPointer(
Xlib.h:3536:extern int XWarpPointer(

#### XWhitePixel ####
Macros.c:72:unsigned long XWhitePixel(Display *dpy, int scr)
Macros.c:189:unsigned long XWhitePixelOfScreen(Screen *s)
Xlib.h:1794:extern unsigned long XWhitePixel(
Xlib.h:1804:extern unsigned long XWhitePixelOfScreen(

#### XWhitePixelOfScreen ####
Macros.c:189:unsigned long XWhitePixelOfScreen(Screen *s)
Xlib.h:1804:extern unsigned long XWhitePixelOfScreen(

#### XWidthMMOfScreen ####
Macros.c:218:int XWidthMMOfScreen(Screen *s) { return (WidthMMOfScreen(s)); }
Xlib.h:3548:extern int XWidthMMOfScreen(

#### XWidthOfScreen ####
Macros.c:214:int XWidthOfScreen(Screen *s) { return (WidthOfScreen(s)); }
Xlib.h:3552:extern int XWidthOfScreen(

#### XWindowEvent ####
WinEvent.c:46:XWindowEvent (
Xlib.h:3556:extern int XWindowEvent(

#### XWithdrawWindow ####
Withdraw.c:65:Status XWithdrawWindow (
Xlib.h:1900:extern Status XWithdrawWindow(

#### XWriteBitmapFile ####
WrBitF.c:87:XWriteBitmapFile(
Xlib.h:3563:extern int XWriteBitmapFile(
Xutil.h:338: * return codes for XReadBitmapFile and XWriteBitmapFile

#### XXorRegion ####
Region.c:1453:XXorRegion(Region sra, Region srb, Region dr)
Xutil.h:827:extern int XXorRegion(

#### XauDisposeAuth ####
AuDispose.c:35:XauDisposeAuth (auth)
AuGetBest.c:159:		    XauDisposeAuth (best);
AuGetBest.c:167:	XauDisposeAuth (entry);
ConnDis.c:1482:    if (authptr) XauDisposeAuth (authptr);

#### XauFileName ####
AuFileName.c:36:XauFileName ()
AuGetBest.c:82:    auth_name = XauFileName ();

#### XauGetBestAuthByAddr ####
AuGetBest.c:52:XauGetBestAuthByAddr (
ConnDis.c:1294:	authptr = XauGetBestAuthByAddr ((unsigned short) family,

#### XauReadAuth ####
AuGetBest.c:114:	entry = XauReadAuth (auth_file);
AuRead.c:97:XauReadAuth (auth_file)

#### XcmsAddColorSpace ####
AddDIC.c:30: *		Source for XcmsAddColorSpace
AddDIC.c:53: *		XcmsAddColorSpace - Add a Device-Independent Color Space
AddDIC.c:58:XcmsAddColorSpace(XcmsColorSpace *pCS)
HVCGcC.c:107:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCGcV.c:98:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCGcVC.c:109:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMnV.c:114:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMxC.c:117:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMxV.c:115:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMxVC.c:217:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMxVs.c:112:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCWpAj.c:95:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
Xcms.h:346:extern Status XcmsAddColorSpace (

#### XcmsAddFunctionSet ####
AddSF.c:30: *		Source for XcmsAddFunctionSet
AddSF.c:52: *		XcmsAddFunctionSet - Add an Screen Color Characterization
AddSF.c:58:XcmsAddFunctionSet(XcmsFunctionSet *pNewFS)
Xcms.h:350:extern Status XcmsAddFunctionSet (

#### XcmsAllocColor ####
cmsAllCol.c:30: *		Source for XcmsAllocColor
cmsAllCol.c:45: *		XcmsAllocColor - Allocate Color
cmsAllCol.c:50:XcmsAllocColor(
cmsAllCol.c:58: *		specification, XcmsAllocColor will convert it to X RGB
SetGetCols.c:74: *			XcmsAllocColor
Xcms.h:354:extern Status XcmsAllocColor (

#### XcmsAllocNamedColor ####
cmsAllNCol.c:30: *		Source for XcmsAllocNamedColor
cmsAllNCol.c:46: *		XcmsAllocNamedColor -
cmsAllNCol.c:51:XcmsAllocNamedColor (
Xcms.h:361:extern Status XcmsAllocNamedColor (

#### XcmsCCCOfColormap ####
cmsAllNCol.c:92:    if ((ccc = XcmsCCCOfColormap(dpy, cmap)) == (XcmsCCC)NULL) {
cmsCmap.c:405: *		XcmsCCCOfColormap
cmsCmap.c:410:XcmsCCCOfColormap(
cmsLkCol.c:89:    if ((ccc = XcmsCCCOfColormap(dpy, cmap)) == (XcmsCCC)NULL) {
GetColor.c:55:    if ((ccc = XcmsCCCOfColormap(dpy, cmap)) != (XcmsCCC)NULL) {
LookupCol.c:53:	if ((ccc = XcmsCCCOfColormap(dpy, cmap)) != (XcmsCCC)NULL) {
ParseCol.c:90:	if ((ccc = XcmsCCCOfColormap(dpy, cmap)) != (XcmsCCC)NULL) {
SetGetCols.c:111:    if ((ccc = XcmsCCCOfColormap(dpy, cmap)) == (XcmsCCC)NULL) {
SetGetCols.c:233:    if ((ccc = XcmsCCCOfColormap(dpy, cmap)) == (XcmsCCC)NULL) {
StNColor.c:53:    if ((ccc = XcmsCCCOfColormap(dpy, cmap)) != (XcmsCCC)NULL) {
Xcms.h:370:extern XcmsCCC XcmsCCCOfColormap (

#### XcmsCIELabClipL ####
LabGcL.c:29: *		Source for XcmsCIELabClipL() gamut compression routine.
LabGcL.c:49: *		XcmsCIELabClipL - Return the closest L*
LabGcL.c:55:XcmsCIELabClipL (
LabGcLC.c:29: *		Source for XcmsCIELabClipLab() gamut
LabGcLC.c:57: *		XcmsCIELabClipLab - Return the closest L* and chroma
LabGcLC.c:63:XcmsCIELabClipLab (
Xcms.h:383:extern Status XcmsCIELabClipL(
Xcms.h:391:extern Status XcmsCIELabClipLab(

#### XcmsCIELabClipLab ####
LabGcLC.c:29: *		Source for XcmsCIELabClipLab() gamut
LabGcLC.c:57: *		XcmsCIELabClipLab - Return the closest L* and chroma
LabGcLC.c:63:XcmsCIELabClipLab (
Xcms.h:391:extern Status XcmsCIELabClipLab(

#### XcmsCIELabClipab ####
LabGcC.c:49: *		XcmsCIELabClipab - Reduce the chroma for a hue and L*
LabGcC.c:55:XcmsCIELabClipab (
Xcms.h:375:extern Status XcmsCIELabClipab(

#### XcmsCIELabColorSpace ####
cmsGlobls.c:55:    &XcmsCIELabColorSpace,
Lab.c:97:XcmsColorSpace	XcmsCIELabColorSpace =
Cv.h:20:extern XcmsColorSpace  XcmsCIELabColorSpace;

#### XcmsCIELabQueryMaxC ####
LabGcC.c:113:	if (XcmsCIELabQueryMaxC(ccc,
LabMxC.c:31: *		Source for the XcmsCIELabQueryMaxC() gamut boundary
LabMxC.c:61: *		XcmsCIELabQueryMaxC - max chroma for a hue_angle and L_star
LabMxC.c:66:XcmsCIELabQueryMaxC(
Xcms.h:399:extern Status XcmsCIELabQueryMaxC (

#### XcmsCIELabQueryMaxL ####
LabGcL.c:119:	if (_XcmsCIELabQueryMaxLCRGB (&myCCC, hue, &Lab_max,
LabGcL.c:162:	    if (XcmsCIELabQueryMaxL(&myCCC, degrees(hue), chroma, pColor)
LabGcLC.c:141:    if (_XcmsCIELabQueryMaxLCRGB (&myCCC, hue, &Lab_max, &rgb_max)
LabMnL.c:119:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxC.c:125:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxL.c:29: *		Source for the XcmsCIELabQueryMaxL() gamut boundary
LabMxL.c:58: *		XcmsCIELabQueryMaxL - Compute max Lstar for a hue and chroma
LabMxL.c:63:XcmsCIELabQueryMaxL(
LabMxL.c:119:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxLC.c:31: *		Source for the XcmsCIELabQueryMaxLC() gamut boundary
LabMxLC.c:67: *		_XcmsCIELabQueryMaxLCRGB - Compute maximum L* and chroma.
LabMxLC.c:72:_XcmsCIELabQueryMaxLCRGB(
LabMxLC.c:168: *		XcmsCIELabQueryMaxLC - Compute maximum L* and chroma.
LabMxLC.c:173:XcmsCIELabQueryMaxLC (
LabMxLC.c:216:    return(_XcmsCIELabQueryMaxLCRGB (&myCCC, radians(hue_angle), pColor_return,
Cv.h:67:_XcmsCIELabQueryMaxLCRGB(
Xcms.h:406:extern Status XcmsCIELabQueryMaxL (
Xcms.h:413:extern Status XcmsCIELabQueryMaxLC (

#### XcmsCIELabQueryMaxLC ####
LabGcL.c:119:	if (_XcmsCIELabQueryMaxLCRGB (&myCCC, hue, &Lab_max,
LabGcLC.c:141:    if (_XcmsCIELabQueryMaxLCRGB (&myCCC, hue, &Lab_max, &rgb_max)
LabMnL.c:119:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxC.c:125:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxL.c:119:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxLC.c:31: *		Source for the XcmsCIELabQueryMaxLC() gamut boundary
LabMxLC.c:67: *		_XcmsCIELabQueryMaxLCRGB - Compute maximum L* and chroma.
LabMxLC.c:72:_XcmsCIELabQueryMaxLCRGB(
LabMxLC.c:168: *		XcmsCIELabQueryMaxLC - Compute maximum L* and chroma.
LabMxLC.c:173:XcmsCIELabQueryMaxLC (
LabMxLC.c:216:    return(_XcmsCIELabQueryMaxLCRGB (&myCCC, radians(hue_angle), pColor_return,
Cv.h:67:_XcmsCIELabQueryMaxLCRGB(
Xcms.h:413:extern Status XcmsCIELabQueryMaxLC (

#### XcmsCIELabQueryMinL ####
LabGcL.c:147:	    if (XcmsCIELabQueryMinL(&myCCC, degrees(hue), chroma, pColor)
LabMnL.c:29: *		Source for the XcmsCIELabQueryMinL() gamut boundary
LabMnL.c:58: *		XcmsCIELabQueryMinL - Compute max Lstar for a hue and chroma
LabMnL.c:63:XcmsCIELabQueryMinL(
Xcms.h:419:extern Status XcmsCIELabQueryMinL (

#### XcmsCIELabToCIEXYZ ####
Lab.c:78:    XcmsCIELabToCIEXYZ,
Lab.c:228: *		XcmsCIELabToCIEXYZ - convert CIELab to CIEXYZ
Lab.c:233:XcmsCIELabToCIEXYZ(
Xcms.h:426:extern Status XcmsCIELabToCIEXYZ (

#### XcmsCIELabWhiteShiftColors ####
LabWpAj.c:55: *		XcmsCIELabWhiteShiftColors
LabWpAj.c:60:XcmsCIELabWhiteShiftColors(
Xcms.h:433:extern Status XcmsCIELabWhiteShiftColors(

#### XcmsCIELuvClipL ####
LuvGcL.c:29: *		Source for XcmsCIELuvClipL() gamut compression routine.
LuvGcL.c:49: *		XcmsCIELuvClipL - Return the closest L*
LuvGcL.c:55:XcmsCIELuvClipL (
LuvGcLC.c:29: *		Source for XcmsCIELuvClipLuv() gamut
LuvGcLC.c:57: *		XcmsCIELuvClipLuv - Return the closest L* and chroma
LuvGcLC.c:63:XcmsCIELuvClipLuv (
Xcms.h:443:extern Status XcmsCIELuvClipL(
Xcms.h:451:extern Status XcmsCIELuvClipLuv(

#### XcmsCIELuvClipLuv ####
LuvGcLC.c:29: *		Source for XcmsCIELuvClipLuv() gamut
LuvGcLC.c:57: *		XcmsCIELuvClipLuv - Return the closest L* and chroma
LuvGcLC.c:63:XcmsCIELuvClipLuv (
Xcms.h:451:extern Status XcmsCIELuvClipLuv(

#### XcmsCIELuvClipuv ####
LuvGcC.c:29: *		Source for XcmsCIELuvClipuv() gamut compression routine.
LuvGcC.c:49: *		XcmsCIELuvClipuv - Reduce the chroma for a hue and L*
LuvGcC.c:55:XcmsCIELuvClipuv (
Xcms.h:459:extern Status XcmsCIELuvClipuv(

#### XcmsCIELuvColorSpace ####
cmsGlobls.c:56:    &XcmsCIELuvColorSpace,
Luv.c:100:XcmsColorSpace	XcmsCIELuvColorSpace =
Cv.h:21:extern XcmsColorSpace  XcmsCIELuvColorSpace;

#### XcmsCIELuvQueryMaxC ####
LuvGcC.c:113:	if (XcmsCIELuvQueryMaxC(ccc,
LuvMxC.c:31: *		Source for the XcmsCIELuvQueryMaxC() gamut boundary
LuvMxC.c:61: *		XcmsCIELuvQueryMaxC - max chroma for a hue_angle and L_star
LuvMxC.c:66:XcmsCIELuvQueryMaxC(
Xcms.h:467:extern Status XcmsCIELuvQueryMaxC (

#### XcmsCIELuvQueryMaxL ####
LuvGcL.c:119:	if (_XcmsCIELuvQueryMaxLCRGB (&myCCC, hue, &Luv_max,
LuvGcL.c:162:	    if (XcmsCIELuvQueryMaxL(&myCCC, degrees(hue), chroma, pColor)
LuvGcLC.c:141:    if (_XcmsCIELuvQueryMaxLCRGB (&myCCC, hue, &Luv_max, &rgb_max)
LuvMnL.c:119:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxC.c:125:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxL.c:29: *		Source for the XcmsCIELuvQueryMaxL() gamut boundary
LuvMxL.c:58: *		XcmsCIELuvQueryMaxL - Compute max Lstar for a hue and chroma
LuvMxL.c:63:XcmsCIELuvQueryMaxL(
LuvMxL.c:119:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxLC.c:31: *		Source for the XcmsCIELuvQueryMaxLC() gamut boundary
LuvMxLC.c:67: *		_XcmsCIELuvQueryMaxLCRGB - Compute maximum L* and chroma.
LuvMxLC.c:72:_XcmsCIELuvQueryMaxLCRGB(
LuvMxLC.c:168: *		XcmsCIELuvQueryMaxLC - Compute maximum L* and chroma.
LuvMxLC.c:173:XcmsCIELuvQueryMaxLC (
LuvMxLC.c:216:    return(_XcmsCIELuvQueryMaxLCRGB (&myCCC, radians(hue_angle), pColor_return,
Cv.h:129:_XcmsCIELuvQueryMaxLCRGB(
Xcms.h:474:extern Status XcmsCIELuvQueryMaxL (
Xcms.h:481:extern Status XcmsCIELuvQueryMaxLC (

#### XcmsCIELuvQueryMaxLC ####
LuvGcL.c:119:	if (_XcmsCIELuvQueryMaxLCRGB (&myCCC, hue, &Luv_max,
LuvGcLC.c:141:    if (_XcmsCIELuvQueryMaxLCRGB (&myCCC, hue, &Luv_max, &rgb_max)
LuvMnL.c:119:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxC.c:125:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxL.c:119:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxLC.c:31: *		Source for the XcmsCIELuvQueryMaxLC() gamut boundary
LuvMxLC.c:67: *		_XcmsCIELuvQueryMaxLCRGB - Compute maximum L* and chroma.
LuvMxLC.c:72:_XcmsCIELuvQueryMaxLCRGB(
LuvMxLC.c:168: *		XcmsCIELuvQueryMaxLC - Compute maximum L* and chroma.
LuvMxLC.c:173:XcmsCIELuvQueryMaxLC (
LuvMxLC.c:216:    return(_XcmsCIELuvQueryMaxLCRGB (&myCCC, radians(hue_angle), pColor_return,
Cv.h:129:_XcmsCIELuvQueryMaxLCRGB(
Xcms.h:481:extern Status XcmsCIELuvQueryMaxLC (

#### XcmsCIELuvQueryMinL ####
LuvGcL.c:147:	    if (XcmsCIELuvQueryMinL(&myCCC, degrees(hue), chroma, pColor)
LuvMnL.c:29: *		Source for the XcmsCIELuvQueryMinL() gamut boundary
LuvMnL.c:58: *		XcmsCIELuvQueryMinL - Compute max Lstar for a hue and chroma
LuvMnL.c:63:XcmsCIELuvQueryMinL(
Xcms.h:487:extern Status XcmsCIELuvQueryMinL (

#### XcmsCIELuvToCIEuvY ####
Luv.c:79:    XcmsCIELuvToCIEuvY,
Luv.c:229: *		XcmsCIELuvToCIEuvY - convert CIELuv to CIEuvY
Luv.c:234:XcmsCIELuvToCIEuvY(
Xcms.h:494:extern Status XcmsCIELuvToCIEuvY (

#### XcmsCIELuvWhiteShiftColors ####
LuvWpAj.c:52: *		XcmsCIELuvWhiteShiftColors
LuvWpAj.c:57:XcmsCIELuvWhiteShiftColors(
Xcms.h:501:extern Status XcmsCIELuvWhiteShiftColors(

#### XcmsCIEXYZColorSpace ####
cmsGlobls.c:52:    &XcmsCIEXYZColorSpace,
XYZ.c:80:XcmsColorSpace	XcmsCIEXYZColorSpace =
Cv.h:17:extern XcmsColorSpace  XcmsCIEXYZColorSpace;

#### XcmsCIEXYZToCIELab ####
Lab.c:86:    XcmsCIEXYZToCIELab,
Lab.c:331: *		XcmsCIEXYZToCIELab - convert CIEXYZ to CIELab
Lab.c:336:XcmsCIEXYZToCIELab(
Xcms.h:511:extern Status XcmsCIEXYZToCIELab (

#### XcmsCIEXYZToCIEuvY ####
HVC.c:120:    XcmsCIEXYZToCIEuvY,
Luv.c:88:    XcmsCIEXYZToCIEuvY,
uvY.c:81:    XcmsCIEXYZToCIEuvY,
uvY.c:338: *		XcmsCIEXYZToCIEuvY - convert CIEXYZ to CIEuvY
uvY.c:343:XcmsCIEXYZToCIEuvY(
Xcms.h:518:extern Status XcmsCIEXYZToCIEuvY (

#### XcmsCIEXYZToCIExyY ####
xyY.c:80:    XcmsCIEXYZToCIExyY,
xyY.c:337: *		XcmsCIEXYZToCIExyY - convert CIEXYZ to CIExyY
xyY.c:343:XcmsCIEXYZToCIExyY(
Xcms.h:525:extern Status XcmsCIEXYZToCIExyY (

#### XcmsCIEXYZToRGBi ####
LRGB.c:138:    (XcmsConversionProc)XcmsCIEXYZToRGBi,
LRGB.c:159:    (XcmsConversionProc)XcmsCIEXYZToRGBi,
LRGB.c:1458: *		XcmsCIEXYZToRGBi - convert CIE XYZ to RGB
LRGB.c:1464:XcmsCIEXYZToRGBi(
Xcms.h:532:extern Status XcmsCIEXYZToRGBi (

#### XcmsCIEuvYColorSpace ####
cmsGlobls.c:53:    &XcmsCIEuvYColorSpace,
uvY.c:93:XcmsColorSpace	XcmsCIEuvYColorSpace =
Cv.h:18:extern XcmsColorSpace  XcmsCIEuvYColorSpace;

#### XcmsCIEuvYToCIELuv ####
Luv.c:89:    XcmsCIEuvYToCIELuv,
Luv.c:321: *		XcmsCIEuvYToCIELuv - convert CIEuvY to CIELuv
Luv.c:326:XcmsCIEuvYToCIELuv(
Xcms.h:539:extern Status XcmsCIEuvYToCIELuv (

#### XcmsCIEuvYToCIEXYZ ####
HVC.c:112:    XcmsCIEuvYToCIEXYZ,
Luv.c:80:    XcmsCIEuvYToCIEXYZ,
uvY.c:73:    XcmsCIEuvYToCIEXYZ,
uvY.c:223: *		XcmsCIEuvYToCIEXYZ - convert CIEuvY to CIEXYZ
uvY.c:228:XcmsCIEuvYToCIEXYZ(
Xcms.h:546:extern Status XcmsCIEuvYToCIEXYZ (

#### XcmsCIEuvYToTekHVC ####
HVC.c:121:    XcmsCIEuvYToTekHVC,
HVC.c:446: *		XcmsCIEuvYToTekHVC - convert CIEuvY to TekHVC
HVC.c:451:XcmsCIEuvYToTekHVC(
Xcms.h:553:extern Status XcmsCIEuvYToTekHVC (

#### XcmsCIExyYColorSpace ####
cmsGlobls.c:54:    &XcmsCIExyYColorSpace,
xyY.c:92:XcmsColorSpace	XcmsCIExyYColorSpace =
Cv.h:19:extern XcmsColorSpace  XcmsCIExyYColorSpace;

#### XcmsCIExyYToCIEXYZ ####
xyY.c:72:    XcmsCIExyYToCIEXYZ,
xyY.c:231: *		XcmsCIExyYToCIEXYZ - convert CIExyY to CIEXYZ
xyY.c:236:XcmsCIExyYToCIEXYZ(
Xcms.h:560:extern Status XcmsCIExyYToCIEXYZ (

#### XcmsClientWhitePointOfCCC ####
OfCCC.c:144: *		XcmsClientWhitePointOfCCC
OfCCC.c:150:XcmsClientWhitePointOfCCC(
Xcms.h:567:extern XcmsColor *XcmsClientWhitePointOfCCC (

#### XcmsConvertColors ####
cmsAllNCol.c:112:    if ((retval2 = XcmsConvertColors(ccc, &tmpColor,
cmsAllNCol.c:137:	if (XcmsConvertColors(ccc, pColor_scrn_return, 1, result_format,
cmsAllNCol.c:187:	if (XcmsConvertColors(ccc, pColor_exact_return, 1, result_format,
cmsAllNCol.c:191:	if (XcmsConvertColors(ccc, pColor_scrn_return, 1, result_format,
cmsColNm.c:887:	    return(XcmsConvertColors(ccc, pColor_exact_return, 1,
cmsLkCol.c:117:    } else if ((retval2 = XcmsConvertColors(ccc, pColor_scrn_return, 1,
cmsLkCol.c:135:	if (XcmsConvertColors(ccc, pColor_scrn_return, 1, result_format,
cmsLkCol.c:182:	if (XcmsConvertColors(ccc, pColor_exact_return, 1, result_format,
cmsLkCol.c:186:	if (XcmsConvertColors(ccc, pColor_scrn_return, 1, result_format,
CvCols.c:710: *		XcmsConvertColors - Convert XcmsColor structures
CvCols.c:715:XcmsConvertColors(
CvColW.c:53: *		_XcmsConvertColorsWithWhitePt - Convert XcmsColor structures
CvColW.c:58:_XcmsConvertColorsWithWhitePt(
HVCGcVC.c:215:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, pColor,
HVCMxC.c:178:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
HVCMxV.c:187:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
HVCMxVC.c:124:    if ((_XcmsConvertColorsWithWhitePt(ccc, &tmp,
HVCMxVC.c:157:    if (_XcmsConvertColorsWithWhitePt(ccc, &tmp,
HVCMxVs.c:150:	if (_XcmsConvertColorsWithWhitePt(&myCCC, pHVC,
HVCWpAj.c:104:    if (_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtFrom,
HVCWpAj.c:112:    return(_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtTo,
LabGcLC.c:181:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, pColor,
LabMnL.c:170:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LabMxC.c:166:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LabMxL.c:170:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LabMxLC.c:116:    if ((_XcmsConvertColorsWithWhitePt(ccc, &tmp, ScreenWhitePointOfCCC(ccc),
LabMxLC.c:149:    if (_XcmsConvertColorsWithWhitePt(ccc, &tmp,
LabWpAj.c:87:    if (_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtFrom,
LabWpAj.c:95:    return(_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out,
LuvGcLC.c:181:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, pColor,
LuvMnL.c:170:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LuvMxC.c:167:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LuvMxL.c:170:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LuvMxLC.c:116:    if ((_XcmsConvertColorsWithWhitePt(ccc, &tmp, ScreenWhitePointOfCCC(ccc),
LuvMxLC.c:149:    if (_XcmsConvertColorsWithWhitePt(ccc, &tmp,
LuvWpAj.c:86:    if (_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtFrom,
LuvWpAj.c:94:    return(_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtTo,
QBlack.c:79:    if (XcmsConvertColors(ccc, &tmp, 1, target_format, NULL) != XcmsSuccess) {
QBlue.c:79:    if (XcmsConvertColors(ccc, &tmp, 1, target_format, NULL) != XcmsSuccess) {
QGreen.c:79:    if (XcmsConvertColors(ccc, &tmp, 1, target_format, NULL) != XcmsSuccess) {
QRed.c:79:    if (XcmsConvertColors(ccc, &tmp, 1, target_format, NULL) != XcmsSuccess) {
QWhite.c:79:    if (XcmsConvertColors(ccc, &tmp, 1, target_format, NULL) != XcmsSuccess) {
SetGetCols.c:122:    if ((retval = XcmsConvertColors(ccc, pColors_in_out, 1, XcmsRGBFormat,
SetGetCols.c:163:	if (XcmsConvertColors(ccc, pColors_in_out, 1, result_format,
SetGetCols.c:252:    if ((retval = XcmsConvertColors(ccc, pColors_in_out, nColors, XcmsRGBFormat,
SetGetCols.c:292:	if (XcmsConvertColors(ccc, pColors_in_out, nColors, result_format,
Cv.h:73:_XcmsConvertColorsWithWhitePt(
Xcms.h:571:extern Status XcmsConvertColors (

#### XcmsCreateCCC ####
AddSF.c:76: *		XcmsCreateCCC().  If not, XcmsCCC structures created
CCC.c:82: *		XcmsCreateCCC
CCC.c:88:XcmsCreateCCC(
CCC.c:259: *		that was created with XcmsCreateCCC().
cmsCmap.c:109:	    pRec->ccc = XcmsCreateCCC(
cmsCmap.c:202:	    pRec->ccc = XcmsCreateCCC(
cmsCmap.c:442:	    return(pRec->ccc = XcmsCreateCCC(
cmsCmap.c:456:			return(pRec->ccc = XcmsCreateCCC(
cmsInt.c:321:	 * for the latter (see XcmsCreateCCC).  The ones created
Xcms.h:579:extern XcmsCCC XcmsCreateCCC (

#### XcmsDefaultCCC ####
CCC.c:108:    XcmsCCC pDefaultCCC = XcmsDefaultCCC(dpy, screenNumber);
CCC.c:168: *		XcmsDefaultCCC
CCC.c:173:XcmsDefaultCCC(
cmsInt.c:205:	 * Note that the XcmsDefaultCCC routine calls _XcmsInitScrnInto
Xcms.h:590:extern XcmsCCC XcmsDefaultCCC (

#### XcmsDisplayOfCCC ####
OfCCC.c:52: *		XcmsDisplayOfCCC
OfCCC.c:58:XcmsDisplayOfCCC(
Xcms.h:595:extern Display *XcmsDisplayOfCCC (

#### XcmsFormatOfPrefix ####
AddDIC.c:66: *		structures between clients!  Use the routines XcmsFormatOfPrefix()
AddSF.c:67: *		across clients!  Use the routines XcmsFormatOfPrefix()
cmsColNm.c:802: *		    This routine is also used in XcmsFormatOfPrefix.
IdOfPr.c:30: *		Source for XcmsFormatOfPrefix()
IdOfPr.c:45: *		XcmsFormatOfPrefix
IdOfPr.c:50:XcmsFormatOfPrefix(char *prefix)
Xcms.h:599:extern XcmsColorFormat XcmsFormatOfPrefix (

#### XcmsFreeCCC ####
CCC.c:250: *		XcmsFreeCCC
CCC.c:255:XcmsFreeCCC(XcmsCCC ccc)
cmsCmap.c:352:	    XcmsFreeCCC(pRec->ccc);
cmsCmap.c:387:	    XcmsFreeCCC(pRecFree->ccc);
cmsInt.c:241:     *		Do not use XcmsFreeCCC here because it will not free
Xcms.h:603:extern void XcmsFreeCCC (

#### XcmsLinearRGBFunctionSet ####
cmsGlobls.c:87:	&XcmsLinearRGBFunctionSet,
HVCGcC.c:114:	    FunctionSetOfCCC(ccc) != (XPointer) &XcmsLinearRGBFunctionSet) {
HVCGcV.c:119:	    FunctionSetOfCCC(ccc) != (XPointer) &XcmsLinearRGBFunctionSet) {
HVCGcVC.c:130:	    FunctionSetOfCCC(ccc) != (XPointer) &XcmsLinearRGBFunctionSet) {
LRGB.c:209:XcmsFunctionSet	XcmsLinearRGBFunctionSet =
LRGB.c:790:    pPerScrnInfo->functionSet = (XPointer) &XcmsLinearRGBFunctionSet;
LRGB.c:1838:    pPerScrnInfo->functionSet = (XPointer)&XcmsLinearRGBFunctionSet;
Cv.h:31:extern XcmsFunctionSet XcmsLinearRGBFunctionSet;

#### XcmsLookupColor ####
cmsColNm.c:29: *		Source for _XcmsLookupColorName().
cmsColNm.c:364: *		_XcmsLookupColorName - Lookup DB entry for a color name
cmsColNm.c:369:_XcmsLookupColorName(
cmsColNm.c:843: *		The XcmsLookupColor function finds the color specification
cmsColNm.c:904:    retval = _XcmsLookupColorName(ccc, color_string, pColor_exact_return);
cmsColNm.c:973:	if (_XcmsLookupColorName(ccc, &strptr, &dbWhitePt) != 1) {
cmsLkCol.c:30: *		Source for XcmsLookupColor
cmsLkCol.c:46: *		XcmsLookupColor -
cmsLkCol.c:51:XcmsLookupColor (
cmsLkCol.c:60: *		The XcmsLookupColor function finds the color specification
Xcms.h:607:extern Status XcmsLookupColor (

#### XcmsPrefixOfFormat ####
AddDIC.c:67: *		and XcmsPrefixOfFormat() appropriately.
AddSF.c:68: *		and XcmsPrefixOfFormat() appropriately.
PrOfId.c:30: *		Source for XcmsPrefixOfFormat()
PrOfId.c:50:XcmsPrefixOfFormat(
Xcms.h:616:extern char *XcmsPrefixOfFormat (

#### XcmsQueryBlack ####
QBlack.c:52: *		XcmsQueryBlack
QBlack.c:58:XcmsQueryBlack(
Xcms.h:620:extern Status XcmsQueryBlack (

#### XcmsQueryBlue ####
QBlue.c:52: *		XcmsQueryBlue
QBlue.c:58:XcmsQueryBlue(
Xcms.h:626:extern Status XcmsQueryBlue (

#### XcmsQueryColor ####
QuCol.c:30: *		Source for XcmsQueryColors
QuCol.c:51: *		XcmsQueryColor - Query Color
QuCol.c:56:XcmsQueryColor(
QuCols.c:30: *		Source for XcmsQueryColors
QuCols.c:50: *		XcmsQueryColors - Query Colors
QuCols.c:55:XcmsQueryColors(
SetGetCols.c:75: *			XcmsQueryColor
SetGetCols.c:193: *			XcmsQueryColors
Xcms.h:632:extern Status XcmsQueryColor (
Xcms.h:639:extern Status XcmsQueryColors (

#### XcmsQueryColors ####
QuCol.c:30: *		Source for XcmsQueryColors
QuCols.c:30: *		Source for XcmsQueryColors
QuCols.c:50: *		XcmsQueryColors - Query Colors
QuCols.c:55:XcmsQueryColors(
SetGetCols.c:193: *			XcmsQueryColors
Xcms.h:639:extern Status XcmsQueryColors (

#### XcmsQueryGreen ####
QGreen.c:52: *		XcmsQueryGreen
QGreen.c:58:XcmsQueryGreen(
Xcms.h:647:extern Status XcmsQueryGreen (

#### XcmsQueryRed ####
QRed.c:52: *		XcmsQueryRed
QRed.c:58:XcmsQueryRed(
Xcms.h:653:extern Status XcmsQueryRed (

#### XcmsQueryWhite ####
QWhite.c:52: *		XcmsQueryWhite
QWhite.c:58:XcmsQueryWhite(
Xcms.h:659:extern Status XcmsQueryWhite (

#### XcmsRGBColorSpace ####
cmsGlobls.c:72:    &XcmsRGBColorSpace,
LRGB.c:179:XcmsColorSpace	XcmsRGBColorSpace =
LRGB.c:194:    &XcmsRGBColorSpace,
Cv.h:22:extern XcmsColorSpace  XcmsRGBColorSpace;

#### XcmsRGBToRGBi ####
LRGB.c:127:    (XcmsConversionProc)XcmsRGBToRGBi,
LRGB.c:1716: *		XcmsRGBToRGBi
LRGB.c:1722:XcmsRGBToRGBi(
Xcms.h:679:extern Status XcmsRGBToRGBi (

#### XcmsRGBiColorSpace ####
cmsGlobls.c:73:    &XcmsRGBiColorSpace,
LRGB.c:166:XcmsColorSpace	XcmsRGBiColorSpace =
LRGB.c:195:    &XcmsRGBiColorSpace,
Cv.h:23:extern XcmsColorSpace  XcmsRGBiColorSpace;

#### XcmsRGBiToCIEXYZ ####
LRGB.c:128:    (XcmsConversionProc)XcmsRGBiToCIEXYZ,
LRGB.c:149:    (XcmsConversionProc)XcmsRGBiToCIEXYZ,
LRGB.c:1586:XcmsRGBiToCIEXYZ(
Xcms.h:665:extern Status XcmsRGBiToCIEXYZ (

#### XcmsRGBiToRGB ####
LRGB.c:139:    (XcmsConversionProc)XcmsRGBiToRGB,
LRGB.c:1633: *		XcmsRGBiToRGB
LRGB.c:1639:XcmsRGBiToRGB(
Xcms.h:672:extern Status XcmsRGBiToRGB (

#### XcmsScreenNumberOfCCC ####
OfCCC.c:98: *		XcmsScreenNumberOfCCC
OfCCC.c:104:XcmsScreenNumberOfCCC(
Xcms.h:686:extern int XcmsScreenNumberOfCCC (

#### XcmsScreenWhitePointOfCCC ####
OfCCC.c:121: *		XcmsScreenWhitePointOfCCC
OfCCC.c:127:XcmsScreenWhitePointOfCCC(
Xcms.h:690:extern XcmsColor *XcmsScreenWhitePointOfCCC (

#### XcmsSetCCCOfColormap ####
cmsCmap.c:478:XcmsCCC XcmsSetCCCOfColormap(
Xcms.h:694:extern XcmsCCC XcmsSetCCCOfColormap(

#### XcmsSetCompressionProc ####
SetCCC.c:85: *		XcmsSetCompressionProc
SetCCC.c:91:XcmsSetCompressionProc(
Xcms.h:700:extern XcmsCompressionProc XcmsSetCompressionProc (

#### XcmsSetWhiteAdjustProc ####
SetCCC.c:114: *		XcmsSetWhiteAdjustProc
SetCCC.c:120:XcmsSetWhiteAdjustProc(
Xcms.h:706:extern XcmsWhiteAdjustProc XcmsSetWhiteAdjustProc (

#### XcmsSetWhitePoint ####
SetCCC.c:52: *		XcmsSetWhitePoint
SetCCC.c:58:XcmsSetWhitePoint(
Xcms.h:712:extern Status XcmsSetWhitePoint (

#### XcmsStoreColor ####
SetGetCols.c:76: *			XcmsStoreColor
SetGetCols.c:194: *			XcmsStoreColors
StCol.c:30: *		Source for XcmsStoreColor
StCol.c:51: *		XcmsStoreColor - Store Color
StCol.c:56:XcmsStoreColor(
StCols.c:30: *		Source for XcmsStoreColors
StCols.c:51: *		XcmsStoreColors - Store Colors
StCols.c:56:XcmsStoreColors(
Xcms.h:717:extern Status XcmsStoreColor (
Xcms.h:723:extern Status XcmsStoreColors (

#### XcmsStoreColors ####
SetGetCols.c:194: *			XcmsStoreColors
StCols.c:30: *		Source for XcmsStoreColors
StCols.c:51: *		XcmsStoreColors - Store Colors
StCols.c:56:XcmsStoreColors(
Xcms.h:723:extern Status XcmsStoreColors (

#### XcmsTekHVCClipC ####
cmsInt.c:46:#  define XCMSCOMPPROC	XcmsTekHVCClipC
HVCGcC.c:42: *		Source for XcmsTekHVCClipC() gamut compression routine.
HVCGcC.c:62: *		XcmsTekHVCClipC - Reduce the chroma for a hue and value
HVCGcC.c:68:XcmsTekHVCClipC (
Xcms.h:731:extern Status XcmsTekHVCClipC(

#### XcmsTekHVCClipV ####
HVCGcV.c:42: *		Source for XcmsTekHVCClipV() gamut compression routine.
HVCGcV.c:62: *		XcmsTekHVCClipV - Return the closest value
HVCGcV.c:68:XcmsTekHVCClipV (
HVCGcVC.c:42: *		Source for XcmsTekHVCClipVC() gamut
HVCGcVC.c:70: *		XcmsTekHVCClipVC - Return the closest value and chroma
HVCGcVC.c:76:XcmsTekHVCClipVC (
Xcms.h:739:extern Status XcmsTekHVCClipV(
Xcms.h:747:extern Status XcmsTekHVCClipVC(

#### XcmsTekHVCClipVC ####
HVCGcVC.c:42: *		Source for XcmsTekHVCClipVC() gamut
HVCGcVC.c:70: *		XcmsTekHVCClipVC - Return the closest value and chroma
HVCGcVC.c:76:XcmsTekHVCClipVC (
Xcms.h:747:extern Status XcmsTekHVCClipVC(

#### XcmsTekHVCColorSpace ####
cmsGlobls.c:57:    &XcmsTekHVCColorSpace,
HVC.c:132:XcmsColorSpace	XcmsTekHVCColorSpace =
HVCGcC.c:107:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCGcV.c:98:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCGcVC.c:109:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMnV.c:114:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMxC.c:117:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMxV.c:115:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMxVC.c:217:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCMxVs.c:112:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
HVCWpAj.c:95:    if (XcmsAddColorSpace(&XcmsTekHVCColorSpace) == XcmsFailure) {
Cv.h:16:extern XcmsColorSpace  XcmsTekHVCColorSpace;

#### XcmsTekHVCQueryMaxC ####
HVCGcC.c:135:	if (XcmsTekHVCQueryMaxC(ccc,
HVCMxC.c:42: *		Source for the XcmsTekHVCQueryMaxC() gamut boudary
HVCMxC.c:70: *		XcmsTekHVCQueryMaxC - Compute the maximum chroma for a hue and value
HVCMxC.c:75:XcmsTekHVCQueryMaxC(
Xcms.h:755:extern Status XcmsTekHVCQueryMaxC (

#### XcmsTekHVCQueryMaxV ####
HVCGcV.c:140:	if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, hvc_max.spec.TekHVC.H, &hvc_max,
HVCGcV.c:186:	    if (XcmsTekHVCQueryMaxV(&myCCC,
HVCGcVC.c:158:	if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, hvc_max.spec.TekHVC.H, &hvc_max,
HVCMnV.c:138:    if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, max_vc.spec.TekHVC.H, &max_vc,
HVCMxC.c:139:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, hue, &max_vc, &rgb_saved)
HVCMxV.c:42: *		Source for the XcmsTekHVCQueryMaxV() gamut boundary
HVCMxV.c:70: *		XcmsTekHVCQueryMaxV - Compute maximum value for a hue and chroma
HVCMxV.c:75:XcmsTekHVCQueryMaxV(
HVCMxV.c:138:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, max_vc.spec.TekHVC.H, &max_vc, &rgb_saved)
HVCMxVC.c:42: *		Source for the XcmsTekHVCQueryMaxVC() gamut boundary
HVCMxVC.c:73: *		_XcmsTekHVCQueryMaxVCRGB - Compute maximum value/chroma.
HVCMxVC.c:78:_XcmsTekHVCQueryMaxVCRGB(
HVCMxVC.c:178: *		XcmsTekHVCQueryMaxVC - Compute maximum value and chroma.
HVCMxVC.c:183:XcmsTekHVCQueryMaxVC (
HVCMxVC.c:233:    return(_XcmsTekHVCQueryMaxVCRGB (&myCCC, hue, pColor_return,
HVCMxVs.c:42: *		Source for the XcmsTekHVCQueryMaxVSamples() gamut boundary
HVCMxVs.c:62: *		XcmsTekHVCQueryMaxVSamples - Compute a set of value/chroma
HVCMxVs.c:68:XcmsTekHVCQueryMaxVSamples(
HVCMxVs.c:135:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, pColor_in_out->spec.TekHVC.H,
Cv.h:61:_XcmsTekHVCQueryMaxVCRGB(
Xcms.h:762:extern Status XcmsTekHVCQueryMaxV (
Xcms.h:769:extern Status XcmsTekHVCQueryMaxVC (
Xcms.h:775:extern Status XcmsTekHVCQueryMaxVSamples (

#### XcmsTekHVCQueryMaxVC ####
HVCGcV.c:140:	if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, hvc_max.spec.TekHVC.H, &hvc_max,
HVCGcVC.c:158:	if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, hvc_max.spec.TekHVC.H, &hvc_max,
HVCMnV.c:138:    if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, max_vc.spec.TekHVC.H, &max_vc,
HVCMxC.c:139:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, hue, &max_vc, &rgb_saved)
HVCMxV.c:138:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, max_vc.spec.TekHVC.H, &max_vc, &rgb_saved)
HVCMxVC.c:42: *		Source for the XcmsTekHVCQueryMaxVC() gamut boundary
HVCMxVC.c:73: *		_XcmsTekHVCQueryMaxVCRGB - Compute maximum value/chroma.
HVCMxVC.c:78:_XcmsTekHVCQueryMaxVCRGB(
HVCMxVC.c:178: *		XcmsTekHVCQueryMaxVC - Compute maximum value and chroma.
HVCMxVC.c:183:XcmsTekHVCQueryMaxVC (
HVCMxVC.c:233:    return(_XcmsTekHVCQueryMaxVCRGB (&myCCC, hue, pColor_return,
HVCMxVs.c:135:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, pColor_in_out->spec.TekHVC.H,
Cv.h:61:_XcmsTekHVCQueryMaxVCRGB(
Xcms.h:769:extern Status XcmsTekHVCQueryMaxVC (

#### XcmsTekHVCQueryMaxVSamples ####
HVCMxVs.c:42: *		Source for the XcmsTekHVCQueryMaxVSamples() gamut boundary
HVCMxVs.c:62: *		XcmsTekHVCQueryMaxVSamples - Compute a set of value/chroma
HVCMxVs.c:68:XcmsTekHVCQueryMaxVSamples(
Xcms.h:775:extern Status XcmsTekHVCQueryMaxVSamples (

#### XcmsTekHVCQueryMinV ####
HVCMnV.c:42: *		Source for XcmsTekHVCQueryMinV gamut boundary querying routine.
HVCMnV.c:67: *		XcmsTekHVCQueryMinV - Compute minimum value for hue and chroma
HVCMnV.c:72:XcmsTekHVCQueryMinV (
Xcms.h:782:extern Status XcmsTekHVCQueryMinV (

#### XcmsTekHVCToCIEuvY ####
HVC.c:111:    XcmsTekHVCToCIEuvY,
HVC.c:325: *		XcmsTekHVCToCIEuvY - convert TekHVC to CIEuvY
HVC.c:330:XcmsTekHVCToCIEuvY(
Xcms.h:789:extern Status XcmsTekHVCToCIEuvY (

#### XcmsTekHVCWhiteShiftColors ####
HVCWpAj.c:63: *		XcmsTekHVCWhiteShiftColors
HVCWpAj.c:68:XcmsTekHVCWhiteShiftColors(
Xcms.h:796:extern Status XcmsTekHVCWhiteShiftColors(

#### XcmsUNDEFINEDColorSpace ####
cmsGlobls.c:58:    &XcmsUNDEFINEDColorSpace,
UNDEFINED.c:80:XcmsColorSpace	XcmsUNDEFINEDColorSpace =
Cv.h:15:extern XcmsColorSpace  XcmsUNDEFINEDColorSpace;

#### XcmsVisualOfCCC ####
OfCCC.c:75: *		XcmsVisualOfCCC
OfCCC.c:81:XcmsVisualOfCCC(
Xcms.h:806:extern Visual *XcmsVisualOfCCC (

#### XkbAddDeviceLedInfo ####
XKBAlloc.c:343:XkbAddDeviceLedInfo(XkbDeviceInfoPtr devi, unsigned ledClass, unsigned ledId)
XKBExtDev.c:124:    devli = XkbAddDeviceLedInfo(devi, wireli->ledClass, wireli->ledID);
XKBlib.h:1024:extern	XkbDeviceLedInfoPtr	XkbAddDeviceLedInfo(

#### XkbAddGeomColor ####
XKBGAlloc.c:714:XkbAddGeomColor(XkbGeometryPtr geom, char *spec, unsigned int pixel)
XKBGeom.c:322:            else if (XkbAddGeomColor(geom, spec, geom->num_colors) == NULL)

#### XkbAddGeomDoodad ####
XKBGAlloc.c:861:XkbAddGeomDoodad(XkbGeometryPtr geom, XkbSectionPtr section, Atom name)
XKBGeom.c:411:    doodad = XkbAddGeomDoodad(geom, section, doodadWire->any.name);

#### XkbAddGeomKey ####
XKBGAlloc.c:686:XkbAddGeomKeyAlias(XkbGeometryPtr geom, char *aliasStr, char *realStr)
XKBGAlloc.c:787:XkbAddGeomKey(XkbRowPtr row)
XKBGeom.c:556:                        key = XkbAddGeomKey(row);

#### XkbAddGeomKeyAlias ####
XKBGAlloc.c:686:XkbAddGeomKeyAlias(XkbGeometryPtr geom, char *aliasStr, char *realStr)

#### XkbAddGeomOutline ####
XKBGAlloc.c:741:XkbAddGeomOutline(XkbShapePtr shape, int sz_points)
XKBGeom.c:368:            ol = XkbAddGeomOutline(shape, olWire->nPoints);

#### XkbAddGeomOverlay ####
XKBGAlloc.c:899:XkbAddGeomOverlayKey(XkbOverlayPtr overlay,
XKBGAlloc.c:935:XkbAddGeomOverlayRow(XkbOverlayPtr overlay, int row_under, int sz_keys)
XKBGAlloc.c:967:XkbAddGeomOverlay(XkbSectionPtr section, Atom name, int sz_rows)
XKBGeom.c:464:    ol = XkbAddGeomOverlay(section, olWire->name, olWire->nRows);
XKBGeom.c:477:        row = XkbAddGeomOverlayRow(ol, rowWire->rowUnder, rowWire->nKeys);

#### XkbAddGeomOverlayKey ####
XKBGAlloc.c:899:XkbAddGeomOverlayKey(XkbOverlayPtr overlay,

#### XkbAddGeomOverlayRow ####
XKBGAlloc.c:935:XkbAddGeomOverlayRow(XkbOverlayPtr overlay, int row_under, int sz_keys)
XKBGeom.c:477:        row = XkbAddGeomOverlayRow(ol, rowWire->rowUnder, rowWire->nKeys);

#### XkbAddGeomProperty ####
XKBGAlloc.c:653:XkbAddGeomProperty(XkbGeometryPtr geom, char *name, char *value)
XKBGeom.c:271:            ok = ok && (XkbAddGeomProperty(geom, name, value) != NULL);

#### XkbAddGeomRow ####
XKBGAlloc.c:801:XkbAddGeomRow(XkbSectionPtr section, int sz_keys)
XKBGeom.c:539:                row = XkbAddGeomRow(section, rowWire->nKeys);

#### XkbAddGeomSection ####
XKBGAlloc.c:819:XkbAddGeomSection(XkbGeometryPtr geom,
XKBGeom.c:517:        section = XkbAddGeomSection(geom, sectionWire->name, sectionWire->nRows,

#### XkbAddGeomShape ####
XKBGAlloc.c:760:XkbAddGeomShape(XkbGeometryPtr geom, Atom name, int sz_outlines)
XKBGeom.c:355:        shape = XkbAddGeomShape(geom, shapeWire->name, shapeWire->nOutlines);

#### XkbAddKeyType ####
XKBMAlloc.c:279:XkbAddKeyType(XkbDescPtr xkb,
XKBlib.h:676:extern	XkbKeyTypePtr	XkbAddKeyType(

#### XkbAllocClientMap ####
XKBGetMap.c:45:        else if (XkbAllocClientMap(xkb, XkbKeyTypesMask, n) != Success)
XKBGetMap.c:414:            (XkbAllocClientMap(xkb, XkbModifierMapMask, 0) != Success)) {
XKBGetMap.c:510:        if (mask && (XkbAllocClientMap(xkb, mask, rep->nTypes) != Success))
XKBMAlloc.c:42:XkbAllocClientMap(XkbDescPtr xkb, unsigned which, unsigned nTotalTypes)
XKBMAlloc.c:55:        fprintf(stderr, "bad keycode (%d,%d) in XkbAllocClientMap\n",
XKBMAlloc.c:305:        if (XkbAllocClientMap(xkb, XkbKeyTypesMask, tmp) != Success)
XKBMAlloc.c:331:        (XkbAllocClientMap(xkb, XkbKeyTypesMask, map->num_types + 1) !=
XKBMisc.c:98:    rtrn = XkbAllocClientMap(xkb, XkbKeyTypesMask, XkbNumRequiredTypes);
XKBlib.h:652:extern	Status XkbAllocClientMap(

#### XkbAllocCompatMap ####
XKBAlloc.c:44:XkbAllocCompatMap(XkbDescPtr xkb, unsigned which, unsigned nSI)
XKBCompat.c:53:        (XkbAllocCompatMap(xkb, XkbAllCompatMask, i) != Success))
XKBlib.h:802:extern	Status	XkbAllocCompatMap(

#### XkbAllocControls ####
XKBAlloc.c:252:XkbAllocControls(XkbDescPtr xkb, unsigned which)
XKBlib.h:770:extern	Status	XkbAllocControls(

#### XkbAllocDeviceInfo ####
XKBAlloc.c:418:XkbAllocDeviceInfo(unsigned deviceSpec, unsigned nButtons, unsigned szLeds)
XKBExtDev.c:262:    devi = XkbAllocDeviceInfo(rep.deviceID, rep.totalBtns, rep.nDeviceLedFBs);
XKBlib.h:1035:extern	XkbDeviceInfoPtr	XkbAllocDeviceInfo(

#### XkbAllocGeomColors ####
XKBGAlloc.c:529:XkbAllocGeomColors(XkbGeometryPtr geom, int nColors)
XKBGeom.c:315:    if ((rtrn = XkbAllocGeomColors(geom, rep->nColors)) == Success) {

#### XkbAllocGeomDoodads ####
XKBGAlloc.c:571:XkbAllocGeomDoodads(XkbGeometryPtr geom, int nDoodads)
XKBGeom.c:597:    if ((rtrn = XkbAllocGeomDoodads(geom, rep->nDoodads)) != Success)

#### XkbAllocGeomKeyAliases ####
XKBGAlloc.c:535:XkbAllocGeomKeyAliases(XkbGeometryPtr geom, int nKeyAliases)
XKBGeom.c:293:    if ((rtrn = XkbAllocGeomKeyAliases(geom, rep->nKeyAliases)) == Success) {

#### XkbAllocGeomKeys ####
XKBGAlloc.c:601:XkbAllocGeomKeys(XkbRowPtr row, int nKeys)

#### XkbAllocGeomOutlines ####
XKBGAlloc.c:583:XkbAllocGeomOutlines(XkbShapePtr shape, int nOL)

#### XkbAllocGeomOverlayKeys ####
XKBGAlloc.c:565:XkbAllocGeomOverlayKeys(XkbOverlayRowPtr row, int nKeys)

#### XkbAllocGeomOverlayRows ####
XKBGAlloc.c:559:XkbAllocGeomOverlayRows(XkbOverlayPtr overlay, int nRows)

#### XkbAllocGeomOverlays ####
XKBGAlloc.c:553:XkbAllocGeomOverlays(XkbSectionPtr section, int nOverlays)

#### XkbAllocGeomPoints ####
XKBGAlloc.c:595:XkbAllocGeomPoints(XkbOutlinePtr ol, int nPts)

#### XkbAllocGeomProps ####
XKBGAlloc.c:523:XkbAllocGeomProps(XkbGeometryPtr geom, int nProps)
XKBGeom.c:262:    if ((rtrn = XkbAllocGeomProps(geom, rep->nProperties)) == Success) {

#### XkbAllocGeomRows ####
XKBGAlloc.c:589:XkbAllocGeomRows(XkbSectionPtr section, int nRows)

#### XkbAllocGeomSectionDoodads ####
XKBGAlloc.c:577:XkbAllocGeomSectionDoodads(XkbSectionPtr section, int nDoodads)

#### XkbAllocGeomSections ####
XKBGAlloc.c:547:XkbAllocGeomSections(XkbGeometryPtr geom, int nSections)
XKBGeom.c:510:    if ((rtrn = XkbAllocGeomSections(geom, rep->nSections)) != Success)

#### XkbAllocGeomShapes ####
XKBGAlloc.c:541:XkbAllocGeomShapes(XkbGeometryPtr geom, int nShapes)
XKBGeom.c:344:    if ((rtrn = XkbAllocGeomShapes(geom, rep->nShapes)) != Success)

#### XkbAllocGeometry ####
XKBGAlloc.c:607:XkbAllocGeometry(XkbDescPtr xkb, XkbGeometrySizesPtr sizes)

#### XkbAllocIndicatorMaps ####
XKBAlloc.c:279:XkbAllocIndicatorMaps(XkbDescPtr xkb)
XKBleds.c:69:    if ((!xkb->indicators) && (XkbAllocIndicatorMaps(xkb) != Success))
XKBlib.h:684:extern	Status XkbAllocIndicatorMaps(

#### XkbAllocKeyboard ####
XKBAlloc.c:304:XkbAllocKeyboard(void)
XKBlib.h:642:extern	XkbDescPtr XkbAllocKeyboard(

#### XkbAllocNames ####
XKBAlloc.c:118:XkbAllocNames(XkbDescPtr xkb, unsigned which, int nTotalRG, int nTotalAliases)
XKBNames.c:68:        (XkbAllocNames(xkb, rep->which,
XKBNames.c:197:        if (XkbAllocNames(xkb, XkbKeyAliasesMask, 0, rep->nKeyAliases) !=
XKBlib.h:834:extern	Status XkbAllocNames(

#### XkbAllocServerMap ####
XKBGetMap.c:447:            (XkbAllocServerMap(xkb, XkbVirtualModMapMask, 0) != Success)) {
XKBGetMap.c:515:        if (mask && (XkbAllocServerMap(xkb, mask, rep->totalActs) != Success))
XKBMAlloc.c:129:XkbAllocServerMap(XkbDescPtr xkb, unsigned which, unsigned nNewActions)
XKBMisc.c:441:        (XkbAllocServerMap(xkb, XkbAllServerInfoMask, 0) != Success)) {
XKBlib.h:658:extern	Status XkbAllocServerMap(

#### XkbApplyCompatMapToKey ####
XKBMisc.c:427:XkbApplyCompatMapToKey(XkbDescPtr xkb, KeyCode key, XkbChangesPtr changes)
XKBMisc.c:638:        XkbApplyCompatMapToKey(xkb, key, changes);
XKBlib.h:1007:extern	Bool	XkbApplyCompatMapToKey(	/* False only on error */

#### XkbApplyVirtualModChanges ####
XKBMisc.c:668:        XkbApplyVirtualModChanges(xkb, changes->map.vmods, changes);
XKBMisc.c:907:XkbApplyVirtualModChanges(XkbDescPtr xkb,
XKBlib.h:1129:extern	Bool XkbApplyVirtualModChanges(

#### XkbBell ####
XKBBell.c:146:XkbBell(Display *dpy, Window window, int percent, Atom name)
XKBBell.c:170:XkbBellEvent(Display *dpy, Window window, int percent, Atom name)
XKB.c:200:        case XkbBellNotify:
XKBUse.c:379:    case XkbBellNotify:
XKBUse.c:381:        if (xkbi->selected_events & XkbBellNotifyMask) {
XKBUse.c:383:            XkbBellNotifyEvent *bev = (XkbBellNotifyEvent *) re;
XKBUse.c:386:            bev->xkb_type = XkbBellNotify;
XKBlib.h:186:typedef struct _XkbBellNotify {
XKBlib.h:192:	int 		xkb_type;	/* XkbBellNotify */
XKBlib.h:202:} XkbBellNotifyEvent;
XKBlib.h:265:	XkbBellNotifyEvent		bell;
XKBlib.h:456:extern	Bool	XkbBell(
XKBlib.h:468:extern	Bool	XkbBellEvent(

#### XkbBellEvent ####
XKBBell.c:170:XkbBellEvent(Display *dpy, Window window, int percent, Atom name)
XKBlib.h:468:extern	Bool	XkbBellEvent(

#### XkbChangeDeviceInfo ####
XKBExtDev.c:731:XkbChangeDeviceInfo(Display *dpy,
XKBlib.h:1089:extern	Bool	XkbChangeDeviceInfo(

#### XkbChangeEnabledControls ####
XKBCtrls.c:154:XkbChangeEnabledControls(Display *dpy,
XKBlib.h:421:extern	Bool	XkbChangeEnabledControls(

#### XkbChangeKeycodeRange ####
XKBMAlloc.c:645:XkbChangeKeycodeRange(XkbDescPtr xkb,
XKBlib.h:961:extern  Status   XkbChangeKeycodeRange(

#### XkbChangeMap ####
XKBSetMap.c:541:XkbChangeMap(Display *dpy, XkbDescPtr xkb, XkbMapChangesPtr changes)
XKBlib.h:880:extern	Bool	XkbChangeMap(

#### XkbChangeNames ####
XKBNames.c:532:XkbChangeNames(Display *dpy, XkbDescPtr xkb, XkbNameChangesPtr changes)
XKBlib.h:855:extern	Bool	XkbChangeNames(

#### XkbChangeTypesOfKey ####
XKBMisc.c:635:        XkbChangeTypesOfKey(xkb, key, nG, XkbAllGroupsMask, types, mc);
XKBMisc.c:673:XkbChangeTypesOfKey(XkbDescPtr xkb,
XKBlib.h:952:extern	Status XkbChangeTypesOfKey(

#### XkbComputeEffectiveMap ####
XKB.c:435:XkbComputeEffectiveMap(XkbDescPtr xkb,
XKBlib.h:630:extern	Bool	XkbComputeEffectiveMap(

#### XkbComputeRowBounds ####
XKBGeom.c:114:XkbComputeRowBounds(XkbGeometryPtr geom, XkbSectionPtr section, XkbRowPtr row)
XKBGeom.c:163:        if (!XkbComputeRowBounds(geom, section, row))

#### XkbComputeSectionBounds ####
XKBGeom.c:150:XkbComputeSectionBounds(XkbGeometryPtr geom, XkbSectionPtr section)

#### XkbComputeShapeBounds ####
XKBGeom.c:64:XkbComputeShapeBounds(XkbShapePtr shape)
XKBGeom.c:394:        XkbComputeShapeBounds(shape);

#### XkbComputeShapeTop ####
XKBGeom.c:87:XkbComputeShapeTop(XkbShapePtr shape, XkbBoundsPtr bounds)

#### XkbCopyKeyType ####
XKBMAlloc.c:225:XkbCopyKeyType(XkbKeyTypePtr from, XkbKeyTypePtr into)
XKBMAlloc.c:265:XkbCopyKeyTypes(XkbKeyTypePtr from, XkbKeyTypePtr into, int num_types)
XKBMAlloc.c:272:        if ((rtrn = XkbCopyKeyType(from++, into++)) != Success)
XKBMisc.c:108:        rtrn = XkbCopyKeyType(&from[XkbOneLevelIndex], &to[XkbOneLevelIndex]);
XKBMisc.c:110:        rtrn = XkbCopyKeyType(&from[XkbTwoLevelIndex], &to[XkbTwoLevelIndex]);
XKBMisc.c:113:            XkbCopyKeyType(&from[XkbAlphabeticIndex], &to[XkbAlphabeticIndex]);
XKBMisc.c:117:        rtrn = XkbCopyKeyType(&from[XkbKeypadIndex], &to[XkbKeypadIndex]);
XKBlib.h:921:extern Status XkbCopyKeyType(
XKBlib.h:926:extern Status XkbCopyKeyTypes(

#### XkbCopyKeyTypes ####
XKBMAlloc.c:265:XkbCopyKeyTypes(XkbKeyTypePtr from, XkbKeyTypePtr into, int num_types)
XKBlib.h:926:extern Status XkbCopyKeyTypes(

#### XkbDeviceBell ####
XKBBell.c:37:XkbDeviceBell(Display *dpy,
XKBBell.c:109:XkbDeviceBellEvent(Display *dpy,
XKBBell.c:153:    return XkbDeviceBell(dpy, window, XkbUseCoreKbd,
XKBBell.c:177:    return XkbDeviceBellEvent(dpy, window, XkbUseCoreKbd,
XKBlib.h:428:extern	Bool	XkbDeviceBell(
XKBlib.h:446:extern	Bool	XkbDeviceBellEvent(

#### XkbDeviceBellEvent ####
XKBBell.c:109:XkbDeviceBellEvent(Display *dpy,
XKBBell.c:177:    return XkbDeviceBellEvent(dpy, window, XkbUseCoreKbd,
XKBlib.h:446:extern	Bool	XkbDeviceBellEvent(

#### XkbFindOverlayForKey ####
XKBGeom.c:211:XkbFindOverlayForKey(XkbGeometryPtr geom, XkbSectionPtr wanted, char *under)

#### XkbForceBell ####
XKBBell.c:158:XkbForceBell(Display *dpy, int percent)
XKBlib.h:463:extern	Bool	XkbForceBell(

#### XkbForceDeviceBell ####
XKBBell.c:74:XkbForceDeviceBell(Display *dpy,
XKBBell.c:165:    return XkbForceDeviceBell(dpy, XkbUseCoreKbd, XkbDfltXIClass, XkbDfltXIId,
XKBlib.h:438:extern	Bool	XkbForceDeviceBell(

#### XkbFreeClientMap ####
XKBAlloc.c:322:        XkbFreeClientMap(xkb, XkbAllClientInfoMask, True);
XKBMAlloc.c:928:XkbFreeClientMap(XkbDescPtr xkb, unsigned what, Bool freeMap)
XKBlib.h:664:extern	void	XkbFreeClientMap(

#### XkbFreeCompatMap ####
XKBAlloc.c:91:XkbFreeCompatMap(XkbDescPtr xkb, unsigned which, Bool freeMap)
XKBAlloc.c:326:        XkbFreeCompatMap(xkb, XkbAllCompatMask, True);
XKBlib.h:808:extern	void	XkbFreeCompatMap(

#### XkbFreeComponentList ####
XKBList.c:223:            XkbFreeComponentList(list);
XKBList.c:237:XkbFreeComponentList(XkbComponentListPtr list)
XKBlib.h:977:extern	void XkbFreeComponentList(

#### XkbFreeControls ####
XKBAlloc.c:267:XkbFreeControls(XkbDescPtr xkb, unsigned which, Bool freeMap)
XKBAlloc.c:334:        XkbFreeControls(xkb, XkbAllControlsMask, True);
XKBlib.h:775:extern	void	XkbFreeControls(

#### XkbFreeDeviceInfo ####
XKBAlloc.c:456:XkbFreeDeviceInfo(XkbDeviceInfoPtr devi, unsigned which, Bool freeDevI)
XKBExtDev.c:272:            XkbFreeDeviceInfo(devi, XkbXI_AllDeviceFeaturesMask, True);
XKBlib.h:1041:extern	void XkbFreeDeviceInfo(

#### XkbFreeGeomColors ####
XKBGAlloc.c:185:XkbFreeGeomColors(XkbGeometryPtr geom, int first, int count, Bool freeAll)
XKBGAlloc.c:425:        XkbFreeGeomColors(geom, 0, geom->num_colors, True);

#### XkbFreeGeomDoodads ####
XKBGAlloc.c:351:        XkbFreeGeomDoodads(section->doodads, section->num_doodads, True);
XKBGAlloc.c:400:XkbFreeGeomDoodads(XkbDoodadPtr doodads, int nDoodads, Bool freeAll)
XKBGAlloc.c:431:        XkbFreeGeomDoodads(geom->doodads, geom->num_doodads, True);

#### XkbFreeGeomKeyAliases ####
XKBGAlloc.c:164:XkbFreeGeomKeyAliases(XkbGeometryPtr geom, int first, int count, Bool freeAll)
XKBGAlloc.c:436:        XkbFreeGeomKeyAliases(geom, 0, geom->num_key_aliases, True);

#### XkbFreeGeomKeys ####
XKBGAlloc.c:311:XkbFreeGeomKeys(XkbRowPtr row, int first, int count, Bool freeAll)
XKBGAlloc.c:328:        XkbFreeGeomKeys(row, 0, row->num_keys, True);

#### XkbFreeGeomOutlines ####
XKBGAlloc.c:219:XkbFreeGeomOutlines(XkbShapePtr shape, int first, int count, Bool freeAll)
XKBGAlloc.c:237:        XkbFreeGeomOutlines(shape, 0, shape->num_outlines, True);

#### XkbFreeGeomOverlayKeys ####
XKBGAlloc.c:254:XkbFreeGeomOverlayKeys(XkbOverlayRowPtr row, int first, int count, Bool freeAll)
XKBGAlloc.c:271:        XkbFreeGeomOverlayKeys(row, 0, row->num_keys, True);

#### XkbFreeGeomOverlayRows ####
XKBGAlloc.c:276:XkbFreeGeomOverlayRows(XkbOverlayPtr overlay, int first, int count,
XKBGAlloc.c:294:        XkbFreeGeomOverlayRows(overlay, 0, overlay->num_rows, True);

#### XkbFreeGeomOverlays ####
XKBGAlloc.c:299:XkbFreeGeomOverlays(XkbSectionPtr section, int first, int count, Bool freeAll)

#### XkbFreeGeomPoints ####
XKBGAlloc.c:197:XkbFreeGeomPoints(XkbOutlinePtr outline, int first, int count, Bool freeAll)
XKBGAlloc.c:214:        XkbFreeGeomPoints(outline, 0, outline->num_points, True);

#### XkbFreeGeomProperties ####
XKBGAlloc.c:152:XkbFreeGeomProperties(XkbGeometryPtr geom, int first, int count, Bool freeAll)
XKBGAlloc.c:423:        XkbFreeGeomProperties(geom, 0, geom->num_properties, True);

#### XkbFreeGeomRows ####
XKBGAlloc.c:333:XkbFreeGeomRows(XkbSectionPtr section, int first, int count, Bool freeAll)
XKBGAlloc.c:349:        XkbFreeGeomRows(section, 0, section->num_rows, True);

#### XkbFreeGeomSections ####
XKBGAlloc.c:358:XkbFreeGeomSections(XkbGeometryPtr geom, int first, int count, Bool freeAll)
XKBGAlloc.c:429:        XkbFreeGeomSections(geom, 0, geom->num_sections, True);

#### XkbFreeGeomShapes ####
XKBGAlloc.c:242:XkbFreeGeomShapes(XkbGeometryPtr geom, int first, int count, Bool freeAll)
XKBGAlloc.c:427:        XkbFreeGeomShapes(geom, 0, geom->num_shapes, True);

#### XkbFreeGeometry ####
XKBAlloc.c:332:        XkbFreeGeometry(xkb->geom, XkbGeomAllMask, True);
XKBGAlloc.c:416:XkbFreeGeometry(XkbGeometryPtr geom, unsigned which, Bool freeMap)
XKBGAlloc.c:645:    XkbFreeGeometry(geom, XkbGeomAllMask, True);
XKBGeom.c:618:        XkbFreeGeometry(xkb->geom, XkbGeomAllMask, True);
XKBGeom.c:654:                XkbFreeGeometry(geom, XkbGeomAllMask, True);
XKBGeom.c:662:            XkbFreeGeometry(geom, XkbGeomAllMask, True);

#### XkbFreeIndicatorMaps ####
XKBAlloc.c:292:XkbFreeIndicatorMaps(XkbDescPtr xkb)
XKBAlloc.c:328:        XkbFreeIndicatorMaps(xkb);
XKBlib.h:688:extern	void XkbFreeIndicatorMaps(

#### XkbFreeKeyboard ####
XKBAlloc.c:315:XkbFreeKeyboard(XkbDescPtr xkb, unsigned which, Bool freeAll)
XKBBind.c:558:        XkbFreeKeyboard(xkbi->desc, XkbAllComponentsMask, True);
XKBGetByName.c:214:        XkbFreeKeyboard(xkb, XkbAllComponentsMask, xTrue);
XKBUse.c:613:            XkbFreeKeyboard(xkbi->desc, XkbAllComponentsMask, True);
XKBlib.h:646:extern	void	XkbFreeKeyboard(

#### XkbFreeNames ####
XKBAlloc.c:201:XkbFreeNames(XkbDescPtr xkb, unsigned which, Bool freeMap)
XKBAlloc.c:330:        XkbFreeNames(xkb, XkbAllNamesMask, True);
XKBlib.h:861:extern	void XkbFreeNames(

#### XkbFreeServerMap ####
XKBAlloc.c:324:        XkbFreeServerMap(xkb, XkbAllServerInfoMask, True);
XKBMAlloc.c:981:XkbFreeServerMap(XkbDescPtr xkb, unsigned what, Bool freeMap)
XKBlib.h:670:extern	void	XkbFreeServerMap(

#### XkbGetAutoRepeatRate ####
XKBCtrls.c:72:XkbGetAutoRepeatRate(Display *dpy,
XKBlib.h:414:extern	Bool	XkbGetAutoRepeatRate(

#### XkbGetAutoResetControls ####
XKB.c:622:XkbGetAutoResetControls(Display *dpy,
XKBlib.h:904:extern	Bool	XkbGetAutoResetControls(

#### XkbGetCompatMap ####
XKBCompat.c:110:XkbGetCompatMap(Display *dpy, unsigned which, XkbDescPtr xkb)
XKBlib.h:814:extern Status XkbGetCompatMap(

#### XkbGetControls ####
XKBCtrls.c:175:XkbGetControls(Display *dpy, unsigned long which, XkbDescPtr xkb)
XKBlib.h:781:extern	Status	XkbGetControls(
XKBlib.h:799:#define	XkbGetControlsChanges(d,x,c)	XkbGetControls(d,(c)->changed_ctrls,x)

#### XkbGetDetectableAutoRepeat ####
XKB.c:555:XkbGetDetectableAutoRepeat(Display *dpy, Bool *supported)
XKBlib.h:892:extern	Bool	XkbGetDetectableAutoRepeat(

#### XkbGetDeviceButtonActions ####
XKBExtDev.c:344:XkbGetDeviceButtonActions(Display *dpy,
XKBlib.h:1067:extern	Status	XkbGetDeviceButtonActions(

#### XkbGetDeviceInfo ####
XKBExtDev.c:233:XkbGetDeviceInfo(Display *dpy,
XKBExtDev.c:282:XkbGetDeviceInfoChanges(Display *dpy,
XKBlib.h:1053:extern	XkbDeviceInfoPtr XkbGetDeviceInfo(
XKBlib.h:1061:extern	Status	XkbGetDeviceInfoChanges(

#### XkbGetDeviceInfoChanges ####
XKBExtDev.c:282:XkbGetDeviceInfoChanges(Display *dpy,
XKBlib.h:1061:extern	Status	XkbGetDeviceInfoChanges(

#### XkbGetDeviceLedInfo ####
XKBExtDev.c:385:XkbGetDeviceLedInfo(Display *dpy,
XKBlib.h:1075:extern	Status	XkbGetDeviceLedInfo(

#### XkbGetGeometry ####
XKBGeom.c:671:XkbGetGeometry(Display *dpy, XkbDescPtr xkb)

#### XkbGetIndicatorMap ####
XKBleds.c:115:XkbGetIndicatorMap(Display *dpy, unsigned long which, XkbDescPtr xkb)
XKBlib.h:516:extern	Status	 XkbGetIndicatorMap(
XKBlib.h:532:#define	XkbGetIndicatorMapChanges(d,x,c) \
XKBlib.h:533:				(XkbGetIndicatorMap((d),(c)->map_changes,x))

#### XkbGetIndicatorState ####
XKBleds.c:36:XkbGetIndicatorState(Display *dpy, unsigned deviceSpec, unsigned *pStateRtrn)
XKBlib.h:502:extern	Status	XkbGetIndicatorState(

#### XkbGetKeyActions ####
XKBGetMap.c:641:XkbGetKeyActions(Display *dpy, unsigned first, unsigned num, XkbDescPtr xkb)
XKBlib.h:729:extern	Status	XkbGetKeyActions(

#### XkbGetKeyBehaviors ####
XKBGetMap.c:692:XkbGetKeyBehaviors(Display *dpy, unsigned first, unsigned num, XkbDescPtr xkb)
XKBlib.h:736:extern	Status	XkbGetKeyBehaviors(

#### XkbGetKeyExplicitComponents ####
XKBGetMap.c:738:XkbGetKeyExplicitComponents(Display *dpy,
XKBlib.h:749:extern	Status	XkbGetKeyExplicitComponents(

#### XkbGetKeyModifierMap ####
XKBGetMap.c:775:XkbGetKeyModifierMap(Display *dpy,
XKBlib.h:756:extern	Status	XkbGetKeyModifierMap(

#### XkbGetKeySyms ####
XKBGetMap.c:666:XkbGetKeySyms(Display *dpy, unsigned first, unsigned num, XkbDescPtr xkb)
XKBlib.h:722:extern	Status	XkbGetKeySyms(

#### XkbGetKeyTypes ####
XKBGetMap.c:617:XkbGetKeyTypes(Display *dpy, unsigned first, unsigned num, XkbDescPtr xkb)
XKBlib.h:715:extern	Status	XkbGetKeyTypes(

#### XkbGetKeyVirtualModMap ####
XKBGetMap.c:811:XkbGetKeyVirtualModMap(Display *dpy, unsigned first, unsigned num,
XKBlib.h:763:extern	Status	XkbGetKeyVirtualModMap(

#### XkbGetKeyboard ####
XKBGetByName.c:38:XkbGetKeyboardByName(Display *dpy,
XKBGetByName.c:223:XkbGetKeyboard(Display *dpy, unsigned which, unsigned deviceSpec)
XKBGetByName.c:225:    return XkbGetKeyboardByName(dpy, deviceSpec, NULL, which, which, False);
XKBlib.h:981:extern	XkbDescPtr XkbGetKeyboard(
XKBlib.h:987:extern XkbDescPtr XkbGetKeyboardByName(

#### XkbGetKeyboardByName ####
XKBGetByName.c:38:XkbGetKeyboardByName(Display *dpy,
XKBGetByName.c:225:    return XkbGetKeyboardByName(dpy, deviceSpec, NULL, which, which, False);
XKBlib.h:987:extern XkbDescPtr XkbGetKeyboardByName(

#### XkbGetMap ####
XKBBind.c:374:        if ((rtrn = XkbGetMapChanges(dpy, xkbi->desc, &changes)) != Success) {
XKBBind.c:376:            fprintf(stderr, "Internal Error! XkbGetMapChanges failed:\n");
XKBBind.c:432:        if (XkbGetMapChanges(dpy, xkbi->desc, &changes) != Success) {
XKBBind.c:434:            fprintf(stderr, "Internal Error! XkbGetMapChanges failed:\n");
XKBBind.c:518:    desc = XkbGetMap(dpy, query, XkbUseCoreKbd);
XKBBind.c:521:        fprintf(stderr, "Warning! XkbGetMap failed!\n");
XKBBind.c:566:    desc = XkbGetMap(dpy, XkbAllClientInfoMask, XkbUseCoreKbd);
XKBGetMap.c:594:XkbGetMap(Display *dpy, unsigned which, unsigned deviceSpec)
XKBGetMap.c:846:XkbGetMapChanges(Display *dpy, XkbDescPtr xkb, XkbMapChangesPtr changes)
XKBlib.h:692:extern	XkbDescPtr XkbGetMap(
XKBlib.h:704:extern	Status	XkbGetMapChanges(
XKBlibint.h:91:        if (XkbGetMapChanges((d),(xi)->desc, &(xi)->changes)==Success) { \

#### XkbGetMapChanges ####
XKBBind.c:374:        if ((rtrn = XkbGetMapChanges(dpy, xkbi->desc, &changes)) != Success) {
XKBBind.c:376:            fprintf(stderr, "Internal Error! XkbGetMapChanges failed:\n");
XKBBind.c:432:        if (XkbGetMapChanges(dpy, xkbi->desc, &changes) != Success) {
XKBBind.c:434:            fprintf(stderr, "Internal Error! XkbGetMapChanges failed:\n");
XKBGetMap.c:846:XkbGetMapChanges(Display *dpy, XkbDescPtr xkb, XkbMapChangesPtr changes)
XKBlib.h:704:extern	Status	XkbGetMapChanges(
XKBlibint.h:91:        if (XkbGetMapChanges((d),(xi)->desc, &(xi)->changes)==Success) { \

#### XkbGetNamedDeviceIndicator ####
XKBleds.c:200:XkbGetNamedDeviceIndicator(Display *dpy,
XKBleds.c:262:    return XkbGetNamedDeviceIndicator(dpy, XkbUseCoreKbd,
XKBlib.h:546:extern	Bool	XkbGetNamedDeviceIndicator(

#### XkbGetNamedGeometry ####
XKBGeom.c:699:XkbGetNamedGeometry(Display *dpy, XkbDescPtr xkb, Atom name)

#### XkbGetNamedIndicator ####
XKBleds.c:255:XkbGetNamedIndicator(Display *dpy,
XKBlib.h:537:extern	Bool	XkbGetNamedIndicator(

#### XkbGetNames ####
XKBNames.c:239:XkbGetNames(Display *dpy, unsigned which, XkbDescPtr xkb)
XKBlib.h:841:extern	Status	XkbGetNames(

#### XkbGetPerClientControls ####
XKB.c:691:XkbGetPerClientControls(Display *dpy, unsigned *ctrls)
XKBlib.h:916:extern	Bool	XkbGetPerClientControls(

#### XkbGetState ####
XKB.c:481:XkbGetState(Display *dpy, unsigned deviceSpec, XkbStatePtr rtrn)
XKBlib.h:868:extern	Status	XkbGetState(

#### XkbGetUpdatedMap ####
XKBBind.c:183:    if (XkbGetUpdatedMap(dpy, XkbModifierMapMask, xkb) == Success)
XKBGetMap.c:571:XkbGetUpdatedMap(Display *dpy, unsigned which, XkbDescPtr xkb)
XKBGetMap.c:603:            ((which) && (XkbGetUpdatedMap(dpy, which, xkb) != Success))) {
XKBlib.h:698:extern	Status	XkbGetUpdatedMap(

#### XkbGetVirtualMods ####
XKBGetMap.c:717:XkbGetVirtualMods(Display *dpy, unsigned which, XkbDescPtr xkb)
XKBlib.h:743:extern	Status	XkbGetVirtualMods(

#### XkbGetXlibControls ####
imConv.c:145:    unsigned ctrls = XkbGetXlibControls (event->display);
XKB.c:364:XkbGetXlibControls(Display *dpy)
XKBlib.h:335:extern	unsigned int	XkbGetXlibControls(

#### XkbIgnoreExtension ####
XKBUse.c:36:static Bool _XkbIgnoreExtension = False;
XKBUse.c:587:XkbIgnoreExtension(Bool ignore)
XKBUse.c:602:    _XkbIgnoreExtension = ignore;
XKBUse.c:730:    if (forceIgnore || _XkbIgnoreExtension || getenv("XKB_DISABLE")) {
XKBlib.h:296:extern	Bool	XkbIgnoreExtension(

#### XkbInitCanonicalKeyTypes ####
XKBMAlloc.c:318:        if (XkbInitCanonicalKeyTypes(xkb, tmp, XkbNoModifier) == Success) {
XKBMisc.c:90:XkbInitCanonicalKeyTypes(XkbDescPtr xkb, unsigned which, int keypadVMod)
XKBlib.h:636:extern	Status XkbInitCanonicalKeyTypes(

#### XkbKeyTypesForCoreSymbols ####
XKBMisc.c:143:XkbKeyTypesForCoreSymbols(XkbDescPtr xkb,
XKBMisc.c:629:        nG = XkbKeyTypesForCoreSymbols(xkb, map_width, syms, explicit, types,
XKBlib.h:998:extern	int	XkbKeyTypesForCoreSymbols(	/* returns # of groups */

#### XkbKeycodeToKeysym ####
XKBBind.c:60:XkbKeycodeToKeysym(Display *dpy,
XKBBind.c:123:                return XkbKeycodeToKeysym(dpy, kc, XkbGroup1Index,
XKBBind.c:130:                return XkbKeycodeToKeysym(dpy, kc, XkbGroup2Index,
XKBBind.c:137:                return XkbKeycodeToKeysym(dpy, kc, XkbGroup3Index,
XKBBind.c:144:                return XkbKeycodeToKeysym(dpy, kc, XkbGroup4Index,
XKBBind.c:149:    return XkbKeycodeToKeysym(dpy, kc, (col >> 1), (col & 1));
XKBlib.h:357:extern	KeySym XkbKeycodeToKeysym(

#### XkbKeysymToModifiers ####
KeyBind.c:64:#define	XkbKeysymToModifiers	_XKeysymToModifiers
KeyBind.c:1002:	p->state|= XkbKeysymToModifiers(dpy,p->modifiers[i]);
XKBBind.c:189:XkbKeysymToModifiers(Display *dpy, KeySym ks)
XKBBind.c:492:                        p->state |= XkbKeysymToModifiers(dpy, p->modifiers[i]);
XKBlib.h:368:extern	unsigned int	XkbKeysymToModifiers(

#### XkbLatchGroup ####
XKB.c:321:XkbLatchGroup(Display *dpy, unsigned int deviceSpec, unsigned int group)
XKBlib.h:599:extern	Bool	XkbLatchGroup(

#### XkbLatchModifiers ####
XKB.c:260:XkbLatchModifiers(Display *dpy,
XKBlib.h:586:extern	Bool	XkbLatchModifiers(

#### XkbLibraryVersion ####
XKB.c:62:XkbLibraryVersion(int *libMajorRtrn, int *libMinorRtrn)
XKB.c:735:        if (!XkbLibraryVersion(major_rtrn, minor_rtrn)) {
XKBlib.h:324:extern	Bool	XkbLibraryVersion(

#### XkbListComponents ####
XKBList.c:97:XkbListComponents(Display *dpy,
XKBlib.h:970:extern	XkbComponentListPtr	XkbListComponents(

#### XkbLockGroup ####
XKB.c:293:XkbLockGroup(Display *dpy, unsigned int deviceSpec, unsigned int group)
XKBlib.h:593:extern	Bool	XkbLockGroup(

#### XkbLockModifiers ####
XKB.c:229:XkbLockModifiers(Display *dpy,
XKBlib.h:579:extern	Bool	XkbLockModifiers(

#### XkbLookupKeyBinding ####
XKBBind.c:618:    n = XkbLookupKeyBinding(dpy, *sym_rtrn, mods, buffer, nbytes, extra_rtrn);
XKBBind.c:730:    rtrnLen = XkbLookupKeyBinding(dpy, *keysym, new_mods, buffer, nbytes, NULL);
XKBBind.c:739:XkbLookupKeyBinding(Display *dpy,
XKBlib.h:381:extern	int		XkbLookupKeyBinding(

#### XkbLookupKeySym ####
XKBBind.c:247:    return XkbLookupKeySym(dpy, key, mods, mods_rtrn, keysym_rtrn);
XKBBind.c:251:XkbLookupKeySym(register Display *dpy,
XKBBind.c:685:    if (!XkbLookupKeySym(dpy, event->keycode, event->state, &new_mods, keysym))
XKBBind.c:698:            if (XkbLookupKeySym(dpy, tmp_ev.keycode, tmp_ev.state,
XKBBind.c:712:                if (XkbLookupKeySym(dpy, tmp_ev.keycode, tmp_ev.state,
XKBlib.h:373:extern	Bool		XkbLookupKeySym(

#### XkbNoteControlsChanges ####
XKBCtrls.c:342:XkbNoteControlsChanges(XkbControlsChangesPtr old,
XKBlib.h:793:extern	void	XkbNoteControlsChanges(

#### XkbNoteDeviceChanges ####
XKBExtDev.c:40:XkbNoteDeviceChanges(XkbDeviceChangesPtr old,
XKBlib.h:1047:extern	void	XkbNoteDeviceChanges(

#### XkbNoteMapChanges ####
XKBBind.c:373:        XkbNoteMapChanges(&changes, event, XKB_XLIB_MAP_MASK);
XKBUse.c:39:XkbNoteMapChanges(XkbMapChangesPtr old,
XKBUse.c:293:            XkbNoteMapChanges(&xkbi->changes, mev, XKB_XLIB_MAP_MASK);
XKBlib.h:490:extern	void	XkbNoteMapChanges(

#### XkbNoteNameChanges ####
XKBNames.c:775:XkbNoteNameChanges(XkbNameChangesPtr old,
XKBlib.h:496:extern	void	XkbNoteNameChanges(

#### XkbOpenDisplay ####
XKB.c:724:XkbOpenDisplay(char *name,
XKBlib.h:274:	/* XkbOpenDisplay error codes */
XKBlib.h:300:extern	Display *XkbOpenDisplay(

#### XkbQueryExtension ####
XKB.c:39:XkbQueryExtension(Display *dpy,
XKB.c:753:    if (!XkbQueryExtension(dpy, NULL, ev_rtrn, err_rtrn,
XKBlib.h:309:extern	Bool	XkbQueryExtension(

#### XkbRefreshKeyboardMapping ####
XKBBind.c:348:XkbRefreshKeyboardMapping(register XkbMapNotifyEvent * event)
XKBBind.c:406:        return XkbRefreshKeyboardMapping(&xkbevent->map);
XKBlib.h:711:extern	Status	XkbRefreshKeyboardMapping(

#### XkbResizeDeviceButtonActions ####
XKBAlloc.c:383:XkbResizeDeviceButtonActions(XkbDeviceInfoPtr devi, unsigned newTotal)
XKBExtDev.c:186:        tmp = XkbResizeDeviceButtonActions(devi, rep->totalBtns);
XKBlib.h:1030:extern	Status			XkbResizeDeviceButtonActions(

#### XkbResizeKeyActions ####
XKBGetMap.c:289:                newActs = XkbResizeKeyActions(info, i + rep->firstKeyAct,
XKBMAlloc.c:876:XkbResizeKeyActions(XkbDescPtr xkb, int key, int needed)
XKBMisc.c:486:        pActs = XkbResizeKeyActions(xkb, key, nSyms);
XKBMisc.c:758:            pActs = XkbResizeKeyActions(xkb, key, width * nGroups);
XKBlib.h:946:extern	XkbAction *XkbResizeKeyActions(

#### XkbResizeKeySyms ####
XKBGetMap.c:231:            newSyms = XkbResizeKeySyms(xkb, i + rep->firstKeySym, tmp);
XKBMAlloc.c:563:XkbResizeKeySyms(XkbDescPtr xkb, int key, int needed)
XKBMisc.c:696:        XkbResizeKeySyms(xkb, key, 0);
XKBMisc.c:724:            pSyms = XkbResizeKeySyms(xkb, key, width * nGroups);
XKBMisc.c:739:        pSyms = XkbResizeKeySyms(xkb, key, width * nGroups);
XKBlib.h:940:extern	KeySym *XkbResizeKeySyms(

#### XkbResizeKeyType ####
XKBMAlloc.c:297:                    XkbResizeKeyType(xkb, i, map_count, want_preserve,
XKBMAlloc.c:324:                status = XkbResizeKeyType(xkb, i, map_count, want_preserve,
XKBMAlloc.c:360:XkbResizeKeyType(XkbDescPtr xkb,
XKBlib.h:932:extern	Status	XkbResizeKeyType(

#### XkbSelectEventDetails ####
XKBBind.c:531:        XkbSelectEventDetails(dpy, xkbi->desc->device_spec,
XKBBind.c:536:    XkbSelectEventDetails(dpy, xkbi->desc->device_spec, XkbMapNotify,
XKBBind.c:579:        XkbSelectEventDetails(dpy, xkbi->desc->device_spec, XkbMapNotify,
XKB.c:137:XkbSelectEventDetails(Display *dpy,
XKBlib.h:482:extern	Bool	XkbSelectEventDetails(

#### XkbSelectEvents ####
XKB.c:84:XkbSelectEvents(Display *dpy,
XKBlib.h:475:extern	Bool	XkbSelectEvents(

#### XkbSetAtomFuncs ####
XKB.c:770:XkbSetAtomFuncs(XkbInternAtomFunc getAtom, XkbGetAtomNameFunc getName)
XKBlib.h:352:extern void		XkbSetAtomFuncs(

#### XkbSetAutoRepeatRate ####
XKBCtrls.c:51:XkbSetAutoRepeatRate(Display *dpy,
XKBlib.h:407:extern	Bool	XkbSetAutoRepeatRate(

#### XkbSetAutoResetControls ####
XKB.c:586:XkbSetAutoResetControls(Display *dpy,
XKBlib.h:897:extern	Bool	XkbSetAutoResetControls(

#### XkbSetCompatMap ####
XKBCompat.c:214:XkbSetCompatMap(Display *dpy, unsigned which, XkbDescPtr xkb,
XKBlib.h:820:extern Bool XkbSetCompatMap(

#### XkbSetControls ####
XKBCtrls.c:270:XkbSetControls(Display *dpy, unsigned long which, XkbDescPtr xkb)
XKBlib.h:787:extern	Bool	XkbSetControls(
XKBlib.h:800:#define	XkbChangeControls(d,x,c)	XkbSetControls(d,(c)->changed_ctrls,x)

#### XkbSetDebuggingFlags ####
XKB.c:384:XkbSetDebuggingFlags(Display *dpy,
XKBlib.h:1118:extern	Bool XkbSetDebuggingFlags(

#### XkbSetDetectableAutoRepeat ####
XKB.c:521:XkbSetDetectableAutoRepeat(Display *dpy, Bool detectable, Bool *supported)
XKBlib.h:886:extern	Bool	XkbSetDetectableAutoRepeat(

#### XkbSetDeviceButtonActions ####
XKBExtDev.c:791:XkbSetDeviceButtonActions(Display *dpy,
XKBlib.h:1103:extern	Bool XkbSetDeviceButtonActions(

#### XkbSetDeviceInfo ####
XKBExtDev.c:554:_XkbSetDeviceInfoSize(XkbDeviceInfoPtr devi,
XKBExtDev.c:676:XkbSetDeviceInfo(Display *dpy, unsigned which, XkbDeviceInfoPtr devi)
XKBExtDev.c:702:    if (_XkbSetDeviceInfoSize(devi, &changes, &lstuff, &size, &nLeds) !=
XKBExtDev.c:753:    if (_XkbSetDeviceInfoSize(devi, changes, &lstuff, &size, &nLeds) != Success)
XKBExtDev.c:820:    if (_XkbSetDeviceInfoSize(devi, &changes, NULL, &size, &nLeds) != Success)
XKBlib.h:1083:extern	Bool	XkbSetDeviceInfo(

#### XkbSetDeviceLedInfo ####
XKBExtDev.c:781:XkbSetDeviceLedInfo(Display *dpy,
XKBlib.h:1095:extern  Bool XkbSetDeviceLedInfo(

#### XkbSetGeometry ####
XKBSetGeom.c:448:XkbSetGeometry(Display *dpy, unsigned deviceSpec, XkbGeometryPtr geom)

#### XkbSetIgnoreLockMods ####
XKBCtrls.c:129:XkbSetIgnoreLockMods(Display *dpy,
XKBlib.h:614:extern	Bool	XkbSetIgnoreLockMods(

#### XkbSetIndicatorMap ####
XKBleds.c:155:XkbSetIndicatorMap(Display *dpy, unsigned long which, XkbDescPtr xkb)
XKBlib.h:522:extern	Bool	 XkbSetIndicatorMap(
XKBlib.h:535:				(XkbSetIndicatorMap((d),(c)->map_changes,x))

#### XkbSetMap ####
XKBSetMap.c:469:XkbSetMap(Display *dpy, unsigned which, XkbDescPtr xkb)
XKBSetMap.c:500:    req->flags = XkbSetMapAllFlags;
XKBSetMap.c:576:    req->flags = XkbSetMapRecomputeActions;
XKBlib.h:874:extern	Bool	XkbSetMap(

#### XkbSetNamedDeviceIndicator ####
XKBleds.c:269:XkbSetNamedDeviceIndicator(Display *dpy,
XKBleds.c:334:    return XkbSetNamedDeviceIndicator(dpy, XkbUseCoreKbd,
XKBlib.h:567:extern	Bool	XkbSetNamedDeviceIndicator(

#### XkbSetNamedIndicator ####
XKBleds.c:327:XkbSetNamedIndicator(Display *dpy,
XKBlib.h:558:extern	Bool	XkbSetNamedIndicator(

#### XkbSetNames ####
XKBNames.c:321:XkbSetNames(Display *dpy,
XKBlib.h:847:extern	Bool	XkbSetNames(

#### XkbSetPerClientControls ####
XKB.c:657:XkbSetPerClientControls(Display *dpy, unsigned change, unsigned *values)
XKBlib.h:910:extern	Bool	XkbSetPerClientControls(

#### XkbSetServerInternalMods ####
XKBCtrls.c:104:XkbSetServerInternalMods(Display *dpy,
XKBlib.h:605:extern	Bool	XkbSetServerInternalMods(

#### XkbSetXlibControls ####
imConv.c:146:    XkbSetXlibControls (event->display,
imConv.c:149:    XkbSetXlibControls (event->display,
XKB.c:351:XkbSetXlibControls(Display *dpy, unsigned affect, unsigned values)
XKBlib.h:329:extern	unsigned int	XkbSetXlibControls(

#### XkbToControl ####
XKBBind.c:659:            buffer[0] = XkbToControl(buffer[0]);
XKBBind.c:769:XkbToControl(char ch)
XKBlib.h:1112:extern	char	XkbToControl(

#### XkbTranslateKey ####
XKBBind.c:229:    * Not a public entry point -- XkbTranslateKey is an obsolete name
XKBBind.c:234:XkbTranslateKey(register Display *dpy,
XKBBind.c:241:XkbTranslateKey(register Display *dpy,
XKBBind.c:260:    return XkbTranslateKeyCode(dpy->xkb_info->desc, key, mods, mods_rtrn,
XKBBind.c:265:XkbTranslateKeyCode(register XkbDescPtr xkb,
XKBBind.c:333:         * is XkbTranslateKeyCode that is causing the problem.  The
XKBBind.c:590:XkbTranslateKeySym(register Display *dpy,
XKBBind.c:734:    return XkbTranslateKeySym(dpy, keysym, new_mods, buffer, nbytes, NULL);
XKBlib.h:390:extern	Bool		XkbTranslateKeyCode(
XKBlib.h:398:extern	int		XkbTranslateKeySym(

#### XkbTranslateKeyCode ####
XKBBind.c:260:    return XkbTranslateKeyCode(dpy->xkb_info->desc, key, mods, mods_rtrn,
XKBBind.c:265:XkbTranslateKeyCode(register XkbDescPtr xkb,
XKBBind.c:333:         * is XkbTranslateKeyCode that is causing the problem.  The
XKBlib.h:390:extern	Bool		XkbTranslateKeyCode(

#### XkbTranslateKeySym ####
XKBBind.c:590:XkbTranslateKeySym(register Display *dpy,
XKBBind.c:734:    return XkbTranslateKeySym(dpy, keysym, new_mods, buffer, nbytes, NULL);
XKBlib.h:398:extern	int		XkbTranslateKeySym(

#### XkbUpdateActionVirtualMods ####
XKBMisc.c:826:XkbUpdateActionVirtualMods(XkbDescPtr xkb, XkbAction *act, unsigned changed)
XKBMisc.c:996:                        XkbUpdateActionVirtualMods(xkb, pAct, changed)) {
XKBlib.h:1135:extern Bool XkbUpdateActionVirtualMods(

#### XkbUpdateKeyTypeVirtualMods ####
XKBMisc.c:854:XkbUpdateKeyTypeVirtualMods(XkbDescPtr xkb,
XKBMisc.c:918:            XkbUpdateKeyTypeVirtualMods(xkb, &xkb->map->types[i], changed,
XKBlib.h:1141:extern void XkbUpdateKeyTypeVirtualMods(

#### XkbUpdateMapFromCore ####
XKBMisc.c:589:XkbUpdateMapFromCore(XkbDescPtr xkb,
XKBlib.h:1013:extern	Bool	XkbUpdateMapFromCore( /* False only on error */

#### XkbUseExtension ####
OpenDis.c:802:	XkbUseExtension(dpy,NULL,NULL);
XKBBell.c:49:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBBell.c:84:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBBell.c:121:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBBell.c:149:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL))) {
XKBBell.c:161:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL))) {
XKBBell.c:173:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL))) {
XKBBind.c:513:    if (!XkbUseExtension(dpy, NULL, NULL))
XKB.c:46:    if (!XkbUseExtension(dpy, majorReturn, minorReturn))
XKB.c:93:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:154:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:238:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:269:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:299:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:327:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:354:        XkbUseExtension(dpy, NULL, NULL);
XKB.c:367:        XkbUseExtension(dpy, NULL, NULL);
XKB.c:398:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:488:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:528:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:562:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:596:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:631:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKB.c:665:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)) ||
XKB.c:698:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)) ||
XKBCompat.c:119:        (!dpy->xkb_info && (!XkbUseExtension(dpy, NULL, NULL))))
XKBCompat.c:222:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBCtrls.c:59:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBCtrls.c:82:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBCtrls.c:114:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBCtrls.c:139:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBCtrls.c:162:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBCtrls.c:183:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBCtrls.c:276:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBExtDev.c:245:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBExtDev.c:291:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBExtDev.c:355:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBExtDev.c:396:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBExtDev.c:686:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBExtDev.c:742:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBExtDev.c:804:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGeom.c:678:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGeom.c:706:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetByName.c:55:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:574:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:623:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:647:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:672:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:698:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:723:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:747:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:784:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:818:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBGetMap.c:851:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBleds.c:44:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBleds.c:123:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBleds.c:164:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBleds.c:215:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBleds.c:283:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBList.c:112:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)) ||
XKBNames.c:247:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBNames.c:337:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBNames.c:545:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBSetGeom.c:454:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBSetMap.c:477:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)) || (!xkb))
XKBSetMap.c:549:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)) ||
XKBUse.c:216:        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
XKBUse.c:619:XkbUseExtension(Display *dpy, int *major_rtrn, int *minor_rtrn)
XKBUse.c:795:                "Internal Error!  XkbUseExtension succeeded with forceIgnore set\n");
XKBlib.h:318:extern	Bool	XkbUseExtension(

#### XkbVirtualModsToReal ####
XKB.c:447:        if (!XkbVirtualModsToReal(xkb, type->mods.vmods, &tmp))
XKB.c:455:                if (!XkbVirtualModsToReal(xkb, entry->mods.vmods, &tmp))
XKBMisc.c:408:            XkbVirtualModsToReal(xkb, tmp, &tmp);
XKBMisc.c:416:            XkbVirtualModsToReal(xkb, tmp, &tmp);
XKBMisc.c:802:XkbVirtualModsToReal(XkbDescPtr xkb, unsigned virtual_mask, unsigned *mask_rtrn)
XKBMisc.c:835:            XkbVirtualModsToReal(xkb, tmp, &tmp);
XKBMisc.c:843:            XkbVirtualModsToReal(xkb, tmp, &tmp);
XKBMisc.c:862:    XkbVirtualModsToReal(xkb, type->mods.vmods, &mask);
XKBMisc.c:869:                XkbVirtualModsToReal(xkb, entry->mods.vmods, &mask);
XKBMisc.c:924:        XkbVirtualModsToReal(xkb, xkb->ctrls->internal.vmods, &newMask);
XKBMisc.c:937:        XkbVirtualModsToReal(xkb, xkb->ctrls->ignore_lock.vmods, &newMask);
XKBMisc.c:955:                XkbVirtualModsToReal(xkb, map->mods.vmods, &newMask);
XKBMisc.c:974:            XkbVirtualModsToReal(xkb, compat->groups[i].vmods, &newMask);
XKBlib.h:624:extern	Bool	XkbVirtualModsToReal(

#### XkbXlibControlsImplemented ####
XKB.c:374:XkbXlibControlsImplemented(void)
XKBlib.h:339:extern	unsigned int	XkbXlibControlsImplemented(void);

#### XmbDrawImageString ####
mbWrap.c:109:XmbDrawImageString(
Xlcint.h:482:typedef void (*XmbDrawImageStringProc)(
Xlcint.h:552:    XmbDrawImageStringProc	mb_draw_image_string;
Xlcint.h:568:    XmbDrawImageStringProc	utf8_draw_image_string;
Xlib.h:3815:extern void XmbDrawImageString(

#### XmbDrawString ####
mbWrap.c:93:XmbDrawString(
Xlcint.h:471:typedef int (*XmbDrawStringProc)(
Xlcint.h:551:    XmbDrawStringProc		mb_draw_string;
Xlcint.h:567:    XmbDrawStringProc		utf8_draw_string;
Xlib.h:3782:extern void XmbDrawString(

#### XmbDrawText ####
mbWrap.c:60:XmbDrawText(
Xlib.h:3752:extern void XmbDrawText(

#### XmbLookupString ####
ICWrap.c:400:XmbLookupString(XIC ic, XKeyEvent *ev, char *buffer, int nbytes,
Xlib.h:3920:extern int XmbLookupString(

#### XmbResetIC ####
ICWrap.c:372:XmbResetIC(XIC ic)
Xlib.h:3895:extern char *XmbResetIC(

#### XmbSetWMProperties ####
mbWMProps.c:38:XmbSetWMProperties (
Xutil.h:678:extern void XmbSetWMProperties(

#### XmbTextEscapement ####
mbWrap.c:124:XmbTextEscapement(
Xlcint.h:445:typedef int (*XmbTextEscapementProc)(
Xlcint.h:548:    XmbTextEscapementProc	mb_escapement;
Xlcint.h:564:    XmbTextEscapementProc	utf8_escapement;
Xlib.h:3674:extern int XmbTextEscapement(

#### XmbTextExtents ####
mbWrap.c:133:XmbTextExtents(
Xlcint.h:451:typedef int (*XmbTextExtentsProc)(
Xlcint.h:549:    XmbTextExtentsProc		mb_extents;
Xlcint.h:565:    XmbTextExtentsProc		utf8_extents;
Xlib.h:3692:extern int XmbTextExtents(

#### XmbTextListToTextProperty ####
lcPublic.c:55:	_XmbTextListToTextProperty,
lcTxtPr.c:218:_XmbTextListToTextProperty(
lcWrap.c:425:XmbTextListToTextProperty(
mbWMProps.c:54:	XmbTextListToTextProperty(dpy, (char**)&windowName, 1,
mbWMProps.c:58:	XmbTextListToTextProperty(dpy, (char**)&iconName, 1,
Xlcint.h:286:typedef int (*XmbTextListToTextPropertyProc)(
Xlcint.h:322:    XmbTextListToTextPropertyProc	mb_text_list_to_prop;
Xlcint.h:324:    XmbTextListToTextPropertyProc	utf8_text_list_to_prop;
XlcPubI.h:165:extern int _XmbTextListToTextProperty(
Xutil.h:746:extern int XmbTextListToTextProperty(

#### XmbTextPerCharExtents ####
mbWrap.c:146:XmbTextPerCharExtents(
Xlcint.h:459:typedef Status (*XmbTextPerCharExtentsProc)(
Xlcint.h:550:    XmbTextPerCharExtentsProc	mb_extents_per_char;
Xlcint.h:566:    XmbTextPerCharExtentsProc	utf8_extents_per_char;
Xlib.h:3716:extern Status XmbTextPerCharExtents(

#### XmbTextPropertyToTextList ####
lcPrTxt.c:245:_XmbTextPropertyToTextList(
lcPublic.c:52:	_XmbTextPropertyToTextList,
lcWrap.c:377:XmbTextPropertyToTextList(
Xlcint.h:270:typedef int (*XmbTextPropertyToTextListProc)(
Xlcint.h:319:    XmbTextPropertyToTextListProc	mb_text_prop_to_list;
Xlcint.h:321:    XmbTextPropertyToTextListProc	utf8_text_prop_to_list;
XlcPubI.h:141:extern int _XmbTextPropertyToTextList(
Xutil.h:780:extern int XmbTextPropertyToTextList(

#### Xpermalloc ####
Quarks.c:138:static char *_Xpermalloc(unsigned int length);
Quarks.c:140:char *Xpermalloc(unsigned int length)
Quarks.c:145:    p = _Xpermalloc(length);
Quarks.c:149:#define Xpermalloc _Xpermalloc
Quarks.c:153:char *Xpermalloc(unsigned int length)
Quarks.c:200:	stringTable[0] = (XrmString *)Xpermalloc(QUANTSIZE);
Quarks.c:304:	new = Xpermalloc(QUANTSIZE);
Xresource.h:75:extern char *Xpermalloc(

#### XrmCombineDatabase ####
Xrm.c:759:void XrmCombineDatabase(
Xrm.c:812:    XrmCombineDatabase(from, into, True);
Xrm.c:1708:	XrmCombineDatabase(db, target, False);
Xresource.h:291:extern void XrmCombineDatabase(

#### XrmCombineFileDatabase ####
Xrm.c:1687:XrmCombineFileDatabase(
Xresource.h:271:extern Status XrmCombineFileDatabase(

#### XrmDestroyDatabase ####
ErrDes.c:183:	    XrmDestroyDatabase(temp_db);
OpenDis.c:891:	    XrmDestroyDatabase(dpy->db);
Xrm.c:354:	XrmDestroyDatabase(display->db);
Xrm.c:2647:void XrmDestroyDatabase(
Xresource.h:179:extern void XrmDestroyDatabase(

#### XrmEnumerateDatabase ####
KeysymStr.c:116:	(void)XrmEnumerateDatabase(keysymdb, &empty, &empty, XrmEnumAllLevels,
Xrm.c:1959:Bool XrmEnumerateDatabase(
Xrm.c:2096:    if (XrmEnumerateDatabase(db, &empty, &empty, XrmEnumAllLevels,
Xresource.h:300:extern Bool XrmEnumerateDatabase(

#### XrmGetDatabase ####
Xrm.c:337:XrmDatabase XrmGetDatabase(
Xresource.h:261:extern XrmDatabase XrmGetDatabase(

#### XrmGetFileDatabase ####
ErrDes.c:172:	temp_db = XrmGetFileDatabase(dbname);
GetDflt.c:146:	xdb = XrmGetFileDatabase (fname);
GetDflt.c:161:    userdb = XrmGetFileDatabase (xenv);
GetDflt.c:166:    if (fname[0] != '\0') userdb =  XrmGetFileDatabase(fname);
StrKeysym.c:65:	keysymdb = XrmGetFileDatabase(dbname);
Xrm.c:1669:XrmGetFileDatabase(
Xresource.h:267:extern XrmDatabase XrmGetFileDatabase(

#### XrmGetResource ####
ErrDes.c:195:	    XrmGetResource(db, tptr, "ErrorType.ErrorNumber",
imRm.c:124:    if(XrmGetResource(im->core.rdb, res_name, res_class, &str_type, &value)) {
imRm.c:139:    if(XrmGetResource(im->core.rdb, res_name, res_class, &str_type, &value)) {
imRm.c:154:    if(XrmGetResource(im->core.rdb, res_name, res_class, &str_type, &value)) {
imRm.c:174:    if(XrmGetResource(im->core.rdb, res_name, res_class, &str_type, &value)) {
imRm.c:197:    if(XrmGetResource(im->core.rdb, res_name, res_class, &str_type, &value)) {
Xrm.c:2581:XrmGetResource(XrmDatabase db, _Xconst char *name_str, _Xconst char *class_str,
Xresource.h:224:extern Bool XrmGetResource(

#### XrmGetStringDatabase ####
GetDflt.c:148:	xdb = XrmGetStringDatabase(dpy->xdefaults);
GetDflt.c:167:    xdb = XrmGetStringDatabase(dpy->xdefaults);
Xrm.c:1554:XrmGetStringDatabase(
Xresource.h:277:extern XrmDatabase XrmGetStringDatabase(

#### XrmInitialize ####
ErrDes.c:164:	XrmInitialize();
GetDflt.c:131:    XrmInitialize();
StrKeysym.c:59:	XrmInitialize();
Xrm.c:331:void XrmInitialize(void)
Xlib.h:1488:extern void XrmInitialize(

#### XrmLocaleOfDatabase ####
Xrm.c:2637:XrmLocaleOfDatabase(
Xresource.h:316:extern const char *XrmLocaleOfDatabase(

#### XrmMergeDatabases ####
GetDflt.c:162:    XrmMergeDatabases (userdb, &xdb);
GetDflt.c:168:    XrmMergeDatabases(userdb, &xdb);
Xrm.c:809:void XrmMergeDatabases(
Xresource.h:286:extern void XrmMergeDatabases(

#### XrmParseCommand ####
ParseCmd.c:49:/* XrmParseCommand()
ParseCmd.c:74:XrmParseCommand(
Xresource.h:347:extern void XrmParseCommand(

#### XrmPermStringToQuark ####
KeysymStr.c:114:	data.type = XrmPermStringToQuark("String");
lcWrap.c:583:	resources->xrm_name = XrmPermStringToQuark(resources->name);
lcWrap.c:602:	xrm_name = XrmPermStringToQuark(args->name);
lcWrap.c:634:	xrm_name = XrmPermStringToQuark(args->name);
Quarks.c:362:XrmPermStringToQuark(
Xrm.c:333:    XrmQString = XrmPermStringToQuark("String");
Xrm.c:334:    XrmQANY = XrmPermStringToQuark("?");
Xresource.h:96:extern XrmQuark XrmPermStringToQuark(

#### XrmPutFileDatabase ####
Xrm.c:2087:XrmPutFileDatabase(
Xresource.h:281:extern void XrmPutFileDatabase(

#### XrmPutLineResource ####
ParseCmd.c:182:			XrmPutLineResource(pdb, *argv);
Xrm.c:1543:XrmPutLineResource(
Xresource.h:211:extern void XrmPutLineResource(

#### XrmPutResource ####
Xrm.c:1023:XrmPutResource(
Xresource.h:191:extern void XrmPutResource(

#### XrmPutStringResource ####
Xrm.c:1523:XrmPutStringResource(
Xresource.h:205:extern void XrmPutStringResource(

#### XrmQGetResource ####
GetDflt.c:231:	(void)XrmQGetResource(dpy->db, names, classes, &fromType, &result);
StrKeysym.c:123:	(void)XrmQGetResource(keysymdb, names, Qkeysym, &from_type, &result);
Xrm.c:2538:Bool XrmQGetResource(
Xrm.c:2591:    result = XrmQGetResource(db, names, classes, &fromType, pValue);
Xresource.h:216:extern Bool XrmQGetResource(

#### XrmQGetSearchList ####
Xrm.c:2255:Bool XrmQGetSearchList(
Xresource.h:232:extern Bool XrmQGetSearchList(

#### XrmQGetSearchResource ####
Xrm.c:2300:Bool XrmQGetSearchResource(
Xresource.h:240:extern Bool XrmQGetSearchResource(

#### XrmQPutResource ####
Xrm.c:1009:void XrmQPutResource(
Xresource.h:183:extern void XrmQPutResource(

#### XrmQPutStringResource ####
ParseCmd.c:98:    XrmQPutStringResource(pdb, bindings, quarks, value_str);    \
Xrm.c:1040:XrmQPutStringResource(
Xresource.h:198:extern void XrmQPutStringResource(

#### XrmQuarkToString ####
KeysymStr.c:65:	gd->name = XrmQuarkToString(*quarks); /* XXX */
Quarks.c:390:XrmString XrmQuarkToString(register XrmQuark quark)
Xrm.c:450:	(void) fputs(XrmQuarkToString(*quarks), stream);
Xrm.c:2009:	(void) fputs(XrmQuarkToString(*quarks), stream);
Xrm.c:2592:    (*pType_str) = XrmQuarkToString(fromType);
Xresource.h:101:extern XrmString XrmQuarkToString(
Xresource.h:139:#define XrmNameToString(name)		XrmQuarkToString(name)
Xresource.h:145:#define XrmClassToString(c_class)	XrmQuarkToString(c_class)
Xresource.h:159:#define	XrmRepresentationToString(type)   XrmQuarkToString(type)

#### XrmSetDatabase ####
Xrm.c:347:void XrmSetDatabase(
Xresource.h:256:extern void XrmSetDatabase(

#### XrmStringToBindingQuarkList ####
ParseCmd.c:96:    XrmStringToBindingQuarkList(				\
Xrm.c:395:XrmStringToBindingQuarkList(
Xrm.c:1034:    XrmStringToBindingQuarkList(specifier, bindings, quarks);
Xrm.c:1533:    XrmStringToBindingQuarkList(specifier, bindings, quarks);
Xresource.h:125:extern void XrmStringToBindingQuarkList(

#### XrmStringToQuark ####
imDefIc.c:463:	quark = XrmStringToQuark(p->name);
imDefIc.c:522:    pre_quark = XrmStringToQuark(XNPreeditAttributes);
imDefIc.c:523:    sts_quark = XrmStringToQuark(XNStatusAttributes);
imDefIc.c:524:    separator = XrmStringToQuark(XNSeparatorofNestedList);
imDefIc.c:529:	    quark = XrmStringToQuark(p->name);
imDefIc.c:550:			*q_list = XrmStringToQuark(pp->name);
imDefIc.c:599:	*quark_list = XrmStringToQuark(p->name);
imDefIc.c:605:		*quark_list = XrmStringToQuark(pp->name);
imDefIm.c:1172:	    quark = XrmStringToQuark(p->name);
imDefIm.c:1200:	*quark_list = XrmStringToQuark(p->name);
imRmAttr.c:149:    pre_quark = XrmStringToQuark(XNPreeditAttributes);
imRmAttr.c:150:    sts_quark = XrmStringToQuark(XNStatusAttributes);
imRmAttr.c:516:    pre_quark = XrmStringToQuark(XNPreeditAttributes);
imRmAttr.c:517:    sts_quark = XrmStringToQuark(XNStatusAttributes);
imRmAttr.c:931:    if (res->xrm_name == XrmStringToQuark(XNClientWindow)) {
imRmAttr.c:937:    } else if (res->xrm_name == XrmStringToQuark(XNFocusWindow)) {
imRmAttr.c:954:    if (res->xrm_name == XrmStringToQuark(XNStdColormap)) {
imRmAttr.c:964:    } else if (res->xrm_name == XrmStringToQuark(XNFontSet)) {
imRmAttr.c:1005:    if (res->xrm_name == XrmStringToQuark(XNStdColormap)) {
imRmAttr.c:1015:    } else if (res->xrm_name == XrmStringToQuark(XNFontSet)) {
imRmAttr.c:1098:    pre_quark = XrmStringToQuark(XNPreeditAttributes);
imRmAttr.c:1099:    sts_quark = XrmStringToQuark(XNStatusAttributes);
imRmAttr.c:1198:    if (res->xrm_name == XrmStringToQuark(XNFontSet)) {
imRmAttr.c:1240:    if (res->xrm_name == XrmStringToQuark(XNFontSet)) {
imRmAttr.c:1299:    pre_quark = XrmStringToQuark(XNPreeditAttributes);
imRmAttr.c:1300:    sts_quark = XrmStringToQuark(XNStatusAttributes);
imRmAttr.c:1301:    separator = XrmStringToQuark(XNSeparatorofNestedList);
imRm.c:2250:    XrmQuark		 quark = XrmStringToQuark(name);
imRm.c:2670:    pre_quark = XrmStringToQuark(XNPreeditAttributes);
imRm.c:2671:    sts_quark = XrmStringToQuark(XNStatusAttributes);
imRm.c:2784:    if (res->xrm_name == XrmStringToQuark(XNClientWindow)) {
imRm.c:2793:    } else if (res->xrm_name == XrmStringToQuark(XNFocusWindow)) {
imRm.c:2819:    if (res->xrm_name == XrmStringToQuark(XNStdColormap)) {
imRm.c:2841:    if (res->xrm_name == XrmStringToQuark(XNStdColormap)) {
imRm.c:2872:    pre_quark = XrmStringToQuark(XNPreeditAttributes);
imRm.c:2873:    sts_quark = XrmStringToQuark(XNStatusAttributes);
imRm.c:2945:    XrmQuark		 quark = XrmStringToQuark(XNInputStyle);
imRm.c:2950:	if(quark == XrmStringToQuark(p->name)) {
imRm.c:3033:    pre_quark = XrmStringToQuark(XNPreeditAttributes);
imRm.c:3034:    sts_quark = XrmStringToQuark(XNStatusAttributes);
imRm.c:3151:	im_attr_info[i].quark = XrmStringToQuark(GET_NAME(im_attr_info[i]));
imRm.c:3163:	ic_attr_info[i].quark = XrmStringToQuark(GET_NAME(ic_attr_info[i]));
imRm.c:3168:	ic_pre_attr_info[i].quark = XrmStringToQuark(GET_NAME(ic_pre_attr_info[i]));
imRm.c:3173:	ic_sts_attr_info[i].quark = XrmStringToQuark(GET_NAME(ic_sts_attr_info[i]));
imRm.c:3184:	im_mode_quark[i] = XrmStringToQuark(GET_NAME(im_mode[i]));
imRm.c:3195:	ic_mode_quark[i] = XrmStringToQuark(GET_NAME(ic_mode[i]));
IMWrap.c:72:	res->xrm_name = XrmStringToQuark(res->resource_name);
lcCharSet.c:52:    xrm_name = XrmStringToQuark(name);
lcCharSet.c:73:    xrm_encoding_name = XrmStringToQuark(encoding_name);
lcCharSet.c:194:    charset->xrm_name = XrmStringToQuark(charset->name);
lcCharSet.c:208:        charset->xrm_encoding_name = XrmStringToQuark(charset->encoding_name);
lcConv.c:92:    from_type = XrmStringToQuark(from);
lcConv.c:93:    to_type = XrmStringToQuark(to);
lcConv.c:241:	QCTCharSet = XrmStringToQuark(XlcNCTCharSet);
lcConv.c:242:	QCharSet = XrmStringToQuark(XlcNCharSet);
lcConv.c:243:	QChar = XrmStringToQuark(XlcNChar);
lcConv.c:246:    from_type = XrmStringToQuark(from);
lcConv.c:247:    to_type = XrmStringToQuark(to);
lcConv.c:303:    from_type = XrmStringToQuark(from);
lcConv.c:304:    to_type = XrmStringToQuark(to);
lcDB.c:1218:    category_q = XrmStringToQuark(category);
lcDB.c:1219:    name_q = XrmStringToQuark(name);
lcDB.c:1290:    name_q = XrmStringToQuark(name);
lcDB.c:1292:    name_q = XrmStringToQuark((char*)__XOS2RedirRoot(name));
lcDB.c:1312:	lc_db[i].category_q = XrmStringToQuark(p->category);
lcDB.c:1313:	lc_db[i].name_q = XrmStringToQuark(p->name);
lcGeneric.c:523:            charsetd->xrm_encoding_name = XrmStringToQuark(tmp);
lcUTF8.c:374:	convptr->xrm_name = XrmStringToQuark(convptr->name);
lcUTF8.c:941:    xrm_name = XrmStringToQuark(name);
Quarks.c:346:XrmStringToQuark(
StrKeysym.c:67:	    Qkeysym[0] = XrmStringToQuark("Keysym");
Xrm.c:362:XrmStringToQuarkList(
Xrm.c:1035:    PutEntry(*pdb, bindings, quarks, XrmStringToQuark(type), value);
Xresource.h:92:extern XrmQuark XrmStringToQuark(
Xresource.h:120:extern void XrmStringToQuarkList(
Xresource.h:140:#define XrmStringToName(string)		XrmStringToQuark(string)
Xresource.h:141:#define XrmStringToNameList(str, name)	XrmStringToQuarkList(str, name)
Xresource.h:146:#define XrmStringToClass(c_class)	XrmStringToQuark(c_class)
Xresource.h:147:#define XrmStringToClassList(str,c_class) XrmStringToQuarkList(str, c_class)
Xresource.h:158:#define XrmStringToRepresentation(string)   XrmStringToQuark(string)
Xutil.h:361:#define XStringToContext(string)   ((XContext) XrmStringToQuark(string))

#### XrmStringToQuarkList ####
Xrm.c:362:XrmStringToQuarkList(
Xresource.h:120:extern void XrmStringToQuarkList(
Xresource.h:141:#define XrmStringToNameList(str, name)	XrmStringToQuarkList(str, name)
Xresource.h:147:#define XrmStringToClassList(str,c_class) XrmStringToQuarkList(str, c_class)

#### XrmUniqueQuark ####
Quarks.c:76:static XrmQuark nextUniq = -1;	/* next quark from XrmUniqueQuark */
Quarks.c:377:XrmQuark XrmUniqueQuark(void)
Xresource.h:105:extern XrmQuark XrmUniqueQuark(
Xutil.h:360:#define XUniqueContext()       ((XContext) XrmUniqueQuark())

#### Xutf8DrawImageString ####
utf8Wrap.c:131:Xutf8DrawImageString(
Xlib.h:3837:extern void Xutf8DrawImageString(

#### Xutf8DrawString ####
utf8Wrap.c:115:Xutf8DrawString(
Xlib.h:3804:extern void Xutf8DrawString(

#### Xutf8DrawText ####
utf8Wrap.c:82:Xutf8DrawText(
Xlib.h:3772:extern void Xutf8DrawText(

#### Xutf8LookupString ####
ICWrap.c:420:Xutf8LookupString(XIC ic, XKeyEvent *ev, char *buffer, int nbytes,
Xlib.h:3938:extern int Xutf8LookupString(

#### Xutf8ResetIC ####
ICWrap.c:388:Xutf8ResetIC(XIC ic)
Xlib.h:3899:extern char *Xutf8ResetIC(

#### Xutf8SetWMProperties ####
utf8WMProps.c:60:Xutf8SetWMProperties (
Xutil.h:690:extern void Xutf8SetWMProperties(

#### Xutf8TextEscapement ####
utf8Wrap.c:146:Xutf8TextEscapement(
Xlib.h:3686:extern int Xutf8TextEscapement(

#### Xutf8TextExtents ####
utf8Wrap.c:155:Xutf8TextExtents(
Xlib.h:3708:extern int Xutf8TextExtents(

#### Xutf8TextListToTextProperty ####
lcPublic.c:57:	_Xutf8TextListToTextProperty,
lcTxtPr.c:244:_Xutf8TextListToTextProperty(
lcWrap.c:459:Xutf8TextListToTextProperty(
utf8WMProps.c:76:	Xutf8TextListToTextProperty(dpy, (char**)&windowName, 1,
utf8WMProps.c:80:	Xutf8TextListToTextProperty(dpy, (char**)&iconName, 1,
XlcPubI.h:183:extern int _Xutf8TextListToTextProperty(
Xutil.h:762:extern int Xutf8TextListToTextProperty(

#### Xutf8TextPerCharExtents ####
utf8Wrap.c:168:Xutf8TextPerCharExtents(
Xlib.h:3740:extern Status Xutf8TextPerCharExtents(

#### Xutf8TextPropertyToTextList ####
lcPrTxt.c:269:_Xutf8TextPropertyToTextList(
lcPublic.c:54:	_Xutf8TextPropertyToTextList,
lcWrap.c:409:Xutf8TextPropertyToTextList(
XlcPubI.h:157:extern int _Xutf8TextPropertyToTextList(
Xutil.h:794:extern int Xutf8TextPropertyToTextList(

#### XwcDrawImageString ####
wcWrap.c:109:XwcDrawImageString(
Xlcint.h:530:typedef void (*XwcDrawImageStringProc)(
Xlcint.h:560:    XwcDrawImageStringProc	wc_draw_image_string;
Xlib.h:3826:extern void XwcDrawImageString(

#### XwcDrawString ####
wcWrap.c:94:XwcDrawString(
Xlcint.h:519:typedef int (*XwcDrawStringProc)(
Xlcint.h:559:    XwcDrawStringProc		wc_draw_string;
Xlib.h:3793:extern void XwcDrawString(

#### XwcDrawText ####
wcWrap.c:61:XwcDrawText(
Xlib.h:3762:extern void XwcDrawText(

#### XwcFreeStringList ####
lcPrTxt.c:281:_XwcFreeStringList(
lcPublic.c:58:	_XwcFreeStringList,
lcWrap.c:476:XwcFreeStringList(
Xlcint.h:304:typedef void (*XwcFreeStringListProc)(
Xlcint.h:325:    XwcFreeStringListProc		wc_free_string_list;
XlcPubI.h:192:extern void _XwcFreeStringList(
Xutil.h:770:extern void XwcFreeStringList(

#### XwcLookupString ####
ICWrap.c:410:XwcLookupString(XIC ic, XKeyEvent *ev, wchar_t *buffer, int nchars,
imThaiFlt.c:1312:    XwcLookupString((XIC)ic, &ev->xkey, wbuf, sizeof(wbuf) / sizeof(wbuf[0]),
Xlib.h:3929:extern int XwcLookupString(

#### XwcResetIC ####
ICWrap.c:380:XwcResetIC(XIC ic)
Xlib.h:3891:extern wchar_t *XwcResetIC(

#### XwcTextEscapement ####
wcWrap.c:124:XwcTextEscapement(
Xlcint.h:493:typedef int (*XwcTextEscapementProc)(
Xlcint.h:556:    XwcTextEscapementProc	wc_escapement;
Xlib.h:3680:extern int XwcTextEscapement(

#### XwcTextExtents ####
wcWrap.c:133:XwcTextExtents(
Xlcint.h:499:typedef int (*XwcTextExtentsProc)(
Xlcint.h:557:    XwcTextExtentsProc		wc_extents;
Xlib.h:3700:extern int XwcTextExtents(

#### XwcTextListToTextProperty ####
lcPublic.c:56:	_XwcTextListToTextProperty,
lcTxtPr.c:231:_XwcTextListToTextProperty(
lcWrap.c:442:XwcTextListToTextProperty(
Xlcint.h:295:typedef int (*XwcTextListToTextPropertyProc)(
Xlcint.h:323:    XwcTextListToTextPropertyProc	wc_text_list_to_prop;
XlcPubI.h:174:extern int _XwcTextListToTextProperty(
Xutil.h:754:extern int XwcTextListToTextProperty(

#### XwcTextPerCharExtents ####
wcWrap.c:146:XwcTextPerCharExtents(
Xlcint.h:507:typedef Status (*XwcTextPerCharExtentsProc)(
Xlcint.h:558:    XwcTextPerCharExtentsProc	wc_extents_per_char;
Xlib.h:3728:extern Status XwcTextPerCharExtents(

#### XwcTextPropertyToTextList ####
lcPrTxt.c:257:_XwcTextPropertyToTextList(
lcPublic.c:53:	_XwcTextPropertyToTextList,
lcWrap.c:393:XwcTextPropertyToTextList(
Xlcint.h:278:typedef int (*XwcTextPropertyToTextListProc)(
Xlcint.h:320:    XwcTextPropertyToTextListProc	wc_text_prop_to_list;
XlcPubI.h:149:extern int _XwcTextPropertyToTextList(
Xutil.h:787:extern int XwcTextPropertyToTextList(

#### _Utf8GetConvByName ####
imConv.c:87:    XPointer cvt = _Utf8GetConvByName(encoding_name);
imConv.c:92:               return _Utf8GetConvByName(SubstTable[i].charset_name);
lcUTF8.c:930:_Utf8GetConvByName(
XlcPubI.h:293:_Utf8GetConvByName(

#### _X11TransBytesReadable ####
XlibInt.c:484:                _X11TransBytesReadable(dpy->trans_conn, &pend);
XlibInt.c:533:	    if (_X11TransBytesReadable(dpy->trans_conn, &pend) < 0)
XlibInt.c:1175:	if (_X11TransBytesReadable(dpy->trans_conn, &pend) < 0)
XlibInt.c:1218:		    if (_X11TransBytesReadable(dpy->trans_conn, &pend) < 0)
XlibInt.c:1393:	    if (_X11TransBytesReadable(dpy->trans_conn, &pend) < 0)

#### _X11TransClose ####
ConnDis.c:577:            fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransClose(trans_conn).\n");
ConnDis.c:579:	    _X11TransClose(trans_conn);
ConnDis.c:604:	    _X11TransClose(trans_conn);
ConnDis.c:685:    if (trans_conn) (void)_X11TransClose(trans_conn);
ConnDis.c:774:    _X11TransClose(trans_conn);

#### _X11TransCloseForCloning ####

#### _X11TransConnect ####
ConnDis.c:174:_X11TransConnectDisplay (
ConnDis.c:215:        fprintf(stderr, "_X11TransConnectDisplay: Called with display_name [%s].\n", display_name);
ConnDis.c:238:        fprintf(stderr, "_X11TransConnectDisplay: Forced protocol to [%s].\n", pprotocol);
ConnDis.c:274:        fprintf(stderr, "_X11TransConnectDisplay: Checking hostname [%s].\n", p);
ConnDis.c:307:        fprintf(stderr, "_X11TransConnectDisplay: Forced hostname [%s].\n", phostname);
ConnDis.c:403:        fprintf(stderr, "_X11TransConnectDisplay: Searching port in port [%s].\n", phostname);
ConnDis.c:498:        fprintf(stderr, "_X11TransConnectDisplay: Converted protocol to [%s].\n", pprotocol);
ConnDis.c:560:        fprintf(stderr, "_X11TransConnectDisplay: Entering connection loop.\n");
ConnDis.c:565:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransOpenCOTSClient(address) with address [%s].\n", address);
ConnDis.c:572:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransConnect(trans_conn,address).\n");
ConnDis.c:574:	if ((connect_stat = _X11TransConnect(trans_conn,address)) < 0 )
ConnDis.c:577:            fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransClose(trans_conn).\n");
ConnDis.c:589:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransGetPeerAddr(trans_conn, &family, &saddrlen, &saddr).\n");
ConnDis.c:600:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransConvertAddress(&family, &saddrlen, &saddr).\n");
ConnDis.c:618:        fprintf(stderr, "_X11TransConnectDisplay: Out of connection loop.\n");
ConnDis.c:746:   trans_conn = _X11TransConnectDisplay (
OpenDis.c:215:	if ((dpy->trans_conn = _X11TransConnectDisplay (
Xintconn.h:26:extern XtransConnInfo _X11TransConnectDisplay(char *display_name,

#### _X11TransConnectDisplay ####
ConnDis.c:174:_X11TransConnectDisplay (
ConnDis.c:215:        fprintf(stderr, "_X11TransConnectDisplay: Called with display_name [%s].\n", display_name);
ConnDis.c:238:        fprintf(stderr, "_X11TransConnectDisplay: Forced protocol to [%s].\n", pprotocol);
ConnDis.c:274:        fprintf(stderr, "_X11TransConnectDisplay: Checking hostname [%s].\n", p);
ConnDis.c:307:        fprintf(stderr, "_X11TransConnectDisplay: Forced hostname [%s].\n", phostname);
ConnDis.c:403:        fprintf(stderr, "_X11TransConnectDisplay: Searching port in port [%s].\n", phostname);
ConnDis.c:498:        fprintf(stderr, "_X11TransConnectDisplay: Converted protocol to [%s].\n", pprotocol);
ConnDis.c:560:        fprintf(stderr, "_X11TransConnectDisplay: Entering connection loop.\n");
ConnDis.c:565:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransOpenCOTSClient(address) with address [%s].\n", address);
ConnDis.c:572:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransConnect(trans_conn,address).\n");
ConnDis.c:577:            fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransClose(trans_conn).\n");
ConnDis.c:589:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransGetPeerAddr(trans_conn, &family, &saddrlen, &saddr).\n");
ConnDis.c:600:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransConvertAddress(&family, &saddrlen, &saddr).\n");
ConnDis.c:618:        fprintf(stderr, "_X11TransConnectDisplay: Out of connection loop.\n");
ConnDis.c:746:   trans_conn = _X11TransConnectDisplay (
OpenDis.c:215:	if ((dpy->trans_conn = _X11TransConnectDisplay (
Xintconn.h:26:extern XtransConnInfo _X11TransConnectDisplay(char *display_name,

#### _X11TransConvertAddress ####
ConnDis.c:600:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransConvertAddress(&family, &saddrlen, &saddr).\n");
ConnDis.c:602:	if( _X11TransConvertAddress(&family, &saddrlen, &saddr) < 0 )

#### _X11TransDisconnect ####
ConnDis.c:773:    _X11TransDisconnect(trans_conn);

#### _X11TransFreeConnInfo ####
ConnDis.c:753:       _X11TransFreeConnInfo (trans_conn);

#### _X11TransGetConnectionNumber ####
ConnDis.c:752:       int fd = _X11TransGetConnectionNumber (trans_conn);
OpenDis.c:224:	dpy->fd = _X11TransGetConnectionNumber (dpy->trans_conn);

#### _X11TransGetHostname ####

#### _X11TransGetMyAddr ####
ConnDis.c:1328:	_X11TransGetMyAddr(trans_conn, &family, &addrlen, &addr);

#### _X11TransGetPeerAddr ####
ConnDis.c:589:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransGetPeerAddr(trans_conn, &family, &saddrlen, &saddr).\n");
ConnDis.c:591:	_X11TransGetPeerAddr(trans_conn, &family, &saddrlen, &saddr);

#### _X11TransIsLocal ####

#### _X11TransOpenCOTSClient ####
ConnDis.c:536:     * host, and port back together to pass to _X11TransOpenCOTSClient().
ConnDis.c:565:        fprintf(stderr, "_X11TransConnectDisplay: Going to call _X11TransOpenCOTSClient(address) with address [%s].\n", address);
ConnDis.c:567:	if ( (trans_conn = _X11TransOpenCOTSClient(address)) == NULL )

#### _X11TransRead ####
XlibInt.c:1553:                bytes_read = _X11TransRead(dpy->trans_conn, data, (int)size);
XlibInt.c:1562:	while ((bytes_read = _X11TransRead(dpy->trans_conn, data, (int)size))
XlibInt.c:1688:            bytes_read = _X11TransReadv (dpy->trans_conn, iov, 2);
XlibInt.c:1697:	while ((bytes_read = _X11TransReadv (dpy->trans_conn, iov, 2)) != size) {

#### _X11TransReadv ####
XlibInt.c:1688:            bytes_read = _X11TransReadv (dpy->trans_conn, iov, 2);
XlibInt.c:1697:	while ((bytes_read = _X11TransReadv (dpy->trans_conn, iov, 2)) != size) {

#### _X11TransSetOption ####
ConnDis.c:630:    _X11TransSetOption(trans_conn,TRANS_CLOSEONEXEC,1);
ConnDis.c:822:    _X11TransSetOption(dpy->trans_conn, TRANS_NONBLOCKING, 1);

#### _X11TransSocketINET6Funcs ####

#### _X11TransSocketINETFuncs ####

#### _X11TransSocketLocalFuncs ####

#### _X11TransSocketProxyConnInfo ####
OpenDis.c:72:extern void *_X11TransSocketProxyConnInfo(XtransConnInfo);
OpenDis.c:407:            if (_X11TransSocketProxyConnInfo(dpy->trans_conn) == NULL) {

#### _X11TransSocketTCPFuncs ####

#### _X11TransSocketUNIXFuncs ####

#### _X11TransWrite ####
ConnDis.c:816:    len -= _X11TransWritev (dpy->trans_conn, iovarray, niov);
XlibInt.c:1029:	    write_stat = _X11TransWrite(dpy->trans_conn,
XlibInt.c:1873:	    if ((len = _X11TransWritev(dpy->trans_conn, iov, i)) >= 0) {

#### _X11TransWritev ####
ConnDis.c:816:    len -= _X11TransWritev (dpy->trans_conn, iovarray, niov);
XlibInt.c:1873:	    if ((len = _X11TransWritev(dpy->trans_conn, iov, i)) >= 0) {

#### _XAllocID ####
OpenDis.c:293:	dpy->resource_alloc = _XAllocID;
OpenDis.c:294:	dpy->idlist_alloc = _XAllocIDs;
XlibInt.c:1998: * _XAllocID - resource ID allocation routine.
XlibInt.c:2000:XID _XAllocID(
XlibInt.c:2024: * _XAllocIDs - multiple resource ID allocation routine.
XlibInt.c:2026:void _XAllocIDs(
Xlibint.h:1007:extern XID _XAllocID(Display *dpy);
Xlibint.h:1008:extern void _XAllocIDs(Display *dpy, XID *ids, int count);

#### _XAllocIDs ####
OpenDis.c:294:	dpy->idlist_alloc = _XAllocIDs;
XlibInt.c:2024: * _XAllocIDs - multiple resource ID allocation routine.
XlibInt.c:2026:void _XAllocIDs(
Xlibint.h:1008:extern void _XAllocIDs(Display *dpy, XID *ids, int count);

#### _XAllocScratch ####
PutImage.c:677:	if ((buf = _XAllocScratch(dpy, length)) == NULL) {
PutImage.c:700:	    if (! (temp = _XAllocScratch(dpy, temp_length))) {
PutImage.c:804:	     _XAllocScratch(dpy, length)) == NULL) {
QuTextE16.c:54:    if ((buf = _XAllocScratch (dpy, (unsigned long) nbytes))) {
QuTextExt.c:54:    if ((buf = _XAllocScratch (dpy, (unsigned long) nbytes))) {
XlibInt.c:3762:char *_XAllocScratch(
XlibInt.c:3786:    buf = _XAllocScratch(dpy, nbytes);
Xlibint.h:883:extern char *_XAllocScratch(

#### _XAllocTemp ####
Region.c:266:    if ((xr = (XRectangle *) _XAllocTemp(dpy, total))) {
XKBSetGeom.c:420:        tbuf = _XAllocTemp(dpy, sz);
XlibInt.c:3780:char *_XAllocTemp(
Xlibint.h:887:extern char *_XAllocTemp(

#### _XAsyncErrorHandler ####
cmsCmap.c:164:		async.handler = _XAsyncErrorHandler;
Font.c:203:	async.handler = _XAsyncErrorHandler;
Font.c:424:	async1.handler = _XAsyncErrorHandler;
Font.c:446:    async2.handler = _XAsyncErrorHandler;
ReconfWM.c:83:	async.handler = _XAsyncErrorHandler;
XlibAsync.c:62:_XAsyncErrorHandler(
Xlibint.h:912:extern Bool _XAsyncErrorHandler(

#### _XCloseLC ####
imInsClbk.c:260:		_XCloseLC( icb->lcd );
IMWrap.c:138:    _XCloseLC (lcd);
lcRM.c:87:    _XCloseLC(((UbState) state)->lcd);
lcRM.c:179:    _XCloseLC(((MbState) state)->lcd);
lcWrap.c:322:_XCloseLC(
lcWrap.c:357:	_XCloseLC(last_lcd);
OMWrap.c:62:    _XCloseLC(lcd);
Xlcint.h:763:extern void _XCloseLC(

#### _XColor_to_XcmsRGB ####
cmsAllNCol.c:132:    _XColor_to_XcmsRGB(ccc, &XColor_in_out, pColor_scrn_return, 1);
cmsAllNCol.c:183:    _XColor_to_XcmsRGB(ccc, &exact_def, pColor_exact_return, 1);
cmsAllNCol.c:184:    _XColor_to_XcmsRGB(ccc, &hard_def, pColor_scrn_return, 1);
cmsLkCol.c:171:    _XColor_to_XcmsRGB(ccc, &def, pColor_exact_return, 1);
cmsLkCol.c:172:    _XColor_to_XcmsRGB(ccc, &scr, pColor_scrn_return, 1);
SetGetCols.c:154:    _XColor_to_XcmsRGB(ccc, &XColors_in_out, pColors_in_out, 1);
SetGetCols.c:283:    _XColor_to_XcmsRGB(ccc, pXColors_in_out, pColors_in_out, nColors);
XRGB.c:107: *		_XColor_to_XcmsRGB
XRGB.c:112:_XColor_to_XcmsRGB(
Cv.h:99:_XColor_to_XcmsRGB(

#### _XConnectDisplay ####
ConnDis.c:734:int _XConnectDisplay (
Xintconn.h:13:int _XConnectDisplay (

#### _XCopyEventCookie ####
PeekEvent.c:54:	if (_XCopyEventCookie(dpy, &event->xcookie, &copy.xcookie)) {
PeekIfEv.c:62:		    if (_XCopyEventCookie(dpy, &event->xcookie, &copy.xcookie)) {
PutBEvent.c:59:		_XCopyEventCookie(dpy, &event->xcookie, &copy.xcookie);
XlibInt.c:2902:_XCopyEventCookie(Display *dpy, XGenericEventCookie *in, XGenericEventCookie *out)
Xlibint.h:1352:extern Bool _XCopyEventCookie(

#### _XCopyToArg ####
imRmAttr.c:231:	_XCopyToArg((XPointer)data, (XPointer *)&value, data_len);
IMWrap.c:77:_XCopyToArg(XPointer src, XPointer *dst, unsigned int size)
lcWrap.c:529:       On Big Endian machines, this behaves differently than _XCopyToArg. */
Xlcint.h:785:extern void _XCopyToArg(

#### _XCreateMutex_fn ####
locking.c:605:    _XCreateMutex_fn = _XCreateMutex;
XlibInt.c:83:void (*_XCreateMutex_fn)(LockInfoPtr) = NULL;
XlibInt.c:4193:void (**_XCreateMutex_fn_p)(LockInfoPtr) = &_XCreateMutex_fn;
Xlibint.h:303:#define _XCreateMutex_fn (*_XCreateMutex_fn_p)
Xlibint.h:311:extern void (*_XCreateMutex_fn)(
Xlibint.h:346:#define _XCreateMutex(lock)	if (_XCreateMutex_fn) (*_XCreateMutex_fn)(lock);

#### (arch=amd64 ia64 alpha ppc64 arm64)_XData32 ####

#### _XDefaultError ####
ErrHndlr.c:47:	oldhandler = _XDefaultError;
ErrHndlr.c:53:	_XErrorFunction = _XDefaultError;
XlibInt.c:3615:int _XDefaultError(
XlibInt.c:3677:	return _XDefaultError(dpy, (XErrorEvent *)&event);
Xlibint.h:1313:extern int _XDefaultError(

#### _XDefaultIOError ####
ErrHndlr.c:75:	oldhandler = _XDefaultIOError;
ErrHndlr.c:81:	_XIOErrorFunction = _XDefaultIOError;
XlibInt.c:3452: * _XDefaultIOError - Default fatal system error reporting routine.  Called
XlibInt.c:3455:int _XDefaultIOError(
XlibInt.c:3481:            fprintf(stderr, "_XDefaultIOError: Going to return from the error handler.\n");
XlibInt.c:3488:            fprintf(stderr, "_XDefaultIOError: Going to exit from the program.\n");
XlibInt.c:3706:	_XDefaultIOError(dpy);
Xlibint.h:1317:extern int _XDefaultIOError(

#### _XDefaultWireError ####
InitExt.c:328:	if (proc == NULL) proc = (WireToErrorType)_XDefaultWireError;
InitExt.c:334:		dpy->error_vec[i] = _XDefaultWireError;
XlibInt.c:3625:Bool _XDefaultWireError(Display *display, XErrorEvent *he, xError *we)
Xlibint.h:1003:extern Bool _XDefaultWireError(Display *display, XErrorEvent *he, xError *we);

#### _XDeq ####
ChkIfEv.c:61:		    _XDeq(dpy, prev, qelt);
ChkIfEv.c:117:		    _XDeq(dpy, prev, qelt);
ChkMaskEv.c:69:		    _XDeq(dpy, prev, qelt);
ChkTypEv.c:59:		    _XDeq(dpy, prev, qelt);
ChkTypWEv.c:61:		    _XDeq(dpy, prev, qelt);
ChkWinEv.c:70:		    _XDeq(dpy, prev, qelt);
IfEvent.c:60:		    _XDeq(dpy, prev, qelt);
MaskEvent.c:68:		    _XDeq(dpy, prev, qelt);
NextEvent.c:59:	_XDeq(dpy, NULL, qelt);
WinEvent.c:72:		    _XDeq(dpy, prev, qelt);
XlibAsync.c:90:void _XDeqAsyncHandler(
XlibInt.c:2801:   data pointer) and adds it to the cookiejar. _XDeq just removes
XlibInt.c:2988: * _XDeq - Remove event packet from the display's queue.
XlibInt.c:2990:void _XDeq(
Xlibint.h:717:extern void _XDeqAsyncHandler(Display *dpy, _XAsyncHandler *handler);
Xlibint.h:722:	_XDeqAsyncHandler(dpy, handler); \
Xlibint.h:972:extern void _XDeq(

#### _XDeqAsyncHandler ####
XlibAsync.c:90:void _XDeqAsyncHandler(
Xlibint.h:717:extern void _XDeqAsyncHandler(Display *dpy, _XAsyncHandler *handler);
Xlibint.h:722:	_XDeqAsyncHandler(dpy, handler); \

#### _XDisconnectDisplay ####
ClDisplay.c:78:	_XDisconnectDisplay(dpy->trans_conn);
ConnDis.c:771:int _XDisconnectDisplay (XtransConnInfo trans_conn)
OpenDis.c:379:	    _XDisconnectDisplay (dpy->trans_conn);
OpenDis.c:399:	    _XDisconnectDisplay (dpy->trans_conn);
OpenDis.c:416:	    _XDisconnectDisplay (dpy->trans_conn);
OpenDis.c:435:		_XDisconnectDisplay (dpy->trans_conn);
OpenDis.c:984:    _XDisconnectDisplay (dpy->trans_conn);
Xintconn.h:22:extern int _XDisconnectDisplay(XtransConnInfo trans_conn);

#### _XEatData ####
AllCells.c:57:	    _XEatDataWords(dpy, rep.length);
Font.c:219:	_XEatDataWords(dpy, reply_left);
Font.c:253:		_XEatDataWords(dpy, reply_left);
Font.c:276:	    _XEatDataWords(dpy, reply_left);
Font.c:463:	_XEatDataWords(dpy, reply_left);
Font.c:497:	    _XEatDataWords(dpy, reply_left);
Font.c:512:	_XEatDataWords(dpy, reply_left);
Font.c:529:		_XEatDataWords(dpy, reply_left);
Font.c:536:		_XEatDataWords(dpy, reply_left);
FontInfo.c:79:	    _XEatDataWords(dpy, reply_left);
FontInfo.c:187:    _XEatDataWords(dpy, reply_left);
FontNames.c:78:	    _XEatDataWords(dpy, rep.length);
GetAtomNm.c:81:	_XEatDataWords(dpy, rep.length);
GetAtomNm.c:179:		_XEatDataWords(dpy, rep.length);
GetFPath.c:62:		_XEatDataWords(dpy, rep.length);
GetImage.c:89:	    _XEatDataWords(dpy, rep.length);
GetMoEv.c:60:	_XEatDataWords (dpy, rep.length);
GetPntMap.c:60:	_XEatDataWords(dpy, rep.length);
GetPntMap.c:79:	_XEatData(dpy, remainder);
GetPntMap.c:119:	    _XEatDataWords(dpy, rep.length);
GetProp.c:131:	    _XEatDataWords(dpy, reply.length);
LiHosts.c:108:	    _XEatDataWords(dpy, reply.length);
LiICmaps.c:56:	    _XEatDataWords(dpy, rep.length);
LiProps.c:55:	    _XEatDataWords(dpy, rep.length);
ListExt.c:67:		_XEatDataWords(dpy, rep.length);
ModMap.c:56:	_XEatDataWords(dpy, rep.length);
OpenDis.c:780:		    _XEatDataWords(dpy, reply.length);
QuColors.c:70:	    _XEatDataWords(dpy, rep.length);
QuTree.c:57:	    _XEatDataWords(dpy, rep.length);
XKBGetByName.c:216:        _XEatData(dpy, extraLen);
XlibAsync.c:117:	    _XEatData (dpy, (rep->generic.length << 2) - len);
XlibAsync.c:132:	    _XEatData (dpy, (rep->generic.length << 2) - len);
XlibAsync.c:142:	_XEatData (dpy, (rep->generic.length << 2) - len);
XlibAsync.c:170:	    _XEatData(dpy, datalen - len);
XlibAsync.c:180:	_XEatData(dpy, discardtotal - len);
XlibInt.c:2243:			    _XEatData(dpy, (rep->generic.length - extra) << 2);
XlibInt.c:2396:	    _XEatData(dpy, len - *lenp);
XlibInt.c:2754:void _XEatData(
XlibInt.c:2762:    fprintf(stderr, "_XEatData: Going to eat [%ld] bytes of data from descriptor [%d].\n",
XlibInt.c:2788:void _XEatDataWords(Display *dpy, unsigned long n)
XlibInt.c:2794:    _XEatData (dpy, n << 2);
Xlibint.h:872:extern void _XEatData(
Xlibint.h:876:extern void _XEatDataWords(
Xlibint.h:881:# pragma rarely_called(_XEatData, _XEatDataWords)

#### _XEatDataWords ####
AllCells.c:57:	    _XEatDataWords(dpy, rep.length);
Font.c:219:	_XEatDataWords(dpy, reply_left);
Font.c:253:		_XEatDataWords(dpy, reply_left);
Font.c:276:	    _XEatDataWords(dpy, reply_left);
Font.c:463:	_XEatDataWords(dpy, reply_left);
Font.c:497:	    _XEatDataWords(dpy, reply_left);
Font.c:512:	_XEatDataWords(dpy, reply_left);
Font.c:529:		_XEatDataWords(dpy, reply_left);
Font.c:536:		_XEatDataWords(dpy, reply_left);
FontInfo.c:79:	    _XEatDataWords(dpy, reply_left);
FontInfo.c:187:    _XEatDataWords(dpy, reply_left);
FontNames.c:78:	    _XEatDataWords(dpy, rep.length);
GetAtomNm.c:81:	_XEatDataWords(dpy, rep.length);
GetAtomNm.c:179:		_XEatDataWords(dpy, rep.length);
GetFPath.c:62:		_XEatDataWords(dpy, rep.length);
GetImage.c:89:	    _XEatDataWords(dpy, rep.length);
GetMoEv.c:60:	_XEatDataWords (dpy, rep.length);
GetPntMap.c:60:	_XEatDataWords(dpy, rep.length);
GetPntMap.c:119:	    _XEatDataWords(dpy, rep.length);
GetProp.c:131:	    _XEatDataWords(dpy, reply.length);
LiHosts.c:108:	    _XEatDataWords(dpy, reply.length);
LiICmaps.c:56:	    _XEatDataWords(dpy, rep.length);
LiProps.c:55:	    _XEatDataWords(dpy, rep.length);
ListExt.c:67:		_XEatDataWords(dpy, rep.length);
ModMap.c:56:	_XEatDataWords(dpy, rep.length);
OpenDis.c:780:		    _XEatDataWords(dpy, reply.length);
QuColors.c:70:	    _XEatDataWords(dpy, rep.length);
QuTree.c:57:	    _XEatDataWords(dpy, rep.length);
XlibInt.c:2788:void _XEatDataWords(Display *dpy, unsigned long n)
Xlibint.h:876:extern void _XEatDataWords(
Xlibint.h:881:# pragma rarely_called(_XEatData, _XEatDataWords)

#### _XEnq ####
XlibInt.c:574:			_XEnq (dpy, (xEvent *)rep);
XlibInt.c:1328:		    _XEnq (dpy, (xEvent *)rep);
XlibInt.c:1514:                        _XEnq (dpy, (xEvent *)rep);
XlibInt.c:2333:		_XEnq(dpy, (xEvent *) rep);
XlibInt.c:2799:   dpy->cookiejar is a linked list. _XEnq receives the events but leaves
XlibInt.c:2922: * _XEnq - Place event packets on the display's queue.
XlibInt.c:2926:void _XEnq(
Xlibint.h:968:extern void _XEnq(

#### _XError ####
ErrDes.c:71:static const char _XErrorList[] =
ErrDes.c:92:/* offsets into _XErrorList */
ErrDes.c:93:static const unsigned char _XErrorOffsets[] = {
ErrDes.c:114:                                     _XErrorList + _XErrorOffsets[code],
ErrHndlr.c:34: * (_XErrorFunction) to be the specified routine.  If NULL is passed in
ErrHndlr.c:44:    oldhandler = _XErrorFunction;
ErrHndlr.c:50:	_XErrorFunction = handler;
ErrHndlr.c:53:	_XErrorFunction = _XDefaultError;
GetProp.c:125:		_XError(dpy, &error);
globals.c:72:ZEROINIT (XErrorHandler, _XErrorFunction, NULL);
OpenDis.c:173:	if (_XErrorFunction == NULL) (void) XSetErrorHandler (NULL);
XlibInt.c:231: * _XError(Display *, xError *) will be called whenever an X_Error event is
XlibInt.c:572:			_XError (dpy, (xError *)rep);
XlibInt.c:1326:		    _XError (dpy, (xError *)rep);
XlibInt.c:1503:			_XError (dpy, (xError *) rep);
XlibInt.c:2322:		    _XError(dpy, err);
XlibInt.c:3631: * _XError - upcall internal or user protocol error handler
XlibInt.c:3633:int _XError (
XlibInt.c:3662:    if (_XErrorFunction != NULL) {
XlibInt.c:3669:	rtn_val = (*_XErrorFunction)(dpy, (XErrorEvent *)&event); /* upcall */
Xlibint.h:853:extern int _XError(
Xlibint.h:868:extern int (*_XErrorFunction)(

#### _XErrorFunction ####
ErrHndlr.c:34: * (_XErrorFunction) to be the specified routine.  If NULL is passed in
ErrHndlr.c:44:    oldhandler = _XErrorFunction;
ErrHndlr.c:50:	_XErrorFunction = handler;
ErrHndlr.c:53:	_XErrorFunction = _XDefaultError;
globals.c:72:ZEROINIT (XErrorHandler, _XErrorFunction, NULL);
OpenDis.c:173:	if (_XErrorFunction == NULL) (void) XSetErrorHandler (NULL);
XlibInt.c:3662:    if (_XErrorFunction != NULL) {
XlibInt.c:3669:	rtn_val = (*_XErrorFunction)(dpy, (XErrorEvent *)&event); /* upcall */
Xlibint.h:868:extern int (*_XErrorFunction)(

#### _XEventToWire ####
EvToWire.c:46:_XEventToWire(
SendEvent.c:33: * In order to avoid all images requiring _XEventToWire, we install the
SendEvent.c:62:    if (*fp == NULL) *fp = _XEventToWire;
Xlibint.h:1298:extern Status _XEventToWire(Display *dpy, XEvent *re, xEvent *event);

#### _XEventsQueued ####
ChkIfEv.c:71:		_XEventsQueued(dpy, QueuedAfterReading);
ChkIfEv.c:127:		_XEventsQueued(dpy, QueuedAfterReading);
ChkMaskEv.c:78:		_XEventsQueued(dpy, QueuedAfterReading);
ChkTypEv.c:69:		_XEventsQueued(dpy, QueuedAfterReading);
ChkTypWEv.c:71:		_XEventsQueued(dpy, QueuedAfterReading);
ChkWinEv.c:79:		_XEventsQueued(dpy, QueuedAfterReading);
Pending.c:51:	ret_val = _XEventsQueued (dpy, mode);
Pending.c:66:	ret_val = _XEventsQueued (dpy, QueuedAfterFlush);
XlibInt.c:1101:_XEventsQueued(
XlibInt.c:1116:	printf("_XEventsQueued called in thread %x\n", XThread_Self());
XlibInt.c:1128:            fprintf(stderr, "_XEventsQueued: Returning [%d] after display failure.\n",
XlibInt.c:1173:        fprintf(stderr, "_XEventsQueued: Checking bytes readable.\n");
XlibInt.c:1202:            fprintf(stderr, "_XEventsQueued: Calling poll().\n");
XlibInt.c:1209:            fprintf(stderr, "_XEventsQueued: Calling select().\n");
XlibInt.c:1257:            fprintf(stderr, "_XEventsQueued: Returning [%d].\n", dpy->qlen);
Xlibint.h:106:	int conn_checker;         /* ugly thing used by _XEventsQueued */
Xlibint.h:940:extern int _XEventsQueued(

#### _XF86BigfontFreeFontMetrics ####
Font.c:84:void _XF86BigfontFreeFontMetrics(
Font.c:167:	_XF86BigfontFreeFontMetrics(fs);
Font.c:630:_XF86BigfontFreeFontMetrics (XFontStruct *fs)
Font.c:694:	    _XF86BigfontFreeFontMetrics(fs);
FontInfo.c:37:extern void _XF86BigfontFreeFontMetrics(
FontInfo.c:217:				_XF86BigfontFreeFontMetrics(&info[i]);

#### _XF86LoadQueryLocaleFont ####
Font.c:104:    if (_XF86LoadQueryLocaleFont(dpy, name, &font_result, (Font *)0))
Font.c:649:int _XF86LoadQueryLocaleFont(
LoadFont.c:41:    if (_XF86LoadQueryLocaleFont(dpy, name, (XFontStruct **)0, &fid))
Xlibint.h:1300:extern int _XF86LoadQueryLocaleFont(

#### _XFetchEventCookie ####
GetEventData.c:36:    rc = _XFetchEventCookie(dpy, event);
PutBEvent.c:56:		_XFetchEventCookie(dpy, &event->xcookie);
XlibInt.c:2805:   _XFetchEventCookie (called from XGetEventData) removes a cookie from the
XlibInt.c:2877:_XFetchEventCookie(Display *dpy, XGenericEventCookie* ev)
Xlibint.h:1348:extern Bool _XFetchEventCookie(

#### _XFlush ####
ChGC.c:47:	_XFlushGCCache(dpy, gc);
ChkIfEv.c:74:		_XFlush(dpy);
ChkMaskEv.c:81:		_XFlush(dpy);
ChkTypEv.c:72:		_XFlush(dpy);
ChkTypWEv.c:74:		_XFlush(dpy);
ChkWinEv.c:82:		_XFlush(dpy);
CopyGC.c:50:         _XFlushGCCache(dpy, srcGC);
CrGC.c:315:void _XFlushGCCache(
Flush.c:39:    _XFlush (dpy);
PolyTxt16.c:90:    	_XFlush (dpy);
PolyTxt16.c:237:       _XFlush (dpy);
PolyTxt.c:90:    	_XFlush (dpy);
PolyTxt.c:230:       _XFlush (dpy);
SetClMask.c:43:    _XFlushGCCache(dpy, gc);
SetFont.c:42:	_XFlushGCCache(dpy, gc);
SetStip.c:42:    _XFlushGCCache(dpy, gc);
SetTile.c:42:    _XFlushGCCache(dpy, gc);
Text16.c:71:    	_XFlush (dpy);
Text16.c:124:       _XFlush (dpy);
Text.c:71:    	_XFlush (dpy);
Text.c:135:       _XFlush (dpy);
XlibInt.c:940:static void _XFlushInt(
XlibInt.c:946: * _XFlush - Flush the X request buffer.  If the buffer is empty, no
XlibInt.c:950:void _XFlush(
XlibInt.c:957:    _XFlushInt(dpy, NULL);
XlibInt.c:960:/* _XFlushInt - Internal version of _XFlush used to do multi-threaded
XlibInt.c:964:static void _XFlushInt(
XlibInt.c:978:        fprintf(stderr, "_XFlushInt: Entering flush with [%d] bytes to write.\n",
XlibInt.c:984:	 * callers of _XFlush() are not verifying this before they call it.
XlibInt.c:989:        fprintf(stderr, "_XFlushInt: Returning with I/O error detected.\n");
XlibInt.c:1122:	    _XFlush(dpy);
XlibInt.c:1249:	    /* _XFlush can enqueue events */
XlibInt.c:1412:		    _XFlush (dpy);
XlibInt.c:2180:    _XFlushInt(dpy, cvl ? cvl->cv : NULL);
XlibInt.c:2192:    _XFlush(dpy);
XlibInt.c:3882:	    _XFlush(dpy);
XlibInt.c:3984:       _XFlush(dpy);
Xlibint.h:88:#define _XFlush _XFlushIt
Xlibint.h:429:#define XlibDisplayWriting	(1L << 6) /* in _XFlushInt, _XSend */
Xlibint.h:551:extern void _XFlushGCCache(Display *dpy, GC gc);
Xlibint.h:553:	if ((gc)->dirty) _XFlushGCCache((dpy), (gc))
Xlibint.h:589:        _XFlush (dpy); \
Xlibint.h:937:extern void _XFlush(

#### _XFlushGCCache ####
ChGC.c:47:	_XFlushGCCache(dpy, gc);
CopyGC.c:50:         _XFlushGCCache(dpy, srcGC);
CrGC.c:315:void _XFlushGCCache(
SetClMask.c:43:    _XFlushGCCache(dpy, gc);
SetFont.c:42:	_XFlushGCCache(dpy, gc);
SetStip.c:42:    _XFlushGCCache(dpy, gc);
SetTile.c:42:    _XFlushGCCache(dpy, gc);
Xlibint.h:551:extern void _XFlushGCCache(Display *dpy, GC gc);
Xlibint.h:553:	if ((gc)->dirty) _XFlushGCCache((dpy), (gc))

#### _XFreeAtomTable ####
IntAtom.c:40:_XFreeAtomTable(Display *dpy)
IntAtom.c:76:	dpy->free_funcs->atoms = _XFreeAtomTable;
IntAtom.c:131:	    dpy->free_funcs->atoms = _XFreeAtomTable;
Xintatom.h:29:extern void _XFreeAtomTable(Display *dpy);
Xlibint.h:737:    FreeFuncType atoms;		/* _XFreeAtomTable */

#### _XFreeDisplayLock_fn ####
locking.c:608:    _XFreeDisplayLock_fn = _XFreeDisplayLock;
OpenDis.c:87:void (*_XFreeDisplayLock_fn)(Display *dpy) = NULL;
OpenDis.c:90:#define FreeDisplayLock(d)	if (_XFreeDisplayLock_fn) (*_XFreeDisplayLock_fn)(d)
locking.h:154:extern void (*_XFreeDisplayLock_fn)(Display *dpy);

#### _XFreeDisplayStructure ####
ClDisplay.c:80:	_XFreeDisplayStructure (dpy);
OpenDis.c:851:void _XFreeDisplayStructure(Display *dpy)
OpenDis.c:986:    _XFreeDisplayStructure (dpy);
XlibInt.c:2809:   _XFreeDisplayStructure calls _XFreeEventCookies for each cookie in the
XlibInt.c:3011:	 * _XFreeDisplayStructure */
Xintconn.h:34:extern void _XFreeDisplayStructure(Display *dpy);

#### _XFreeEventCookies ####
ChkMaskEv.c:56:	_XFreeEventCookies(dpy);
ChkTypEv.c:50:	_XFreeEventCookies(dpy);
ChkTypWEv.c:51:	_XFreeEventCookies(dpy);
ChkWinEv.c:56:	_XFreeEventCookies(dpy);
MaskEvent.c:55:	_XFreeEventCookies(dpy);
NextEvent.c:47:	_XFreeEventCookies(dpy);
OpenDis.c:863:	    _XFreeEventCookies(dpy);
WinEvent.c:58:	_XFreeEventCookies(dpy);
XlibInt.c:2806:   jar. _XFreeEventCookies removes all unclaimed cookies from the jar
XlibInt.c:2809:   _XFreeDisplayStructure calls _XFreeEventCookies for each cookie in the
XlibInt.c:2831:_XFreeEventCookies(Display *dpy)
Xlibint.h:1341:extern void _XFreeEventCookies(

#### _XFreeExtData ####
Font.c:172:    _XFreeExtData(fs->ext_data);
Font.c:699:	_XFreeExtData(fs->ext_data);
FreeEData.c:33:_XFreeExtData (XExtData *extension)
FreeGC.c:46:    _XFreeExtData(gc->ext_data);
OpenDis.c:909:			     _XFreeExtData (dp->visuals[k].ext_data);
OpenDis.c:917:		_XFreeExtData (sp->ext_data);
OpenDis.c:927:	      _XFreeExtData (dpy->pixmap_format[i].ext_data);
OpenDis.c:939:	_XFreeExtData (dpy->ext_data);
Xlibint.h:1010:extern int _XFreeExtData(

#### _XFreeMutex_fn ####
locking.c:606:    _XFreeMutex_fn = _XFreeMutex;
XlibInt.c:85:void (*_XFreeMutex_fn)(LockInfoPtr) = NULL;
XlibInt.c:4194:void (**_XFreeMutex_fn_p)(LockInfoPtr) = &_XFreeMutex_fn;
Xlibint.h:304:#define _XFreeMutex_fn (*_XFreeMutex_fn_p)
Xlibint.h:314:extern void (*_XFreeMutex_fn)(
Xlibint.h:347:#define _XFreeMutex(lock)	if (_XFreeMutex_fn) (*_XFreeMutex_fn)(lock);

#### _XFreeTemp ####
Region.c:277:	_XFreeTemp(dpy, (char *)xr, total);
XKBSetGeom.c:440:        _XFreeTemp(dpy, tbuf, sz);
XlibInt.c:3778: * MT safe, but you must hand the buffer back with _XFreeTemp.
XlibInt.c:3792:void _XFreeTemp(
Xlibint.h:891:extern void _XFreeTemp(

#### _XGetAsyncData ####
GetAtomNm.c:128:    _XGetAsyncData(dpy, state->names[state->idx], buf, len,
XlibAsync.c:156:_XGetAsyncData(
XlibAsync.c:162:				   _XGetAsyncReply or _XGetAsyncData calls */
Xlibint.h:693:     * _XGetAsyncReply or _XGetAsyncData.
Xlibint.h:928:extern void _XGetAsyncData(

#### _XGetAsyncReply ####
GetAtomNm.c:124:	_XGetAsyncReply(dpy, (char *)&replbuf, rep, buf, len,
GetWAttrs.c:65:	_XGetAsyncReply(dpy, (char *)&replbuf, rep, buf, len,
IntAtom.c:230:	_XGetAsyncReply(dpy, (char *)&replbuf, rep, buf, len,
OpenDis.c:832:	_XGetAsyncReply(dpy, (char *)&replbuf, rep, buf, len,
XlibAsync.c:106:_XGetAsyncReply(
XlibAsync.c:162:				   _XGetAsyncReply or _XGetAsyncData calls */
Xlibint.h:691:     * to be invoked.  It must also be passed to _XGetAsyncReply.
Xlibint.h:693:     * _XGetAsyncReply or _XGetAsyncData.
Xlibint.h:919:extern char *_XGetAsyncReply(

#### _XGetBitsPerPixel ####
ImUtil.c:72:_XGetBitsPerPixel(
ImUtil.c:354:	    bits_per_pixel = _XGetBitsPerPixel(dpy, (int) depth);
ImUtil.h:12:_XGetBitsPerPixel(

#### _XGetHostname ####
ConnDis.c:356:	if ((_XGetHostname (localhostname, sizeof localhostname) > 0)
GetDflt.c:158:	(void) _XGetHostname (fname+len, PATH_MAX-len);
WMProps.c:88:    int len = _XGetHostname (hostName, sizeof hostName);
XlibInt.c:3917: * _XGetHostname - similar to gethostname but allows special processing.
XlibInt.c:3919:int _XGetHostname (
Xlibint.h:904:extern int _XGetHostname(

#### _XGetLCValues ####
imDefIm.c:311:    _XGetLCValues(lcd, XlcNLanguage, &language, XlcNTerritory, &territory,
imDefIm.c:1550:    _XGetLCValues(im->core.lcd, XlcNCodeset, &encoding, NULL);
imInsClbk.c:64:    _XGetLCValues( lcd, XlcNLanguage, &language, XlcNTerritory, &territory,
imThaiIm.c:66:    _XGetLCValues(im->core.lcd, XlcNLanguage, &language, NULL);
lcPubWrap.c:33:_XGetLCValues(XLCd lcd, ...)
XlcPublic.h:238:extern char *_XGetLCValues(

#### _XGetRequest ####
XlibInt.c:3979:void *_XGetRequest(Display *dpy, CARD8 type, size_t len)
Xlibint.h:450:extern void *_XGetRequest(Display *dpy, CARD8 type, size_t len);
Xlibint.h:456:	req = (x##name##Req *) _XGetRequest(dpy, X_##name, sz)
Xlibint.h:483:	req = (xResourceReq *) _XGetRequest(dpy, X_##name, SIZEOF(xResourceReq)); \
Xlibint.h:491:	req = (xReq *) _XGetRequest(dpy, X_##name, SIZEOF(xReq))

#### _XGetScanlinePad ####
GetImage.c:104:		    _XGetScanlinePad(dpy, (int) rep.depth), 0);
ImUtil.c:57:_XGetScanlinePad(
ImUtil.h:7:_XGetScanlinePad(

#### _XGetWindowAttributes ####
GetWAttrs.c:88:_XGetWindowAttributes(
GetWAttrs.c:149:    ret = _XGetWindowAttributes(dpy, w, attr);
Xlibint.h:1328:Status _XGetWindowAttributes(

#### _XHeadOfDisplayList ####
globals.c:81:ZEROINIT (Display *, _XHeadOfDisplayList, NULL);
OpenDis.c:797:	    extern Display *_XHeadOfDisplayList;
OpenDis.c:798:	    _XHeadOfDisplayList = dpy;

#### _XIMCompileResourceList ####
imRmAttr.c:1458:    _XIMCompileResourceList(res, n);
imRmAttr.c:1503:    _XIMCompileResourceList(res, n);
imRm.c:2159:    _XIMCompileResourceList(res, num_resource);
IMWrap.c:67:_XIMCompileResourceList(XIMResourceList res, unsigned int num_res)
Xlcint.h:780:extern void _XIMCompileResourceList(

#### _XIOError ####
ErrHndlr.c:62: * (_XIOErrorFunction) to be the specified routine.  If NULL is passed in
ErrHndlr.c:72:    oldhandler = _XIOErrorFunction;
ErrHndlr.c:78:	_XIOErrorFunction = handler;
ErrHndlr.c:81:	_XIOErrorFunction = _XDefaultIOError;
globals.c:73:ZEROINIT (XIOErrorHandler, _XIOErrorFunction, NULL);
OpenDis.c:174:	if (_XIOErrorFunction == NULL) (void) XSetIOErrorHandler (NULL);
XlibAsync.c:151:    _XIOError (dpy);
XlibInt.c:228: * _XIOError(Display *) will be called if any sort of system call error occurs.
XlibInt.c:509:                    _XIOError(dpy);
XlibInt.c:515:		_XIOError(dpy);
XlibInt.c:536:                _XIOError(dpy);
XlibInt.c:541:		_XIOError(dpy);
XlibInt.c:789:                _XIOError(dpy);
XlibInt.c:795:	if (result == -1 && !(ECHECK(EINTR) || ETEST())) _XIOError(dpy);
XlibInt.c:1076:                _XIOError(dpy);
XlibInt.c:1083:		_XIOError(dpy);
XlibInt.c:1178:            _XIOError(dpy);
XlibInt.c:1183:	    _XIOError(dpy);
XlibInt.c:1221:                        _XIOError(dpy);
XlibInt.c:1226:			_XIOError(dpy);
XlibInt.c:1237:                        _XIOError(dpy);
XlibInt.c:1244:		    _XIOError(dpy);
XlibInt.c:1395:                _XIOError(dpy);
XlibInt.c:1585:                    _XIOError(dpy);
XlibInt.c:1589:		    _XIOError(dpy);
XlibInt.c:1599:                        _XIOError(dpy);
XlibInt.c:1604:		    	_XIOError(dpy);
XlibInt.c:1727:                _XIOError(dpy);
XlibInt.c:1731:		_XIOError(dpy);
XlibInt.c:1741:                    _XIOError(dpy);
XlibInt.c:1746:		    _XIOError(dpy);
XlibInt.c:1918:                _XIOError(dpy);
XlibInt.c:1923:		_XIOError(dpy);
XlibInt.c:2277:		_XIOError (dpy);
XlibInt.c:2373:	_XIOError (dpy);
XlibInt.c:2408:	_XIOError (dpy);
XlibInt.c:2792:        _XIOError(dpy);
XlibInt.c:2866:        _XIOError(dpy);
XlibInt.c:2941:                _XIOError(dpy);
XlibInt.c:2945:		_XIOError(dpy);
XlibInt.c:3682: * _XIOError - call user connection error handler and exit
XlibInt.c:3685:_XIOError (
XlibInt.c:3703:    if (_XIOErrorFunction != NULL)
XlibInt.c:3704:	(*_XIOErrorFunction)(dpy);
XlibInt.c:3731:    fprintf(stderr, "_XIOError: Resetting the display buffer.\n");
XlibInt.c:3738:    fprintf(stderr, "_XIOError: Resetting the display flags.\n");
Xlibint.h:857:extern int _XIOError(
Xlibint.h:865:extern int (*_XIOErrorFunction)(

#### _XIOErrorFunction ####
ErrHndlr.c:62: * (_XIOErrorFunction) to be the specified routine.  If NULL is passed in
ErrHndlr.c:72:    oldhandler = _XIOErrorFunction;
ErrHndlr.c:78:	_XIOErrorFunction = handler;
ErrHndlr.c:81:	_XIOErrorFunction = _XDefaultIOError;
globals.c:73:ZEROINIT (XIOErrorHandler, _XIOErrorFunction, NULL);
OpenDis.c:174:	if (_XIOErrorFunction == NULL) (void) XSetIOErrorHandler (NULL);
XlibInt.c:3703:    if (_XIOErrorFunction != NULL)
XlibInt.c:3704:	(*_XIOErrorFunction)(dpy);
Xlibint.h:865:extern int (*_XIOErrorFunction)(

#### _XInitDisplayLock_fn ####
locking.c:607:    _XInitDisplayLock_fn = _XInitDisplayLock;
OpenDis.c:86:int  (*_XInitDisplayLock_fn)(Display *dpy) = NULL;
OpenDis.c:89:#define InitDisplayLock(d)	(_XInitDisplayLock_fn ? (*_XInitDisplayLock_fn)(d) : Success)
locking.h:153:extern int (*_XInitDisplayLock_fn)(Display *dpy);

#### _XInitIM ####
imInt.c:252:_XInitIM(XLCd lcd)
lcPublic.c:163:	_XInitIM(lcd);
XlcPublic.h:226:extern Bool _XInitIM(

#### _XInitImageFuncPtrs ####
ImUtil.c:271:void _XInitImageFuncPtrs (
ImUtil.c:383:	_XInitImageFuncPtrs (image);
ImUtil.c:422:	_XInitImageFuncPtrs (image);
ImUtil.c:560:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:584:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:603:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:627:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:747:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:772:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:787:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:816:	    _XInitImageFuncPtrs(ximage);
ImUtil.c:868:	_XInitImageFuncPtrs (subimage);
PutImage.c:997:	    _XInitImageFuncPtrs(&img);
ImUtil.h:28:_XInitImageFuncPtrs(

#### _XInitKeysymDB ####
KeysymStr.c:103:    if ((keysymdb = _XInitKeysymDB()))
StrKeysym.c:53:_XInitKeysymDB(void)
StrKeysym.c:113:	(void)_XInitKeysymDB();
Key.h:17:_XInitKeysymDB(

#### _XInitOM ####
lcPublic.c:156:	_XInitOM(lcd);
omGeneric.c:2094:_XInitOM(
XlcPublic.h:222:extern Bool _XInitOM(

#### _XIsEventCookie ####
FreeEventData.c:34:    if (_XIsEventCookie(dpy, (XEvent*)event) && event->data)
OpenDis.c:857:		if (_XIsEventCookie(dpy, &qelt->event))
PutBEvent.c:51:	if (_XIsEventCookie(dpy, event))
XlibInt.c:2821:_XIsEventCookie(Display *dpy, XEvent *ev)
XlibInt.c:2858:    if (!_XIsEventCookie(dpy, event))
XlibInt.c:2883:    if (!_XIsEventCookie(dpy, (XEvent*)ev))
XlibInt.c:2907:    if (!_XIsEventCookie(dpy, (XEvent*)in) || !out)
XlibInt.c:3008:    if (_XIsEventCookie(dpy, &qelt->event)) {
Xlibint.h:1337:extern Bool _XIsEventCookie(

#### _XKeyInitialize ####
imThaiFlt.c:779:    if ((! dpy->keysyms) && (! _XKeyInitialize(dpy)))
KeyBind.c:126:    if ((! dpy->keysyms) && (! _XKeyInitialize(dpy)))
KeyBind.c:138:    if ((! dpy->keysyms) && (! _XKeyInitialize(dpy)))
KeyBind.c:154:    if ((! event->display->keysyms) && (! _XKeyInitialize(event->display)))
KeyBind.c:257:_XKeyInitialize(
KeyBind.c:766:    if ((! dpy->keysyms) && (! _XKeyInitialize(dpy)))
KeyBind.c:923:    if ((! dpy->keysyms) && (! _XKeyInitialize(dpy)))
KeyBind.c:964:    if ((! dpy->keysyms) && (! _XKeyInitialize(dpy)))
Key.h:13:_XKeyInitialize(

#### _XKeycodeToKeysym ####
KeyBind.c:57:#define	XKeycodeToKeysym	_XKeycodeToKeysym
XKBBind.c:107:        return _XKeycodeToKeysym(dpy, kc, col);
XKBlibint.h:133:extern KeySym _XKeycodeToKeysym(

#### _XKeysymToKeycode ####
KeyBind.c:58:#define	XKeysymToKeycode	_XKeysymToKeycode
XKBBind.c:158:        return _XKeysymToKeycode(dpy, ks);
XKBlibint.h:143:extern KeyCode _XKeysymToKeycode(

#### _XKeysymToModifiers ####
KeyBind.c:64:#define	XkbKeysymToModifiers	_XKeysymToModifiers
KeyBind.c:955:_XKeysymToModifiers(
XKBBind.c:197:        return _XKeysymToModifiers(dpy, ks);
XKBBind.c:201:        return _XKeysymToModifiers(dpy, ks);
XKBlibint.h:157:extern unsigned _XKeysymToModifiers(

#### _XLockMutex_fn ####
locking.c:603:    _XLockMutex_fn = _XLockMutex;
XlibInt.c:86:void (*_XLockMutex_fn)(
XlibInt.c:4195:void (**_XLockMutex_fn_p)(LockInfoPtr
XlibInt.c:4200:        ) = &_XLockMutex_fn;
Xlibint.h:305:#define _XLockMutex_fn (*_XLockMutex_fn_p)
Xlibint.h:317:extern void (*_XLockMutex_fn)(
Xlibint.h:337:#define _XLockMutex(lock)		if (_XLockMutex_fn) (*_XLockMutex_fn)(lock,__FILE__,__LINE__)
Xlibint.h:343:#define _XLockMutex(lock)		if (_XLockMutex_fn) (*_XLockMutex_fn)(lock)

#### _XLookupKeysym ####
KeyBind.c:59:#define	XLookupKeysym		_XLookupKeysym
XKBBind.c:223:        return _XLookupKeysym(event, col);
XKBlibint.h:148:extern KeySym _XLookupKeysym(

#### _XLookupString ####
imConv.c:47: * rather than just call _XLookupString (i.e. the pre-XKB XLookupString)
imConv.c:49: * _XLookupString doesn't grok.
KeyBind.c:61:#define	XLookupString		_XLookupString
XKBlibint.h:178:extern  int _XLookupString(

#### _XNoticeCreateBitmap ####
CrGlCur.c:183:_XNoticeCreateBitmap (Display	    *dpy,
CrPixmap.c:34:_XNoticeCreateBitmap (Display	    *dpy,
CrPixmap.c:61:	_XNoticeCreateBitmap (dpy, pid, width, height);
Cr.h:11:extern void _XNoticeCreateBitmap(

#### _XNoticePutBitmap ####
CrGlCur.c:196:_XNoticePutBitmap (Display	*dpy,
PutImage.c:1030:	_XNoticePutBitmap (dpy, d, image);
Cr.h:16:extern void _XNoticePutBitmap(

#### _XOpenLC ####
IMWrap.c:117:    XLCd	lcd = _XOpenLC( (char *)NULL );
IMWrap.c:173:    XLCd	lcd = _XOpenLC( (char *)NULL );
lcWrap.c:245:_XOpenLC(
lcWrap.c:354:    lcd = _XOpenLC((char *) NULL);
lcWrap.c:368:    XLCd lcd = _XOpenLC((char *) NULL);
OMWrap.c:36:    XLCd lcd = _XOpenLC((char *) NULL);
Xlcint.h:759:extern XLCd _XOpenLC(

#### _XParseBaseFontNameList ####
FSWrap.c:71:_XParseBaseFontNameList(
omGeneric.c:1080:    name_list = _XParseBaseFontNameList(oc->core.base_name_list, &count);
XDefaultOMIF.c:326:    name_list = _XParseBaseFontNameList(oc->core.base_name_list, &count);
Xlcint.h:791:extern char ** _XParseBaseFontNameList(

#### _XPollfdCacheAdd ####
XlibInt.c:622:void _XPollfdCacheAdd(
XlibInt.c:2497:    _XPollfdCacheAdd(dpy, fd);
Xlibint.h:1005:extern void _XPollfdCacheAdd(Display *dpy, int fd);

#### _XPollfdCacheDel ####
XlibInt.c:637:void _XPollfdCacheDel(
XlibInt.c:2545:    _XPollfdCacheDel(dpy, fd);
Xlibint.h:1006:extern void _XPollfdCacheDel(Display *dpy, int fd);

#### _XPollfdCacheInit ####
OpenDis.c:308:	if (!_XPollfdCacheInit(dpy)) {
XlibInt.c:605:Bool _XPollfdCacheInit(
Xlibint.h:1004:extern Bool _XPollfdCacheInit(Display *dpy);

#### _XProcessInternalConnection ####
XlibInt.c:818:		    _XProcessInternalConnection(dpy, ilist);
XlibInt.c:2592:void _XProcessInternalConnection(
XlibInt.c:2636:	    _XProcessInternalConnection(dpy, info_list);
Xlibint.h:426:#define XlibDisplayProcConni	(1L << 4) /* in _XProcessInternalConnection */
Xlibint.h:1231:extern void _XProcessInternalConnection(

#### _XProcessWindowAttributes ####
ChWAttrs.c:52:        _XProcessWindowAttributes (dpy, req, valuemask, attributes);
Window.c:32:void _XProcessWindowAttributes (
Window.c:134:        _XProcessWindowAttributes (dpy, (xChangeWindowAttributesReq *)req,
Xlibint.h:1307:extern void _XProcessWindowAttributes (

#### _XPutBackEvent ####
imLcFlt.c:153:	_XPutBackEvent(d, ev);
PutBEvent.c:36:_XPutBackEvent (
PutBEvent.c:84:	ret = _XPutBackEvent(dpy, event);
Xlibint.h:1333:int _XPutBackEvent (

#### (arch=amd64 ia64 alpha ppc64 arm64)_XRead32 ####

#### _XRead ####
AllCells.c:60:	    _XRead32 (dpy, (long *) pixels, 4L * (long) (rep.nPixels));
AllCells.c:61:	    _XRead32 (dpy, (long *) masks, 4L * (long) (rep.nMasks));
AllPlanes.c:68:	_XRead32 (dpy, (long *) pixels, (long)(ncolors * 4));
ConnDis.c:1032:    _XRead(dpy, (char *)&prefix, sz_xReq);
ConnDis.c:1038:	    _XRead(dpy, (char *)sprefix + sz_xReq,
ConnDis.c:1062:    _XRead(dpy, buf, tlen);
ConnDis.c:1212:    _XRead(dpy, (char *)&prefix, sz_xReq);
ConnDis.c:1217:	    _XRead(dpy, (char *)sprefix + sz_xReq,
ConnDis.c:1237:    _XRead(dpy, (char *)kbuf.data, kbuf.length);
Font.c:256:	    _XRead32 (dpy, (long *)fs->properties, nbytes);
Font.c:280:	_XRead16 (dpy, (char *)fs->per_char, nbytes);
Font.c:500:	_XRead32 (dpy, (long *)fs->properties, nbytes);
Font.c:539:	    _XRead16 (dpy, (char *) pUniqCI, nbytes);
FontInfo.c:145:	    _XRead32 (dpy, (long *)fs->properties, nbytes);
FontInfo.c:163:	_XReadPad (dpy, flist[i], (long) reply.nameLength);
FontNames.c:85:	_XReadPad (dpy, ch, rlen);
GetAtomNm.c:77:	_XReadPad(dpy, name, (long)rep.nameLength);
GetAtomNm.c:174:		_XReadPad(dpy, names_return[missed], (long)rep.nameLength);
GetFPath.c:68:	    _XReadPad (dpy, ch, nbytes);
GetImage.c:94:        _XReadPad (dpy, data, nbytes);
GetMoEv.c:70:	    _XRead (dpy, (char *) &xtc, SIZEOF (xTimecoord));
GetPntMap.c:71:    _XRead (dpy, (char *)mapping, nbytes);
GetPntMap.c:125:	_XRead32 (dpy, (long *) mapping, nbytes);
GetProp.c:96:		_XReadPad (dpy, (char *) *prop, netbytes);
GetProp.c:103:		_XRead16Pad (dpy, (short *) *prop, netbytes);
GetProp.c:110:		_XRead32 (dpy, (long *) *prop, netbytes);
IfEvent.c:68:	    _XReadEvents(dpy);
LiHosts.c:119:	_XRead (dpy, (char *) buf, nbytes);
LiICmaps.c:62:	_XRead32 (dpy, (long *) cmaps, nbytes);
LiProps.c:61:	_XRead32 (dpy, (long *) properties, nbytes);
ListExt.c:73:	    _XReadPad (dpy, ch, rlen);
MaskEvent.c:75:	    _XReadEvents(dpy);
ModMap.c:58:	_XReadPad(dpy, (char *) res->modifiermap, (long) nbytes);
NextEvent.c:50:	    _XReadEvents(dpy);
OpenDis.c:392:	    _XRead (dpy, (char *)&prefix,(long)SIZEOF(xConnSetupPrefix));
OpenDis.c:439:	_XRead (dpy, (char *)u.setup, setuplength);
OpenDis.c:776:		    _XReadPad (dpy, dpy->xdefaults, reply.nItems);
PeekEvent.c:46:	    _XReadEvents(dpy);
PeekIfEv.c:72:	    _XReadEvents(dpy);
QuColor.c:51:	    _XRead(dpy, (char *)&color, (long) SIZEOF(xrgb));
QuColors.c:57:	    _XRead(dpy, (char *) color, nbytes);
QuTree.c:63:	_XRead32 (dpy, (long *) *children, nbytes);
WinEvent.c:79:	    _XReadEvents(dpy);
XKBGetByName.c:152:        _XRead(dpy, (char *) &mrep, SIZEOF(xkbGetMapReply));
XKBGetByName.c:164:        _XRead(dpy, (char *) &crep, SIZEOF(xkbGetCompatMapReply));
XKBGetByName.c:176:        _XRead(dpy, (char *) &irep, SIZEOF(xkbGetIndicatorMapReply));
XKBGetByName.c:188:        _XRead(dpy, (char *) &nrep, SIZEOF(xkbGetNamesReply));
XKBGetByName.c:200:        _XRead(dpy, (char *) &grep, SIZEOF(xkbGetGeometryReply));
XKBRdBuf.c:45:            _XRead(dpy, buf->start, size);
XlibAsync.c:125:	    _XRead(dpy, replbuf + len, size - len);
XlibAsync.c:175:	_XRead(dpy, data + len, datalen - len);
XlibInt.c:560:	    (void) _XRead (dpy, buf.buf, (long) len);
XlibInt.c:1289:	(void) _XRead (dpy, read_buf, (long) len);
XlibInt.c:1343:/* _XReadEvents - Flush the output queue,
XlibInt.c:1346:void _XReadEvents(
XlibInt.c:1362:	printf("_XReadEvents called in thread %x\n",
XlibInt.c:1447:	    i = _XRead (dpy, read_buf, (long) len);
XlibInt.c:1453:                fprintf(stderr, "_XReadEvents: Returning with I/O error detected.\n");
XlibInt.c:1459:		/* special flag from _XRead to say that internal connection has
XlibInt.c:1510:                            if (_XRead(dpy, &read_buf[len], evlen) == -2)
XlibInt.c:1526: * _XRead - Read bytes from the socket taking into account incomplete
XlibInt.c:1529:int _XRead(
XlibInt.c:1628:void _XRead32(
XlibInt.c:1637:	(void) _XRead(dpy, (char *)data, len);
XlibInt.c:1651: * _XReadPad - Read bytes from the socket taking into account incomplete
XlibInt.c:1655:void _XReadPad(
XlibInt.c:2056:	    _XRead32(dpy, (long *) ids, 4L * (long) (grep.count));
XlibInt.c:2210:	/* Did another thread's _XReadEvents get our reply by accident? */
XlibInt.c:2213:	    (void) _XRead(dpy, (char *)rep, (long)SIZEOF(xReply));
XlibInt.c:2239:			(void) _XRead (dpy, (char *) (NEXTPTR(rep,xReply)),
XlibInt.c:2267:		(void) _XRead (dpy, (char *) (NEXTPTR(rep,xReply)),
XlibInt.c:2433:	(void) _XRead(dpy, nbuf + *lenp, (long)len);
XlibInt.c:2767:	(void) _XRead (dpy, buf, bytes_read);
locking.h:58:	Bool reply_was_read;	/* _XReadEvents read a reply for _XReply */
locking.h:61:	struct _XCVList *event_awaiters; /* list of CVs for _XReadEvents */
Xlibint.h:427:#define XlibDisplayReadEvents	(1L << 5) /* in _XReadEvents */
Xlibint.h:595:#define _XRead16Pad(dpy, data, len) _XReadPad((dpy), (char *)(data), (len))
Xlibint.h:596:#define _XRead16(dpy, data, len) _XRead((dpy), (char *)(data), (len))
Xlibint.h:604:extern void _XRead32(
Xlibint.h:611:#define _XRead32(dpy, data, len) _XRead((dpy), (char *)(data), (len))
Xlibint.h:944:extern void _XReadEvents(
Xlibint.h:947:extern int _XRead(
Xlibint.h:952:extern void _XReadPad(

#### _XReadEvents ####
IfEvent.c:68:	    _XReadEvents(dpy);
MaskEvent.c:75:	    _XReadEvents(dpy);
NextEvent.c:50:	    _XReadEvents(dpy);
PeekEvent.c:46:	    _XReadEvents(dpy);
PeekIfEv.c:72:	    _XReadEvents(dpy);
WinEvent.c:79:	    _XReadEvents(dpy);
XlibInt.c:1343:/* _XReadEvents - Flush the output queue,
XlibInt.c:1346:void _XReadEvents(
XlibInt.c:1362:	printf("_XReadEvents called in thread %x\n",
XlibInt.c:1453:                fprintf(stderr, "_XReadEvents: Returning with I/O error detected.\n");
XlibInt.c:2210:	/* Did another thread's _XReadEvents get our reply by accident? */
locking.h:58:	Bool reply_was_read;	/* _XReadEvents read a reply for _XReply */
locking.h:61:	struct _XCVList *event_awaiters; /* list of CVs for _XReadEvents */
Xlibint.h:427:#define XlibDisplayReadEvents	(1L << 5) /* in _XReadEvents */
Xlibint.h:944:extern void _XReadEvents(

#### _XReadPad ####
FontInfo.c:163:	_XReadPad (dpy, flist[i], (long) reply.nameLength);
FontNames.c:85:	_XReadPad (dpy, ch, rlen);
GetAtomNm.c:77:	_XReadPad(dpy, name, (long)rep.nameLength);
GetAtomNm.c:174:		_XReadPad(dpy, names_return[missed], (long)rep.nameLength);
GetFPath.c:68:	    _XReadPad (dpy, ch, nbytes);
GetImage.c:94:        _XReadPad (dpy, data, nbytes);
GetProp.c:96:		_XReadPad (dpy, (char *) *prop, netbytes);
ListExt.c:73:	    _XReadPad (dpy, ch, rlen);
ModMap.c:58:	_XReadPad(dpy, (char *) res->modifiermap, (long) nbytes);
OpenDis.c:776:		    _XReadPad (dpy, dpy->xdefaults, reply.nItems);
XlibInt.c:1651: * _XReadPad - Read bytes from the socket taking into account incomplete
XlibInt.c:1655:void _XReadPad(
Xlibint.h:595:#define _XRead16Pad(dpy, data, len) _XReadPad((dpy), (char *)(data), (len))
Xlibint.h:952:extern void _XReadPad(

#### _XRefreshKeyboardMapping ####
KeyBind.c:60:#define	XRefreshKeyboardMapping	_XRefreshKeyboardMapping
XKBBind.c:354:        _XRefreshKeyboardMapping((XMappingEvent *) event);
XKBBind.c:398:    (void) _XRefreshKeyboardMapping(event);
XKBlibint.h:153:extern int _XRefreshKeyboardMapping(

#### _XRegisterFilterByMask ####
imDefFlt.c:385:	    _XRegisterFilterByMask(im->core.display,
RegstFlt.c:77:_XRegisterFilterByMask(
Xlcint.h:800:extern void _XRegisterFilterByMask(

#### _XRegisterFilterByType ####
imDefFlt.c:266:	    _XRegisterFilterByType (ic->core.im->core.display,
imDefFlt.c:283:	    _XRegisterFilterByType (ic->core.im->core.display,
imInsClbk.c:198:	_XRegisterFilterByType( display, root, PropertyNotify, PropertyNotify,
imLcIc.c:87:	_XRegisterFilterByType(ic->core.im->core.display,
imRm.c:2789:	    _XRegisterFilterByType(ic->core.im->core.display,
imRm.c:2801:	        _XRegisterFilterByType(ic->core.im->core.display,
imThaiIc.c:102:	_XRegisterFilterByType(ic->core.im->core.display, ic->core.focus_window,
imTrans.c:116:    _XRegisterFilterByType(im->core.display, window, KeyPress, KeyPress,
imTrX.c:187:	_XRegisterFilterByType(im->core.display, spec->lib_connect_wid,
imTrX.c:221:    _XRegisterFilterByType(im->core.display, spec->lib_connect_wid,
RegstFlt.c:108:_XRegisterFilterByType(
Xlcint.h:813:extern void _XRegisterFilterByType(

#### _XRegisterInternalConnection ####
imTrans.c:119:    return _XRegisterInternalConnection(im->core.display, spec->fd,
XlibInt.c:2445:/* _XRegisterInternalConnection
XlibInt.c:2466:_XRegisterInternalConnection(
XlibInt.c:2478:    fprintf(stderr, "_XRegisterInternalConnection: Got called.\n");
XlibInt.c:2511: * registered with _XRegisterInternalConnection must call this function.
XlibInt.c:2617: * Call the _XInternalConnectionProc registered by _XRegisterInternalConnection
XlibInt.c:2644: * Register a callback to be called whenever _XRegisterInternalConnection
Xlibint.h:207:	struct _XConnectionInfo *im_fd_info; /* _XRegisterInternalConnection */
Xlibint.h:1219:extern Status _XRegisterInternalConnection(
Xlibint.h:1238:struct _XConnectionInfo {	/* info from _XRegisterInternalConnection */

#### _XReply ####
AllCells.c:53:    status = _XReply(dpy, (xReply *)&rep, 0, xFalse);
AllPlanes.c:59:    status = _XReply(dpy, (xReply *)&rep, 0, xFalse);
cmsAllNCol.c:159:       /* _XSend is more efficient that Data, since _XReply follows */
cmsAllNCol.c:161:    if (!_XReply (dpy, (xReply *) &rep, 0, xTrue)) {
cmsCmap.c:187:		(void) _XReply (dpy, (xReply *)&rep, 0, xTrue);
cmsLkCol.c:155:    if (!_XReply (dpy, (xReply *) &reply, 0, xTrue)) {
Font.c:208:    if (!_XReply (dpy, (xReply *) &reply,
Font.c:362:	result = _XReply (dpy, (xReply *) &reply,
Font.c:437:       BadFont coming from a X_QueryFont request. (See function _XReply.)
Font.c:450:    if (!_XReply (dpy, (xReply *) &reply,
FontInfo.c:66:    /* use _XSend instead of Data, since subsequent _XReply will flush buffer */
FontInfo.c:69:	if (!_XReply (dpy, (xReply *) &reply,
FontInfo.c:189:	   _XReply(dpy, (xReply *) &reply,
FontNames.c:58:    /* use _XSend instead of Data, since following _XReply will flush buffer */
FontNames.c:60:    if (!_XReply (dpy, (xReply *)&rep, 0, xFalse)) {
GetAtomNm.c:71:    if (_XReply(dpy, (xReply *)&rep, 0, xFalse) == 0) {
GetAtomNm.c:172:	if (_XReply(dpy, (xReply *)&rep, 0, xFalse)) {
GetColor.c:90:       /* _XSend is more efficient that Data, since _XReply follows */
GetColor.c:92:    if (!_XReply (dpy, (xReply *) &rep, 0, xTrue)) {
GetFPath.c:49:	(void) _XReply (dpy, (xReply *) &rep, 0, xFalse);
GetGeom.c:47:    if (!_XReply (dpy, (xReply *)&rep, 0, xTrue)) {
GetHColor.c:48:    status = _XReply(dpy, (xReply *) &rep, 0, xTrue);
GetIFocus.c:42:    (void) _XReply (dpy, (xReply *)&rep, 0, xTrue);
GetImage.c:76:	if (_XReply (dpy, (xReply *) &rep, 0, xFalse) == 0 ||
GetKCnt.c:41:    (void) _XReply (dpy, (xReply *) &rep,
GetMoEv.c:49:    if (!_XReply (dpy, (xReply *)&rep, 0, xFalse)) {
GetPCnt.c:44:    (void) _XReply (dpy, (xReply *)&rep, 0, xTrue);
GetPntMap.c:52:    if (! _XReply(dpy, (xReply *)&rep, 0, xFalse)) {
GetPntMap.c:106:    if (! _XReply(dpy, (xReply *)&rep, 0, xFalse)) {
GetProp.c:69:    if (!_XReply (dpy, (xReply *) &reply, 0, xFalse)) {
GetSOwner.c:41:    if (_XReply(dpy, (xReply *)&rep, 0, xTrue) == 0) rep.owner = None;
GetSSaver.c:47:    (void) _XReply (dpy, (xReply *)&rep, 0, xTrue);
GetWAttrs.c:114:    if (!_XReply (dpy, (xReply *)&rep, 0, xTrue)) {
GrKeybd.c:51:	if (_XReply (dpy, (xReply *) &rep, 0, xTrue) == 0)
GrPointer.c:58:    if (_XReply (dpy, (xReply *) &rep, 0, xTrue) == 0)
ImText16.c:80:	    if (!_XReply (dpy, (xReply *)&rep, 0, xTrue))
ImText.c:79:	    if (!_XReply (dpy, (xReply *)&rep, 0, xTrue))
IntAtom.c:181:    if (_XReply (dpy, (xReply *)&rep, 0, xTrue)) {
IntAtom.c:283:	if (_XReply (dpy, (xReply *)&rep, 0, xTrue)) {
LiHosts.c:87:    if (!_XReply (dpy, (xReply *) &reply, 0, xFalse)) {
LiICmaps.c:45:    if(_XReply(dpy, (xReply *) &rep, 0, xFalse) == 0) {
LiProps.c:44:    if (!_XReply(dpy, (xReply *)&rep, 0, xFalse)) {
ListExt.c:50:	if (! _XReply (dpy, (xReply *) &rep, 0, xFalse)) {
locking.c:468: * _XReply is allowed to exit from select/poll and clean up even if a
LookupCol.c:88:	if (!_XReply (dpy, (xReply *) &reply, 0, xTrue)) {
ModMap.c:43:    (void) _XReply (dpy, (xReply *)&rep, 0, xFalse);
ModMap.c:89:    (void) _XReply(dpy, (xReply *) & rep,
OpenDis.c:771:	    if (_XReply (dpy, (xReply *) &reply, 0, xFalse)) {
OpenDis.c:788:		if (_XReply(dpy, (xReply *)&brep, 0, xFalse))
ParseCol.c:125:	    if (!_XReply (dpy, (xReply *) &reply, 0, xTrue)) {
QuBest.c:50:    if (_XReply (dpy, (xReply *)&rep, 0, xTrue) == 0) {
QuColor.c:49:    if (_XReply(dpy, (xReply *) &rep, 0, xFalse) != 0) {
QuColors.c:52:    if (_XReply(dpy, (xReply *) &rep, 0, xFalse) != 0) {
QuCurShp.c:49:    if (_XReply (dpy, (xReply *)&rep, 0, xTrue) == 0) {
QuExt.c:48:    (void) _XReply (dpy, (xReply *)&rep, 0, xTrue);
QuKeybd.c:46:    (void) _XReply(dpy, (xReply *)&rep,
QuPntr.c:48:    if (_XReply (dpy, (xReply *)&rep, 0, xTrue) == 0) {
QuStipShp.c:49:    if (_XReply (dpy, (xReply *)&rep, 0, xTrue) == 0) {
QuTextE16.c:63:    if (!_XReply (dpy, (xReply *)&rep, 0, xTrue) || !buf) {
QuTextExt.c:63:    if (!_XReply (dpy, (xReply *)&rep, 0, xTrue) || !buf) {
QuTileShp.c:49:    if (_XReply (dpy, (xReply *)&rep, 0, xTrue) == 0) {
QuTree.c:46:    if (!_XReply(dpy, (xReply *)&rep, 0, xFalse)) {
ReconfWM.c:111:	(void) _XReply (dpy, (xReply *)&rep, 0, xTrue);
SetPntMap.c:47:    if (_XReply (dpy, (xReply *)&rep, 0, xFalse) == 0)
Sync.c:44:    (void) _XReply (dpy, (xReply *)&rep, 0, xTrue);
TrCoords.c:51:    if (_XReply (dpy, (xReply *)&rep, 0, xTrue) == 0) {
XKB.c:420:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKB.c:496:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKB.c:542:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKB.c:573:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKB.c:609:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKB.c:642:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKB.c:679:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKB.c:710:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBCompat.c:138:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBCtrls.c:90:    if (!_XReply(dpy, (xReply *) &rep,
XKBCtrls.c:202:    if (!_XReply(dpy, (xReply *) &rep,
XKBExtDev.c:257:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBExtDev.c:329:        if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBExtDev.c:370:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBExtDev.c:413:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBGeom.c:687:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse))
XKBGeom.c:715:    if ((!_XReply(dpy, (xReply *) &rep, 0, xFalse)) || (!rep.found))
XKBGetByName.c:140:    if ((!_XReply(dpy, (xReply *) &rep, 0, xFalse)) || (!rep.reported))
XKBGetMap.c:562:    if (!_XReply(dpy, (xReply *) &rep,
XKBleds.c:52:    ok = _XReply(dpy, (xReply *) &rep, 0, xFalse);
XKBleds.c:143:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBleds.c:226:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBList.c:185:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse))
XKBNames.c:264:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
XKBUse.c:755:    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse) || !rep.supported) {
XKBUse.c:773:            if (_XReply(dpy, (xReply *) &rep, 0, xFalse) && rep.supported) {
XlibAsync.c:112:    int extra,			/* extra words to read, ala _XReply */
XlibAsync.c:113:    Bool discard)		/* discard after extra?, ala _XReply */
XlibInt.c:894:	(void) _XReply (dpy, (xReply *)&rep, 0, xTrue);
XlibInt.c:1160:	       if _XReply (in another thread) reads one */
XlibInt.c:1163:	    /* did _XReply read an event we can return? */
XlibInt.c:1414:			/* _XReply has read an event for us */
XlibInt.c:1956:    if (!_XReply (dpy, (xReply *)&qrep, 0, xTrue))
XlibInt.c:1964:	if (!_XReply (dpy, (xReply *)&vrep, 0, xTrue))
XlibInt.c:1984:	    if (_XReply (dpy, (xReply *)&grep, 0, xTrue) && grep.count) {
XlibInt.c:2055:	if (_XReply(dpy, (xReply *)&grep, 0, xFalse) && grep.count) {
XlibInt.c:2128: * _XReply - Wait for a reply packet and copy its contents into the
XlibInt.c:2133:_XReply (
XlibInt.c:2147:    fprintf(stderr, "_XReply: Going to wait for an X reply.\n");
XlibInt.c:2154:        fprintf(stderr, "_XReply: Returning 0 with I/O error detected.\n");
XlibInt.c:2173:    printf("_XReply called in thread %x, adding %x to cvl\n",
XlibInt.c:2178:    fprintf(stderr, "_XReply: Going to flush the display buffer.\n");
XlibInt.c:2203:    fprintf(stderr, "_XReply: Requesting a flush of the NX transport.\n");
locking.h:58:	Bool reply_was_read;	/* _XReadEvents read a reply for _XReply */
locking.h:59:	struct _XCVList *reply_awaiters; /* list of CVs for _XReply */
Xlibint.h:428:#define XlibDisplayReply	(1L << 5) /* in _XReply */
Xlibint.h:962:extern Status _XReply(

#### _XReverse_Bytes ####
ImUtil.c:147:	    _XReverse_Bytes (bp, img->bitmap_unit >> 3);
PutImage.c:120:_XReverse_Bytes(
ImUtil.h:24:_XReverse_Bytes(

#### _XScreenOfWindow ####
GetRGBCMap.c:78:	    Screen *sp = _XScreenOfWindow (dpy, w);
GetStCmap.c:80:	    Screen *sp = _XScreenOfWindow (dpy, w);
SetStCmap.c:73:    sp = _XScreenOfWindow (dpy, w);
SetStCmap.c:75:	/* already caught the XGetGeometry error in _XScreenOfWindow */
XlibInt.c:3950: * _XScreenOfWindow - get the Screen of a given window
XlibInt.c:3953:Screen *_XScreenOfWindow(Display *dpy, Window w)
Xlibint.h:908:extern Screen *_XScreenOfWindow(

#### _XSelect ####
XlibInt.c:256:int _XSelect(int maxfds, fd_set *readfds, fd_set *writefds,
XlibInt.c:260:    fprintf(stderr, "_XSelect: Called with [%d][%p][%p][%p][%p].\n",
XlibInt.c:276:            fprintf(stderr, "_XSelect: WARNING! Can't handle exception fds in select.\n");
XlibInt.c:333:int _XSelect(int maxfds, fd_set *readfds, fd_set *writefds,

#### _XSend ####
cmsAllNCol.c:158:    _XSend(dpy, colorname, nbytes);
cmsAllNCol.c:159:       /* _XSend is more efficient that Data, since _XReply follows */
ConnDis.c:781:_XSendClientPrefix(
ConnDis.c:1206:    _XSend(dpy, (char *)&prefix, sz_xReq);
ConnDis.c:1207:    _XSend(dpy, (char *)kbuf.data, kbuf.length);
ConnDis.c:1253:    _XSend(dpy, (char *)&prefix, sz_xReq);
FontInfo.c:65:    _XSend (dpy, pattern, nbytes);
FontInfo.c:66:    /* use _XSend instead of Data, since subsequent _XReply will flush buffer */
FontNames.c:57:    _XSend (dpy, pattern, nbytes);
FontNames.c:58:    /* use _XSend instead of Data, since following _XReply will flush buffer */
GetColor.c:89:    _XSend(dpy, colorname, nbytes);
GetColor.c:90:       /* _XSend is more efficient that Data, since _XReply follows */
OpenDis.c:374:	prefixread = _XSendClientPrefix(dpy, &client,
PutImage.c:601:/* Cancel a GetReq operation, before doing _XSend or Data */
PutImage.c:748:	_XSend(dpy, buf, length);
PutImage.c:830:	_XSend(dpy, (char *)dest, length);
QuExt.c:47:    _XSend(dpy, name, (long)req->nbytes);
XlibInt.c:1768: * _XSend - Flush the buffer and send the client data. 32 bit word aligned
XlibInt.c:1773:_XSend (
XlibInt.c:1790:    fprintf(stderr, "_XSend: Sending data with [%d] bytes to write.\n",
XlibInt.c:1798:                fprintf(stderr, "_XSend: Returning with I/O error detected.\n");
XlibInt.c:1955:    _XSend(dpy, XCMiscExtensionName, (long)qreq->nbytes);
XlibInt.c:3759: * GetReq* and a call to Data* or _XSend*, or in a context when the thread
XlibInt.c:3862:		_XSend(dpy, data, len);
Xintconn.h:23:extern Bool _XSendClientPrefix(Display *dpy, xConnClientPrefix *client,
Xlibint.h:429:#define XlibDisplayWriting	(1L << 6) /* in _XFlushInt, _XSend */
Xlibint.h:568:		_XSend(dpy, data, len);\
Xlibint.h:957:extern void _XSend(

#### _XSendClientPrefix ####
ConnDis.c:781:_XSendClientPrefix(
OpenDis.c:374:	prefixread = _XSendClientPrefix(dpy, &client,
Xintconn.h:23:extern Bool _XSendClientPrefix(Display *dpy, xConnClientPrefix *client,

#### _XSetClipRectangles ####
Region.c:275:	_XSetClipRectangles(dpy, gc, 0, 0, xr, r->numRects, YXBanded);
SetCRects.c:33:void _XSetClipRectangles (
SetCRects.c:75:    _XSetClipRectangles (dpy, gc, clip_x_origin, clip_y_origin, rectangles, n,
Xlibint.h:1320:extern void _XSetClipRectangles (

#### _XSetImage ####
GetImage.c:140:	_XSetImage(temp_image, dest_image, dest_x, dest_y);
ImUtil.c:109: *	_XSetImage	Writes an image data pattern into another image
ImUtil.c:296:/*	image->f.set_image = _XSetImage;*/
ImUtil.c:919:int _XSetImage(
ImUtil.h:17:_XSetImage(

#### _XSetLastRequestRead ####
XKBUse.c:232:            sev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:270:            mev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:302:            ev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:324:            cev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:349:            iev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:368:            iev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:387:            bev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:412:            axev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:433:            nev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:462:            cmev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:483:            amev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:508:            edev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:536:            nkev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XKBUse.c:560:            ev->serial = _XSetLastRequestRead(dpy, (xGenericReply *) event);
XlibInt.c:2084:_XSetLastRequestRead(
XlibInt.c:2289:		serial = _XSetLastRequestRead(dpy, (xGenericReply *)rep);
XlibInt.c:2362:    (void) _XSetLastRequestRead(dpy, &rep->generic);
XlibInt.c:3088:	((XAnyEvent *)re)->serial = _XSetLastRequestRead(dpy,
XlibInt.c:3644:    event.xerror.serial = _XSetLastRequestRead(dpy, (xGenericReply *)rep);
Xlibint.h:900:extern unsigned long _XSetLastRequestRead(

#### _XStoreEventCookie ####
ChkIfEv.c:62:		    _XStoreEventCookie(dpy, event);
ChkIfEv.c:118:		    _XStoreEventCookie(dpy, event);
ChkTypEv.c:60:		    _XStoreEventCookie(dpy, event);
ChkTypWEv.c:62:		    _XStoreEventCookie(dpy, event);
IfEvent.c:61:		    _XStoreEventCookie(dpy, event);
NextEvent.c:60:	_XStoreEventCookie(dpy, event);
OpenDis.c:858:		    _XStoreEventCookie(dpy, &qelt->event);
PeekEvent.c:55:	    _XStoreEventCookie(dpy, &copy);
PeekIfEv.c:63:			_XStoreEventCookie(dpy, &copy);
XlibInt.c:2853:_XStoreEventCookie(Display *dpy, XEvent *event)
Xlibint.h:1344:extern void _XStoreEventCookie(

#### _XTextHeight16 ####
omTextEsc.c:109:		escapement += _XTextHeight16(font, buf2b, 1);
TextExt16.c:166: * _XTextHeight16 - compute the height of sequence of XChar2bs.
TextExt16.c:169:_XTextHeight16 (
Xlibint.h:1264:extern int _XTextHeight16(

#### _XTextHeight ####
omTextEsc.c:109:		escapement += _XTextHeight16(font, buf2b, 1);
omTextEsc.c:118:		escapement += _XTextHeight(font, buf, 1);
TextExt16.c:166: * _XTextHeight16 - compute the height of sequence of XChar2bs.
TextExt16.c:169:_XTextHeight16 (
TextExt.c:191: * _XTextHeight - compute the height of a string of eightbit bytes.
TextExt.c:194:_XTextHeight (
Xlibint.h:1258:extern int _XTextHeight(
Xlibint.h:1264:extern int _XTextHeight16(

#### _XTranslateKey ####
KeyBind.c:756:_XTranslateKey(	register Display *dpy,
KeyBind.c:816:_XTranslateKeySym(
KeyBind.c:886:    if (! _XTranslateKey(event->display, event->keycode, event->state,
KeyBind.c:893:    return _XTranslateKeySym(event->display, symbol, event->state,
XKBBind.c:258:        return _XTranslateKey(dpy, key, mods, mods_rtrn, keysym_rtrn);
XKBlibint.h:162:extern int _XTranslateKey(
XKBlibint.h:170:extern int      _XTranslateKeySym(

#### _XTranslateKeySym ####
KeyBind.c:816:_XTranslateKeySym(
KeyBind.c:893:    return _XTranslateKeySym(event->display, symbol, event->state,
XKBlibint.h:170:extern int      _XTranslateKeySym(

#### _XTryShapeBitmapCursor ####
CrCursor.c:34:_XTryShapeBitmapCursor (Display		*dpy,
CrCursor.c:57:    cid = _XTryShapeBitmapCursor (dpy, source, mask,
CrGlCur.c:208:_XTryShapeBitmapCursor (Display		*dpy,
Cr.h:20:extern Cursor _XTryShapeBitmapCursor(

#### _XUnknownCopyEventCookie ####
InitExt.c:287:	if (proc == NULL) proc = (CopyEventCookieType)_XUnknownCopyEventCookie;
XlibInt.c:3050:_XUnknownCopyEventCookie(
Xlibint.h:990:extern Bool _XUnknownCopyEventCookie(

#### _XUnknownNativeEvent ####
EvToWire.c:43: * _XUnknownNativeEvent returns (i.e., False).
EvToWire.c:403:		return(_XUnknownNativeEvent(dpy, re, event));
InitExt.c:308:	if (proc == NULL) proc = (EventToWireType) _XUnknownNativeEvent;
OpenDis.c:248:	dpy->wire_vec[X_Error]  = _XUnknownNativeEvent;
OpenDis.c:249:	dpy->wire_vec[X_Reply]  = _XUnknownNativeEvent;
OpenDis.c:256:	    dpy->wire_vec[i] 	= _XUnknownNativeEvent;
XlibInt.c:3065:_XUnknownNativeEvent(
Xlibint.h:996:extern Status _XUnknownNativeEvent(

#### _XUnknownWireEvent ####
InitExt.c:245:	if (proc == NULL) proc = (WireToEventType)_XUnknownWireEvent;
InitExt.c:266:	if (proc == NULL) proc = (WireToEventCookieType)_XUnknownWireEventCookie;
OpenDis.c:246:	dpy->event_vec[X_Error] = _XUnknownWireEvent;
OpenDis.c:247:	dpy->event_vec[X_Reply] = _XUnknownWireEvent;
OpenDis.c:255:	    dpy->event_vec[i] 	= _XUnknownWireEvent;
XlibInt.c:3022:_XUnknownWireEvent(
XlibInt.c:3036:_XUnknownWireEventCookie(
XlibInt.c:3445:		return(_XUnknownWireEvent(dpy, re, event));
Xlibint.h:978:extern Bool _XUnknownWireEvent(
Xlibint.h:984:extern Bool _XUnknownWireEventCookie(

#### _XUnknownWireEventCookie ####
InitExt.c:266:	if (proc == NULL) proc = (WireToEventCookieType)_XUnknownWireEventCookie;
XlibInt.c:3036:_XUnknownWireEventCookie(
Xlibint.h:984:extern Bool _XUnknownWireEventCookie(

#### _XUnlockMutex_fn ####
locking.c:604:    _XUnlockMutex_fn = _XUnlockMutex;
XlibInt.c:93:void (*_XUnlockMutex_fn)(
XlibInt.c:4201:void (**_XUnlockMutex_fn_p)(LockInfoPtr
XlibInt.c:4206:        ) = &_XUnlockMutex_fn;
Xlibint.h:306:#define _XUnlockMutex_fn (*_XUnlockMutex_fn_p)
Xlibint.h:324:extern void (*_XUnlockMutex_fn)(
Xlibint.h:338:#define _XUnlockMutex(lock)	if (_XUnlockMutex_fn) (*_XUnlockMutex_fn)(lock,__FILE__,__LINE__)
Xlibint.h:344:#define _XUnlockMutex(lock)	if (_XUnlockMutex_fn) (*_XUnlockMutex_fn)(lock)

#### _XUnregisterFilter ####
imDefFlt.c:300:	    _XUnregisterFilter (ic->core.im->core.display,
imDefFlt.c:316:	    _XUnregisterFilter (ic->core.im->core.display,
imDefFlt.c:404:	    _XUnregisterFilter(im->core.display,
imInsClbk.c:254:		    _XUnregisterFilter( display, RootWindow(display, 0),
imLcIc.c:47:	_XUnregisterFilter(ic->core.im->core.display,
imLcIc.c:62:	_XUnregisterFilter(ic->core.im->core.display,
imRm.c:2796:	        _XUnregisterFilter(ic->core.im->core.display,
imThaiIc.c:53:	_XUnregisterFilter(ic->core.im->core.display, ic->core.focus_window,
imTrans.c:135:    _XUnregisterFilter(im->core.display, spec->window,
imTrX.c:236:    _XUnregisterFilter(im->core.display,
RegstFlt.c:137:_XUnregisterFilter(
Xlcint.h:827:extern void _XUnregisterFilter(

#### _XUnregisterInternalConnection ####
imTrans.c:134:    _XUnregisterInternalConnection(im->core.display, spec->fd);
XlibInt.c:2509:/* _XUnregisterInternalConnection
XlibInt.c:2518:_XUnregisterInternalConnection(
XlibInt.c:2528:    fprintf(stderr, "_XUnregisterInternalConnection: Got called.\n");
XlibInt.c:2645: * or _XUnregisterInternalConnection is called.
Xlibint.h:1226:extern void _XUnregisterInternalConnection(

#### _XUnresolveColor ####
LookupCol.c:62:		_XUnresolveColor(ccc, scr);
XRGB.c:220: *		_XUnresolveColor
XRGB.c:225:_XUnresolveColor(
Xcmsint.h:196:_XUnresolveColor(

#### _XUpdateAtomCache ####
GetAtomNm.c:79:	_XUpdateAtomCache(dpy, name, atom, 0, -1, 0);
GetAtomNm.c:133:	_XUpdateAtomCache(dpy, state->names[state->idx],
GetAtomNm.c:176:		_XUpdateAtomCache(dpy, names_return[missed], atoms[missed],
IntAtom.c:115:_XUpdateAtomCache(
IntAtom.c:183:	    _XUpdateAtomCache(dpy, name, atom, sig, idx, n);
IntAtom.c:234:	_XUpdateAtomCache(dpy, state->names[i], (Atom) repl->atom,
IntAtom.c:285:		_XUpdateAtomCache(dpy, names[missed], (Atom) rep.atom,
Xintatom.h:27:extern void _XUpdateAtomCache(Display *dpy, const char *name, Atom atom,

#### _XUpdateGCCache ####
ChGC.c:43:    if (valuemask) _XUpdateGCCache (gc, valuemask, values);
CrGC.c:87:    if (valuemask) _XUpdateGCCache (gc, valuemask, values);
CrGC.c:164:_XUpdateGCCache (
Cr.h:7:extern int _XUpdateGCCache(

#### _XVIDtoVisual ####
GetImage.c:96:	    image = XCreateImage(dpy, _XVIDtoVisual(dpy, rep.visual),
GetImage.c:102:            image = XCreateImage (dpy, _XVIDtoVisual(dpy, rep.visual),
GetWAttrs.c:83:    attr->visual = _XVIDtoVisual (dpy, repl->visualID);
OpenDis.c:672:	    sp->root_visual = _XVIDtoVisual(dpy, root_visualID);
VisUtil.c:145:              vip->visual = _XVIDtoVisual(dpy, vp->visualid);
VisUtil.c:227:		visual_info->visual = _XVIDtoVisual(dpy, vp->visualid);
XlibInt.c:3806:Visual *_XVIDtoVisual(
Xlibint.h:896:extern Visual *_XVIDtoVisual(

#### _XWireToEvent ####
OpenDis.c:251:	    dpy->event_vec[i] 	= _XWireToEvent;
XlibInt.c:3081:_XWireToEvent(
Xlibint.h:1002:extern Bool _XWireToEvent(Display *dpy, XEvent *re, xEvent *event);

#### _XcmsAddCmapRec ####
cmsCmap.c:105:	    if ((pRec = _XcmsAddCmapRec(dpy, cmap, RootWindow(dpy, i),
cmsCmap.c:200:	    if ((pRec = _XcmsAddCmapRec(dpy, cmap, tmpWindow, vp)) == NULL)
cmsCmap.c:230: *		_XcmsAddCmapRec
cmsCmap.c:235:_XcmsAddCmapRec(
cmsCmap.c:300:	pRec_copy =_XcmsAddCmapRec(dpy, copy_cmap, pRec_src->windowID,
CrCmap.c:55:    _XcmsAddCmapRec(dpy, mid, w, visual);
Xcmsint.h:179:_XcmsAddCmapRec(

#### _XcmsArcTangent ####
cmsTrig.c:530: *		_XcmsArcTangent
cmsTrig.c:535:_XcmsArcTangent(double x)
Xcmsint.h:211:#define XCMS_ATAN(x)		_XcmsArcTangent(x)
Xcmsint.h:219:double _XcmsArcTangent(double a);

#### _XcmsCIELabQueryMaxLCRGB ####
LabGcL.c:119:	if (_XcmsCIELabQueryMaxLCRGB (&myCCC, hue, &Lab_max,
LabGcLC.c:141:    if (_XcmsCIELabQueryMaxLCRGB (&myCCC, hue, &Lab_max, &rgb_max)
LabMnL.c:119:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxC.c:125:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxL.c:119:    if (_XcmsCIELabQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LabMxLC.c:67: *		_XcmsCIELabQueryMaxLCRGB - Compute maximum L* and chroma.
LabMxLC.c:72:_XcmsCIELabQueryMaxLCRGB(
LabMxLC.c:216:    return(_XcmsCIELabQueryMaxLCRGB (&myCCC, radians(hue_angle), pColor_return,
Cv.h:67:_XcmsCIELabQueryMaxLCRGB(

#### _XcmsCIELab_prefix ####
cmsGlobls.c:107:const char	_XcmsCIELab_prefix[] = "cielab";
cmsGlobls.c:120:    { _XcmsCIELab_prefix, XcmsCIELabFormat },
Lab.c:99:	_XcmsCIELab_prefix,	/* prefix */
Lab.c:152:    if (strncmp(spec, _XcmsCIELab_prefix, n) != 0) {
Cv.h:9:extern const char      _XcmsCIELab_prefix[];

#### _XcmsCIELuvQueryMaxLCRGB ####
LuvGcL.c:119:	if (_XcmsCIELuvQueryMaxLCRGB (&myCCC, hue, &Luv_max,
LuvGcLC.c:141:    if (_XcmsCIELuvQueryMaxLCRGB (&myCCC, hue, &Luv_max, &rgb_max)
LuvMnL.c:119:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxC.c:125:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxL.c:119:    if (_XcmsCIELuvQueryMaxLCRGB(&myCCC, hue, &max_lc, &rgb_saved)
LuvMxLC.c:67: *		_XcmsCIELuvQueryMaxLCRGB - Compute maximum L* and chroma.
LuvMxLC.c:72:_XcmsCIELuvQueryMaxLCRGB(
LuvMxLC.c:216:    return(_XcmsCIELuvQueryMaxLCRGB (&myCCC, radians(hue_angle), pColor_return,
Cv.h:129:_XcmsCIELuvQueryMaxLCRGB(

#### _XcmsCIELuv_prefix ####
cmsGlobls.c:108:const char 	_XcmsCIELuv_prefix[] = "cieluv";
cmsGlobls.c:121:    { _XcmsCIELuv_prefix, XcmsCIELuvFormat },
Luv.c:102:	_XcmsCIELuv_prefix,	/* prefix */
Luv.c:155:    if (strncmp(spec, _XcmsCIELuv_prefix, n) != 0) {
Cv.h:10:extern const char      _XcmsCIELuv_prefix[];

#### _XcmsCIEXYZ_ValidSpec ####
Lab.c:393:	if (!_XcmsCIEXYZ_ValidSpec(pColor)) {
uvY.c:380:	if (!_XcmsCIEXYZ_ValidSpec(pColor)) {
xyY.c:377:	if (!_XcmsCIEXYZ_ValidSpec(pColor)) {
XYZ.c:166:    return(_XcmsCIEXYZ_ValidSpec(pColor));
XYZ.c:183:_XcmsCIEXYZ_ValidSpec(
Cv.h:51:_XcmsCIEXYZ_ValidSpec(

#### _XcmsCIEXYZ_prefix ####
cmsGlobls.c:104:const char	_XcmsCIEXYZ_prefix[] = "ciexyz";
cmsGlobls.c:117:    { _XcmsCIEXYZ_prefix, XcmsCIEXYZFormat },
XYZ.c:82:	_XcmsCIEXYZ_prefix,		/* prefix */
XYZ.c:134:    if (strncmp(spec, _XcmsCIEXYZ_prefix, n) != 0) {
Cv.h:6:extern const char      _XcmsCIEXYZ_prefix[];

#### _XcmsCIEuvY_ValidSpec ####
HVC.c:504:	if (!_XcmsCIEuvY_ValidSpec(pColor)) {
Luv.c:377:	if (!_XcmsCIEuvY_ValidSpec(pColor)) {
uvY.c:181:    return(_XcmsCIEuvY_ValidSpec(pColor));
uvY.c:198:_XcmsCIEuvY_ValidSpec(
uvY.c:266:	if (!_XcmsCIEuvY_ValidSpec(pColor)) {
Cv.h:54:_XcmsCIEuvY_ValidSpec(

#### _XcmsCIEuvY_prefix ####
cmsGlobls.c:105:const char	_XcmsCIEuvY_prefix[] = "cieuvy";
cmsGlobls.c:118:    { _XcmsCIEuvY_prefix, XcmsCIEuvYFormat },
uvY.c:95:	_XcmsCIEuvY_prefix,		/* prefix */
uvY.c:149:    if (strncmp(spec, _XcmsCIEuvY_prefix, n) != 0) {
Cv.h:7:extern const char      _XcmsCIEuvY_prefix[];

#### _XcmsCIExyY_prefix ####
cmsGlobls.c:106:const char	_XcmsCIExyY_prefix[] = "ciexyy";
cmsGlobls.c:119:    { _XcmsCIExyY_prefix, XcmsCIExyYFormat },
xyY.c:94:	_XcmsCIExyY_prefix,	/* prefix */
xyY.c:148:    if (strncmp(spec, _XcmsCIExyY_prefix, n) != 0) {
Cv.h:8:extern const char      _XcmsCIExyY_prefix[];

#### _XcmsConvertColorsWithWhitePt ####
CvColW.c:53: *		_XcmsConvertColorsWithWhitePt - Convert XcmsColor structures
CvColW.c:58:_XcmsConvertColorsWithWhitePt(
HVCGcVC.c:215:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, pColor,
HVCMxC.c:178:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
HVCMxV.c:187:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
HVCMxVC.c:124:    if ((_XcmsConvertColorsWithWhitePt(ccc, &tmp,
HVCMxVC.c:157:    if (_XcmsConvertColorsWithWhitePt(ccc, &tmp,
HVCMxVs.c:150:	if (_XcmsConvertColorsWithWhitePt(&myCCC, pHVC,
HVCWpAj.c:104:    if (_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtFrom,
HVCWpAj.c:112:    return(_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtTo,
LabGcLC.c:181:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, pColor,
LabMnL.c:170:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LabMxC.c:166:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LabMxL.c:170:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LabMxLC.c:116:    if ((_XcmsConvertColorsWithWhitePt(ccc, &tmp, ScreenWhitePointOfCCC(ccc),
LabMxLC.c:149:    if (_XcmsConvertColorsWithWhitePt(ccc, &tmp,
LabWpAj.c:87:    if (_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtFrom,
LabWpAj.c:95:    return(_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out,
LuvGcLC.c:181:	    if (_XcmsConvertColorsWithWhitePt(&myCCC, pColor,
LuvMnL.c:170:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LuvMxC.c:167:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LuvMxL.c:170:	if (_XcmsConvertColorsWithWhitePt(&myCCC, &tmp,
LuvMxLC.c:116:    if ((_XcmsConvertColorsWithWhitePt(ccc, &tmp, ScreenWhitePointOfCCC(ccc),
LuvMxLC.c:149:    if (_XcmsConvertColorsWithWhitePt(ccc, &tmp,
LuvWpAj.c:86:    if (_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtFrom,
LuvWpAj.c:94:    return(_XcmsConvertColorsWithWhitePt(ccc, pColors_in_out, pWhitePtTo,
Cv.h:73:_XcmsConvertColorsWithWhitePt(

#### _XcmsCopyCmapRecAndFree ####
cmsCmap.c:276: *		_XcmsCopyCmapRecAndFree
cmsCmap.c:281:_XcmsCopyCmapRecAndFree(
CopyCmap.c:38:extern XcmsCmapRec * _XcmsCopyCmapRecAndFree(Display *dpy,
CopyCmap.c:60:    _XcmsCopyCmapRecAndFree(dpy, src_cmap, mid);
Cv.h:147:_XcmsCopyCmapRecAndFree(

#### _XcmsCopyISOLatin1Lowered ####
cmsColNm.c:217:    _XcmsCopyISOLatin1Lowered(string_lowered, color_string);
cmsColNm.c:426:    _XcmsCopyISOLatin1Lowered(name_lowered, tmpName);
cmsColNm.c:691:	_XcmsCopyISOLatin1Lowered(pString, f1);
cmsColNm.c:695:	_XcmsCopyISOLatin1Lowered(pString, f2);
cmsColNm.c:787: *		_XcmsCopyISOLatin1Lowered
cmsColNm.c:792:_XcmsCopyISOLatin1Lowered(
IdOfPr.c:74:    _XcmsCopyISOLatin1Lowered(string_lowered, prefix);
Cv.h:152:_XcmsCopyISOLatin1Lowered(

#### _XcmsCopyPointerArray ####
cmsInt.c:61: *		_XcmsCopyPointerArray
cmsInt.c:66:_XcmsCopyPointerArray(
Cv.h:40:_XcmsCopyPointerArray(

#### _XcmsCosine ####
cmsTrig.c:122: *	_XcmsCosine   double precision cosine
cmsTrig.c:138: *	double _XcmsCosine (x)
cmsTrig.c:225:double _XcmsCosine(double x)
cmsTrig.c:240:	retval = -(_XcmsCosine (x - XCMS_PI));
cmsTrig.c:242:	retval = -(_XcmsCosine (x + XCMS_PI));
cmsTrig.c:514:	retval = _XcmsCosine (XCMS_HALFPI - x);
cmsTrig.c:516:	retval = -(_XcmsCosine (XCMS_HALFPI + x));
Xcmsint.h:212:#define XCMS_COS(x)		_XcmsCosine(x)
Xcmsint.h:220:double _XcmsCosine(double a);

#### _XcmsCubeRoot ####
cmsMath.c:58:_XcmsCubeRoot(double a)
cmsMath.c:63:    printf("_XcmsCubeRoot passed in %g\n", a);
cmsMath.c:92:    printf("_XcmsCubeRoot returning %g\n", cur_guess);
Xcmsint.h:213:#define XCMS_CUBEROOT(x)	_XcmsCubeRoot(x)
Xcmsint.h:221:double _XcmsCubeRoot(double a);

#### _XcmsDDColorSpaces ####
AddSF.c:110:		 *    _XcmsDDColorSpaces.
AddSF.c:114:		for (paptmpCS = _XcmsDDColorSpaces; *paptmpCS != NULL;
AddSF.c:126:		   	    (XPointer *) _XcmsDDColorSpaces,
AddSF.c:128:			    (XPointer *) _XcmsDDColorSpacesInit)) == NULL) {
AddSF.c:131:		    _XcmsDDColorSpaces = paptmpCS;
cmsGlobls.c:71:XcmsColorSpace *_XcmsDDColorSpacesInit[] = {
cmsGlobls.c:81:XcmsColorSpace **_XcmsDDColorSpaces = &_XcmsDDColorSpacesInit[0];
IdOfPr.c:93:    papColorSpaces = _XcmsDDColorSpaces;
PrOfId.c:86:    papColorSpaces = _XcmsDDColorSpaces;
Cv.h:28:extern XcmsColorSpace  *_XcmsDDColorSpacesInit[];
Cv.h:29:extern XcmsColorSpace  **_XcmsDDColorSpaces;

#### _XcmsDDColorSpacesInit ####
AddSF.c:128:			    (XPointer *) _XcmsDDColorSpacesInit)) == NULL) {
cmsGlobls.c:71:XcmsColorSpace *_XcmsDDColorSpacesInit[] = {
cmsGlobls.c:81:XcmsColorSpace **_XcmsDDColorSpaces = &_XcmsDDColorSpacesInit[0];
Cv.h:28:extern XcmsColorSpace  *_XcmsDDColorSpacesInit[];

#### _XcmsDDConvertColors ####
cmsColNm.c:943:	    return(_XcmsDDConvertColors(ccc, pColor_exact_return,
cmsColNm.c:956:		if (_XcmsDDConvertColors(ccc, pColor_exact_return, 1,
cmsColNm.c:995:		return (_XcmsDDConvertColors(ccc, pColor_exact_return, 1,
CvCols.c:320:		    retval_tmp = _XcmsDDConvertColors(ccc, pColors_start,
CvCols.c:332:		retval_tmp = _XcmsDDConvertColors(ccc, pColors_start, nBatch,
CvCols.c:541: *		_XcmsDDConvertColors - Convert XcmsColor structures
CvCols.c:546:_XcmsDDConvertColors(
CvCols.c:829:	    retval = _XcmsDDConvertColors(ccc, pColors_tmp, nColors,
CvCols.c:860:		    retval = _XcmsDDConvertColors(ccc, pColors_tmp, nColors,
CvCols.c:880:		    if (_XcmsDDConvertColors(ccc, pColors_tmp, nColors,
CvCols.c:979:		retval = _XcmsDDConvertColors(ccc, pColors_tmp, nColors,
CvColW.c:105:	return(_XcmsDDConvertColors(ccc, pColors_in_out, nColors, newFormat,
CvColW.c:126:	return(_XcmsDDConvertColors(ccc, pColors_in_out, nColors, newFormat,
CvColW.c:133:	if (_XcmsDDConvertColors(ccc, pColors_in_out, nColors,
Cv.h:89:_XcmsDDConvertColors(

#### _XcmsDIColorSpaces ####
AddDIC.c:94:	if ((papColorSpaces = _XcmsDIColorSpaces) != NULL) {
AddDIC.c:121:	if ((papColorSpaces = _XcmsDIColorSpaces) != NULL) {
AddDIC.c:142:	    _XcmsPushPointerArray((XPointer *)_XcmsDIColorSpaces,
AddDIC.c:144:	    (XPointer *)_XcmsDIColorSpacesInit)) == NULL) {
AddDIC.c:147:    _XcmsDIColorSpaces = papColorSpaces;
cmsColNm.c:144:    papColorSpaces = _XcmsDIColorSpaces;
cmsGlobls.c:51:XcmsColorSpace *_XcmsDIColorSpacesInit[] = {
cmsGlobls.c:66:XcmsColorSpace **_XcmsDIColorSpaces = _XcmsDIColorSpacesInit;
CvCols.c:120:    papColorSpaces = _XcmsDIColorSpaces;
CvCols.c:167:    papRec = _XcmsDIColorSpaces;
IdOfPr.c:79:    papColorSpaces = _XcmsDIColorSpaces;
PrOfId.c:73:    papColorSpaces = _XcmsDIColorSpaces;
Cv.h:25:extern XcmsColorSpace  *_XcmsDIColorSpacesInit[];
Cv.h:26:extern XcmsColorSpace  **_XcmsDIColorSpaces;

#### _XcmsDIColorSpacesInit ####
AddDIC.c:144:	    (XPointer *)_XcmsDIColorSpacesInit)) == NULL) {
cmsGlobls.c:51:XcmsColorSpace *_XcmsDIColorSpacesInit[] = {
cmsGlobls.c:66:XcmsColorSpace **_XcmsDIColorSpaces = _XcmsDIColorSpacesInit;
Cv.h:25:extern XcmsColorSpace  *_XcmsDIColorSpacesInit[];

#### _XcmsDIConvertColors ####
cmsColNm.c:960:		return(_XcmsDIConvertColors(ccc, pColor_exact_return,
cmsColNm.c:990:		    if (_XcmsDIConvertColors(ccc, pColor_exact_return,
cmsColNm.c:1023:		    return (_XcmsDIConvertColors(ccc, pColor_exact_return,
cmsColNm.c:1039:		    if (_XcmsDIConvertColors(ccc, pColor_exact_return,
cmsColNm.c:1047:		    return(_XcmsDIConvertColors(ccc, pColor_exact_return,
CvCols.c:296:		retval_tmp = _XcmsDIConvertColors(ccc, pColors_start, pWhitePt,
CvCols.c:378:	if (_XcmsDIConvertColors(ccc, &tmp1, (XcmsColor *) NULL, 1,
CvCols.c:385:	if (_XcmsDIConvertColors(ccc, &tmp2, (XcmsColor *) NULL, 1,
CvCols.c:397: *		_XcmsDIConvertColors - Convert XcmsColor structures
CvCols.c:402:_XcmsDIConvertColors(
CvCols.c:821:	    retval = _XcmsDIConvertColors(ccc, pColors_tmp,
CvCols.c:855:		    if (_XcmsDIConvertColors(ccc, pColors_tmp,
CvCols.c:884:		    retval = _XcmsDIConvertColors(ccc, pColors_tmp,
CvColW.c:98:	return(_XcmsDIConvertColors(ccc, pColors_in_out, pWhitePt, nColors,
CvColW.c:121:	if (_XcmsDIConvertColors(ccc, pColors_in_out, pWhitePt, nColors,
CvColW.c:138:	return(_XcmsDIConvertColors(ccc, pColors_in_out, pWhitePt, nColors,
HVC.c:367:	if (!_XcmsDIConvertColors(ccc, &whitePt, (XcmsColor *)NULL, 1,
HVC.c:486:	if (!_XcmsDIConvertColors(ccc, &whitePt, (XcmsColor *)NULL, 1,
HVCGcC.c:118:	_XcmsDIConvertColors(ccc, pColor, &ccc->pPerScrnInfo->screenWhitePt,
HVCGcC.c:121:	_XcmsDIConvertColors(ccc, pColor, &ccc->pPerScrnInfo->screenWhitePt,
HVCGcC.c:129:	    if (_XcmsDIConvertColors(ccc, pColor,
HVCGcC.c:142:	retval = _XcmsDIConvertColors(ccc, pColor,
HVCGcV.c:126:	if (_XcmsDIConvertColors(&myCCC, pColor,
HVCGcV.c:153:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
HVCGcV.c:174:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
HVCGcV.c:180:		if (_XcmsDIConvertColors(ccc, pColor,
HVCGcV.c:193:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
HVCGcVC.c:134:	_XcmsDIConvertColors(ccc, pColor, &ccc->pPerScrnInfo->screenWhitePt,
HVCGcVC.c:137:	_XcmsDIConvertColors(ccc, pColor, &ccc->pPerScrnInfo->screenWhitePt,
HVCGcVC.c:145:	if (_XcmsDIConvertColors(&myCCC, pColor,
HVCGcVC.c:168:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
HVCGcVC.c:188:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
HVCGcVC.c:254:	retval = _XcmsDIConvertColors(&myCCC, pColor,
Lab.c:270:	if (!_XcmsDIConvertColors(ccc, &whitePt,
Lab.c:373:	if (!_XcmsDIConvertColors(ccc, &whitePt, (XcmsColor *)NULL,
LabGcC.c:97:	_XcmsDIConvertColors(ccc, pColor, ScreenWhitePointOfCCC(ccc),
LabGcC.c:99:	_XcmsDIConvertColors(ccc, pColor, ScreenWhitePointOfCCC(ccc),
LabGcC.c:107:	    if (_XcmsDIConvertColors(ccc, pColor,
LabGcC.c:120:	retval = _XcmsDIConvertColors(ccc, pColor,
LabGcL.c:106:	if (_XcmsDIConvertColors(&myCCC, pColor,
LabGcL.c:131:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
LabGcL.c:141:		if (_XcmsDIConvertColors(ccc, pColor,
LabGcL.c:151:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
LabGcL.c:156:		if (_XcmsDIConvertColors(ccc, pColor,
LabGcL.c:166:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
LabGcLC.c:116:	_XcmsDIConvertColors(ccc, pColor, ScreenWhitePointOfCCC(ccc),
LabGcLC.c:118:	_XcmsDIConvertColors(ccc, pColor, ScreenWhitePointOfCCC(ccc),
LabGcLC.c:127:    if (_XcmsDIConvertColors(&myCCC, pColor,
LabGcLC.c:152:	retval = _XcmsDIConvertColors(&myCCC, pColor,
LabGcLC.c:215:	retval = _XcmsDIConvertColors(&myCCC, pColor,
Luv.c:269:	if (!_XcmsDIConvertColors(ccc, &whitePt, (XcmsColor *)NULL,
Luv.c:361:	if (!_XcmsDIConvertColors(ccc, &whitePt,
LuvGcC.c:97:	_XcmsDIConvertColors(ccc, pColor, ScreenWhitePointOfCCC(ccc),
LuvGcC.c:99:	_XcmsDIConvertColors(ccc, pColor, ScreenWhitePointOfCCC(ccc),
LuvGcC.c:107:	    if (_XcmsDIConvertColors(ccc, pColor,
LuvGcC.c:120:	retval = _XcmsDIConvertColors(ccc, pColor,
LuvGcL.c:106:	if (_XcmsDIConvertColors(&myCCC, pColor,
LuvGcL.c:131:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
LuvGcL.c:141:		if (_XcmsDIConvertColors(ccc, pColor,
LuvGcL.c:151:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
LuvGcL.c:156:		if (_XcmsDIConvertColors(ccc, pColor,
LuvGcL.c:166:	    retval = _XcmsDIConvertColors(&myCCC, pColor,
LuvGcLC.c:116:	_XcmsDIConvertColors(ccc, pColor, ScreenWhitePointOfCCC(ccc),
LuvGcLC.c:118:	_XcmsDIConvertColors(ccc, pColor, ScreenWhitePointOfCCC(ccc),
LuvGcLC.c:127:    if (_XcmsDIConvertColors(&myCCC, pColor,
LuvGcLC.c:152:	retval = _XcmsDIConvertColors(&myCCC, pColor,
LuvGcLC.c:215:	retval = _XcmsDIConvertColors(&myCCC, pColor,
uvY.c:289:		if (!_XcmsDIConvertColors(ccc, &whitePt, (XcmsColor *)NULL, 1,
uvY.c:398:		if (!_XcmsDIConvertColors(ccc, &whitePt, (XcmsColor *)NULL, 1,
xyY.c:288:		if (!_XcmsDIConvertColors(ccc, &whitePt, (XcmsColor *)NULL, 1,
Cv.h:82:_XcmsDIConvertColors(

#### _XcmsDeleteCmapRec ####
cmsCmap.c:315: *		_XcmsDeleteCmapRec
cmsCmap.c:320:_XcmsDeleteCmapRec(
FreeCmap.c:48:    _XcmsDeleteCmapRec(dpy, cmap);
Cmap.h:8:_XcmsDeleteCmapRec(

#### _XcmsEqualWhitePts ####
cmsColNm.c:950:	    if (ccc->whitePtAdjProc && !_XcmsEqualWhitePts(ccc,
cmsColNm.c:983:	    if (ccc->whitePtAdjProc && !_XcmsEqualWhitePts(ccc,
cmsColNm.c:1003:	    if (ccc->whitePtAdjProc && !_XcmsEqualWhitePts(ccc,
cmsColNm.c:1014:	    } else if (_XcmsEqualWhitePts(ccc,
CvCols.c:309:		if ((ccc->whitePtAdjProc != NULL) && !_XcmsEqualWhitePts(ccc,
CvCols.c:358: *		_XcmsEqualWhitePts
CvCols.c:363:_XcmsEqualWhitePts(XcmsCCC ccc, XcmsColor *pWhitePt1, XcmsColor *pWhitePt2)
CvCols.c:784:	} else if ((ccc->whitePtAdjProc != NULL) && !_XcmsEqualWhitePts(ccc,
Cv.h:156:_XcmsEqualWhitePts(

#### _XcmsFreeIntensityMaps ####
cmsInt.c:349: *		_XcmsFreeIntensityMaps
cmsInt.c:354:_XcmsFreeIntensityMaps(
LRGB.c:674:	    dpy->free_funcs->intensityMaps = _XcmsFreeIntensityMaps;
Cv.h:164:_XcmsFreeIntensityMaps(
Xlibint.h:743:    FreeFuncType intensityMaps;	/* _XcmsFreeIntensityMaps */

#### _XcmsFreePointerArray ####
cmsInt.c:94: *		_XcmsFreePointerArray
cmsInt.c:99:_XcmsFreePointerArray(
cmsInt.c:150:        _XcmsFreePointerArray(pap);
Cv.h:43:_XcmsFreePointerArray(

#### _XcmsGetElement ####
cmsProp.c:52: *		_XcmsGetElement -- get an element value from the property passed
cmsProp.c:57:_XcmsGetElement(
LRGB.c:511:	    *pValue++ = (long)_XcmsGetElement(format_return, &pChar,
LRGB.c:639:	visualID = _XcmsGetElement(format_return, &pChar, &nitems);
LRGB.c:642:	    visualID |= _XcmsGetElement(format_return, &pChar, &nitems);
LRGB.c:677:	cType = _XcmsGetElement(format_return, &pChar, &nitems);
LRGB.c:678:	nTables = _XcmsGetElement(format_return, &pChar, &nitems);
LRGB.c:909:	    _XcmsGetElement(format, pChar, pCount) + 1;
LRGB.c:919:	    pIRec->value = _XcmsGetElement (format, pChar, pCount) * 0x101;
LRGB.c:921:		    _XcmsGetElement (format, pChar, pCount) / (XcmsFloat)255.0;
LRGB.c:926:	    pIRec->value = _XcmsGetElement (format, pChar, pCount);
LRGB.c:927:	    pIRec->intensity = _XcmsGetElement (format, pChar, pCount)
LRGB.c:933:	    pIRec->value = _XcmsGetElement (format, pChar, pCount);
LRGB.c:934:	    pIRec->intensity = _XcmsGetElement (format, pChar, pCount)
LRGB.c:970:    max_index = _XcmsGetElement(format, pChar, pCount);
LRGB.c:981:	    pIRec->intensity = _XcmsGetElement (format, pChar, pCount)
LRGB.c:988:	    pIRec->intensity = _XcmsGetElement (format, pChar, pCount)
LRGB.c:995:	    pIRec->intensity = _XcmsGetElement (format, pChar, pCount)
Cv.h:176:_XcmsGetElement(

#### _XcmsGetIntensityMap ####
CCC.c:146:    if ((pIMap = _XcmsGetIntensityMap(dpy, visual)) != NULL) {
CCC.c:280:    if (_XcmsGetIntensityMap(ccc->dpy, ccc->visual) != NULL) {
cmsInt.c:382: *		_XcmsGetIntensityMap
cmsInt.c:387:_XcmsGetIntensityMap(
Cv.h:136:_XcmsGetIntensityMap(

#### _XcmsGetProperty ####
cmsProp.c:98: *		_XcmsGetProperty -- Determine the existance of a property
cmsProp.c:103:_XcmsGetProperty(
LRGB.c:494:	!_XcmsGetProperty (dpy, RootWindow(dpy, screenNumber), MatrixAtom,
LRGB.c:574:	!_XcmsGetProperty (dpy, RootWindow(dpy, screenNumber), CorrectAtom,
Cv.h:167:_XcmsGetProperty(

#### _XcmsInitDefaultCCCs ####
CCC.c:200:	if (!_XcmsInitDefaultCCCs(dpy)) {
cmsInt.c:157: *		_XcmsInitDefaultCCCs
cmsInt.c:162:_XcmsInitDefaultCCCs(
cmsInt.c:303:	if (!_XcmsInitDefaultCCCs(dpy)) {
Cv.h:140:_XcmsInitDefaultCCCs(

#### _XcmsInitScrnInfo ####
CCC.c:210:	 * _XcmsInitScrnInfo routine will create the XcmsPerScrnInfo
CCC.c:214:	if (!_XcmsInitScrnInfo(dpy, screenNumber)) {
CCC.c:237:	    if (!_XcmsInitScrnInfo(dpy, screenNumber)) {
cmsInt.c:276: *		_XcmsInitScrnInfo
cmsInt.c:281:_XcmsInitScrnInfo(
Cv.h:143:_XcmsInitScrnInfo(

#### _XcmsLRGB_InitScrnDefault ####
cmsInt.c:343:    return(_XcmsLRGB_InitScrnDefault(dpy, screenNumber, defaultccc->pPerScrnInfo));
LRGB.c:1802:_XcmsLRGB_InitScrnDefault(
Cv.h:159:_XcmsLRGB_InitScrnDefault(

#### _XcmsPushPointerArray ####
AddDIC.c:142:	    _XcmsPushPointerArray((XPointer *)_XcmsDIColorSpaces,
AddSF.c:125:		    if ((paptmpCS = (XcmsColorSpace **)_XcmsPushPointerArray(
AddSF.c:137:	    _XcmsPushPointerArray((XPointer *) _XcmsSCCFuncSets,
cmsInt.c:115: *		_XcmsPushPointerArray
cmsInt.c:120:_XcmsPushPointerArray(
Cv.h:46:_XcmsPushPointerArray(

#### _XcmsRGB_prefix ####
cmsGlobls.c:114:const char	_XcmsRGB_prefix[] = "rgb";
cmsGlobls.c:123:    { _XcmsRGB_prefix, XcmsRGBFormat },
LRGB.c:181:	_XcmsRGB_prefix,		/* prefix */
LRGB.c:1337:	if (strncmp(spec, _XcmsRGB_prefix, n) != 0) {
Cv.h:13:extern const char      _XcmsRGB_prefix[];

#### _XcmsRGB_to_XColor ####
cmsAllNCol.c:120:    _XcmsRGB_to_XColor(&tmpColor, &XColor_in_out, 1);
GetColor.c:62:	    _XcmsRGB_to_XColor(&cmsColor_exact, exact_def, 1);
LookupCol.c:60:		_XcmsRGB_to_XColor(&cmsColor_exact, def, 1);
ParseCol.c:98:		_XcmsRGB_to_XColor(&cmsColor, def, 1);
SetGetCols.c:131:    _XcmsRGB_to_XColor(pColors_in_out, &XColors_in_out, 1);
SetGetCols.c:262:    _XcmsRGB_to_XColor(pColors_in_out, pXColors_in_out, nColors);
StNColor.c:56:	    _XcmsRGB_to_XColor(&cmsColor_exact, &scr_def, 1);
XRGB.c:77: *		_XcmsRGB_to_XColor -
XRGB.c:82:_XcmsRGB_to_XColor(
Xcmsint.h:185:_XcmsRGB_to_XColor(

#### _XcmsRGBi_prefix ####
cmsGlobls.c:113:const char	_XcmsRGBi_prefix[] = "rgbi";
cmsGlobls.c:124:    { _XcmsRGBi_prefix,	XcmsRGBiFormat },
LRGB.c:168:	_XcmsRGBi_prefix,	/* prefix */
LRGB.c:1416:    if (strncmp(spec, _XcmsRGBi_prefix, n) != 0) {
Cv.h:12:extern const char      _XcmsRGBi_prefix[];

#### _XcmsRegColorSpaces ####
cmsGlobls.c:116:XcmsRegColorSpaceEntry _XcmsRegColorSpaces[] = {
CvCols.c:1021:    XcmsRegColorSpaceEntry *pEntry = _XcmsRegColorSpaces;
Cv.h:36:extern XcmsRegColorSpaceEntry _XcmsRegColorSpaces[];

#### _XcmsRegFormatOfPrefix ####
AddDIC.c:77:    if ((pCS->id = _XcmsRegFormatOfPrefix(pCS->prefix)) != 0) {
AddSF.c:97:	    if ((pNewCS->id = _XcmsRegFormatOfPrefix(pNewCS->prefix)) != 0) {
CvCols.c:1009:_XcmsRegFormatOfPrefix(
Cv.h:96:_XcmsRegFormatOfPrefix(

#### _XcmsResolveColor ####
cmsAllNCol.c:99:    if ((retval1 = _XcmsResolveColorString(ccc, &colorname,
cmsColNm.c:831: *		_XcmsResolveColorString -
cmsColNm.c:836:_XcmsResolveColorString (
cmsLkCol.c:96:    if ((retval1 = _XcmsResolveColorString(ccc, &colorname,
cmsLkCol.c:134:	_XcmsResolveColor(ccc, pColor_scrn_return);
GetColor.c:58:	switch (_XcmsResolveColorString(ccc, &tmpName, &cmsColor_exact,
LookupCol.c:56:	    switch (_XcmsResolveColorString(ccc, &tmpName, &cmsColor_exact,
ParseCol.c:93:	    switch (_XcmsResolveColorString(ccc, &tmpName, &cmsColor,
StNColor.c:54:	if (_XcmsResolveColorString(ccc, &name, &cmsColor_exact,
XRGB.c:145: *		_XcmsResolveColor
XRGB.c:150:_XcmsResolveColor(
Cv.h:185:_XcmsResolveColor(
Xcmsint.h:190:_XcmsResolveColorString (

#### _XcmsResolveColorString ####
cmsAllNCol.c:99:    if ((retval1 = _XcmsResolveColorString(ccc, &colorname,
cmsColNm.c:831: *		_XcmsResolveColorString -
cmsColNm.c:836:_XcmsResolveColorString (
cmsLkCol.c:96:    if ((retval1 = _XcmsResolveColorString(ccc, &colorname,
GetColor.c:58:	switch (_XcmsResolveColorString(ccc, &tmpName, &cmsColor_exact,
LookupCol.c:56:	    switch (_XcmsResolveColorString(ccc, &tmpName, &cmsColor_exact,
ParseCol.c:93:	    switch (_XcmsResolveColorString(ccc, &tmpName, &cmsColor,
StNColor.c:54:	if (_XcmsResolveColorString(ccc, &name, &cmsColor_exact,
Xcmsint.h:190:_XcmsResolveColorString (

#### _XcmsSCCFuncSets ####
AddSF.c:82:    XcmsFunctionSet **papSCCFuncSets = _XcmsSCCFuncSets;
AddSF.c:137:	    _XcmsPushPointerArray((XPointer *) _XcmsSCCFuncSets,
AddSF.c:139:	    (XPointer *)_XcmsSCCFuncSetsInit)) == NULL) {
AddSF.c:142:    _XcmsSCCFuncSets = papSCCFuncSets;
cmsGlobls.c:86:XcmsFunctionSet	*_XcmsSCCFuncSetsInit[] = {
cmsGlobls.c:98:XcmsFunctionSet **_XcmsSCCFuncSets = _XcmsSCCFuncSetsInit;
cmsInt.c:294:    XcmsFunctionSet **papSCCFuncSet = _XcmsSCCFuncSets;
Cv.h:33:extern XcmsFunctionSet *_XcmsSCCFuncSetsInit[];
Cv.h:34:extern XcmsFunctionSet **_XcmsSCCFuncSets;

#### _XcmsSCCFuncSetsInit ####
AddSF.c:139:	    (XPointer *)_XcmsSCCFuncSetsInit)) == NULL) {
cmsGlobls.c:86:XcmsFunctionSet	*_XcmsSCCFuncSetsInit[] = {
cmsGlobls.c:98:XcmsFunctionSet **_XcmsSCCFuncSets = _XcmsSCCFuncSetsInit;
Cv.h:33:extern XcmsFunctionSet *_XcmsSCCFuncSetsInit[];

#### _XcmsSetGetColor ####
cmsAllCol.c:72:    return(_XcmsSetGetColor(XAllocColor, dpy, colormap, pXcmsColor_in_out,
QuCol.c:76:    return(_XcmsSetGetColor(XQueryColor, dpy, colormap,
QuCols.c:76:    return(_XcmsSetGetColors(XQueryColors, dpy, colormap,
SetGetCols.c:30: *		Source for _XcmsSetGetColors()
SetGetCols.c:61:_XcmsSetGetColor(
SetGetCols.c:178:_XcmsSetGetColors(
StCol.c:80:    return(_XcmsSetGetColor(XStoreColor, dpy, colormap,
StCols.c:98:    retval = _XcmsSetGetColors (XStoreColors, dpy, colormap,
Cv.h:105:_XcmsSetGetColor(
Cv.h:116:_XcmsSetGetColors(

#### _XcmsSetGetColors ####
QuCols.c:76:    return(_XcmsSetGetColors(XQueryColors, dpy, colormap,
SetGetCols.c:30: *		Source for _XcmsSetGetColors()
SetGetCols.c:178:_XcmsSetGetColors(
StCols.c:98:    retval = _XcmsSetGetColors (XStoreColors, dpy, colormap,
Cv.h:116:_XcmsSetGetColors(

#### _XcmsSine ####
cmsTrig.c:244:	retval = _XcmsSine (XCMS_HALFPI - x);
cmsTrig.c:246:	retval = _XcmsSine (XCMS_HALFPI + x);
cmsTrig.c:390: *	_XcmsSine	double precision sine
cmsTrig.c:406: *	double _XcmsSine (x)
cmsTrig.c:495:_XcmsSine (double x)
cmsTrig.c:510:	retval = -(_XcmsSine (x - XCMS_PI));
cmsTrig.c:512:	retval = -(_XcmsSine (x + XCMS_PI));
Xcmsint.h:215:#define XCMS_SIN(x)		_XcmsSine(x)
Xcmsint.h:222:double _XcmsSine(double a);

#### _XcmsSquareRoot ####
cmsMath.c:102:_XcmsSquareRoot(double a)
cmsMath.c:107:    printf("_XcmsSquareRoot passed in %g\n", a);
cmsMath.c:136:    printf("_XcmsSquareRoot returning %g\n", cur_guess);
cmsTrig.c:248:	retval = _XcmsSquareRoot (1.0 - (x * x));
cmsTrig.c:560:    ai = _XcmsSquareRoot( 1.0 / (1.0 + (x * x)) );
cmsTrig.c:564:	b1 = _XcmsSquareRoot((a1 * bi));
cmsTrig.c:576:    a1 = _XcmsSquareRoot(1 + (x * x));
Xcmsint.h:216:#define XCMS_SQRT(x)		_XcmsSquareRoot(x)
Xcmsint.h:223:double _XcmsSquareRoot(double a);

#### _XcmsTekHVCQueryMaxVCRGB ####
HVCGcV.c:140:	if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, hvc_max.spec.TekHVC.H, &hvc_max,
HVCGcVC.c:158:	if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, hvc_max.spec.TekHVC.H, &hvc_max,
HVCMnV.c:138:    if (_XcmsTekHVCQueryMaxVCRGB (&myCCC, max_vc.spec.TekHVC.H, &max_vc,
HVCMxC.c:139:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, hue, &max_vc, &rgb_saved)
HVCMxV.c:138:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, max_vc.spec.TekHVC.H, &max_vc, &rgb_saved)
HVCMxVC.c:73: *		_XcmsTekHVCQueryMaxVCRGB - Compute maximum value/chroma.
HVCMxVC.c:78:_XcmsTekHVCQueryMaxVCRGB(
HVCMxVC.c:233:    return(_XcmsTekHVCQueryMaxVCRGB (&myCCC, hue, pColor_return,
HVCMxVs.c:135:    if (_XcmsTekHVCQueryMaxVCRGB(&myCCC, pColor_in_out->spec.TekHVC.H,
Cv.h:61:_XcmsTekHVCQueryMaxVCRGB(

#### _XcmsTekHVC_CheckModify ####
HVC.c:579: *		_XcmsTekHVC_CheckModify
HVC.c:584:_XcmsTekHVC_CheckModify(
HVCGcV.c:133:	if (!_XcmsTekHVC_CheckModify (pColor)) {
HVCGcV.c:150:	    if (!_XcmsTekHVC_CheckModify (pColor)) {
HVCGcV.c:171:	    if (!_XcmsTekHVC_CheckModify (pColor)) {
HVCGcVC.c:151:	if (!_XcmsTekHVC_CheckModify(pColor)) {
HVCGcVC.c:221:	    if (!_XcmsTekHVC_CheckModify(pColor)) {
HVCGcVC.c:251:	if (!_XcmsTekHVC_CheckModify(pColor)) {
HVCMnV.c:131:    if (!_XcmsTekHVC_CheckModify (&tmp)) {
HVCMnV.c:157:    if (_XcmsTekHVC_CheckModify (&tmp)) {
HVCMxC.c:133:    if (!_XcmsTekHVC_CheckModify(&tmp)) {
HVCMxC.c:150:	if (_XcmsTekHVC_CheckModify (&tmp)) {
HVCMxC.c:189:		if (_XcmsTekHVC_CheckModify (&tmp)) {
HVCMxC.c:214:		if (_XcmsTekHVC_CheckModify (&tmp)) {
HVCMxV.c:130:    if (!_XcmsTekHVC_CheckModify (&tmp)) {
HVCMxV.c:218:		if (!_XcmsTekHVC_CheckModify(&tmp)) {
Cv.h:57:_XcmsTekHVC_CheckModify(

#### _XcmsTekHVC_prefix ####
cmsGlobls.c:109:const char	_XcmsTekHVC_prefix[] = "tekhvc";
cmsGlobls.c:122:    { _XcmsTekHVC_prefix, XcmsTekHVCFormat },
HVC.c:134:	_XcmsTekHVC_prefix,	/* prefix */
HVC.c:190:    if (strncmp(spec, _XcmsTekHVC_prefix, n) != 0) {
Cv.h:11:extern const char      _XcmsTekHVC_prefix[];

#### _XcmsUnresolveColor ####
cmsLkCol.c:132:	_XcmsUnresolveColor(ccc, pColor_scrn_return);
XRGB.c:191: *		_XcmsUnresolveColor
XRGB.c:196:_XcmsUnresolveColor(
Cv.h:181:_XcmsUnresolveColor(

#### _Xdebug ####
globals.c:80:ZEROINIT (int, _Xdebug, 0);
OpenDis.c:735:	(void) XSynchronize(dpy, _Xdebug);
XlibInt.c:4190:#undef _Xdebug
XlibInt.c:4191:int _Xdebug = 0;
XlibInt.c:4192:int *_Xdebug_p = &_Xdebug;
Xlib.h:1390:#define _Xdebug (*_Xdebug_p)
Xlib.h:1393:extern int _Xdebug;

#### _Xevent_to_mask ####
ChkMaskEv.c:32:extern long const _Xevent_to_mask[];
ChkMaskEv.c:64:		    (_Xevent_to_mask[qelt->event.type] & mask) &&
ChkWinEv.c:32:extern long const _Xevent_to_mask[];
ChkWinEv.c:65:		    (_Xevent_to_mask[qelt->event.type] & mask) &&
evtomask.c:36:long const _Xevent_to_mask [LASTEvent] = {
FilterEv.c:66:extern long const _Xevent_to_mask[];
FilterEv.c:89:	mask = _Xevent_to_mask[ev->type];
MaskEvent.c:32:extern long const _Xevent_to_mask[];
MaskEvent.c:63:		    (_Xevent_to_mask[qelt->event.type] & mask) &&
WinEvent.c:32:extern long const _Xevent_to_mask[];
WinEvent.c:67:		    (_Xevent_to_mask[qelt->event.type] & mask) &&

#### _Xglobal_lock ####
ConnDis.c:916:    _XLockMutex(_Xglobal_lock);
ConnDis.c:922:    _XUnlockMutex(_Xglobal_lock);
ConnDis.c:946:    _XLockMutex(_Xglobal_lock);
ConnDis.c:963:    _XUnlockMutex(_Xglobal_lock);
ConnDis.c:1390:	    _XLockMutex(_Xglobal_lock);
ConnDis.c:1392:	    _XUnlockMutex(_Xglobal_lock);
ConnDis.c:1424:	_XLockMutex(_Xglobal_lock);
ConnDis.c:1428:	_XUnlockMutex(_Xglobal_lock);
CrGlCur.c:148:    _XLockMutex (_Xglobal_lock); \
CrGlCur.c:161:    _XUnlockMutex (_Xglobal_lock); \
ErrDes.c:174:	_XLockMutex(_Xglobal_lock);
ErrDes.c:180:	_XUnlockMutex(_Xglobal_lock);
ErrHndlr.c:43:    _XLockMutex(_Xglobal_lock);
ErrHndlr.c:55:    _XUnlockMutex(_Xglobal_lock);
ErrHndlr.c:71:    _XLockMutex(_Xglobal_lock);
ErrHndlr.c:83:    _XUnlockMutex(_Xglobal_lock);
locking.c:574:    if (_Xglobal_lock)
locking.c:597:    _Xglobal_lock = &global_lock;
locking.c:598:    xmutex_init(_Xglobal_lock->lock);
locking.c:599:    xmutex_set_name(_Xglobal_lock->lock, "Xlib global");
Quarks.c:144:    _XLockMutex(_Xglobal_lock);
Quarks.c:146:    _XUnlockMutex(_Xglobal_lock);
Quarks.c:251:    _XLockMutex(_Xglobal_lock);
Quarks.c:277:	_XUnlockMutex(_Xglobal_lock);
Quarks.c:285:	_XUnlockMutex(_Xglobal_lock);
Quarks.c:338:    _XUnlockMutex(_Xglobal_lock);
Quarks.c:341:    _XUnlockMutex(_Xglobal_lock);
Quarks.c:381:    _XLockMutex(_Xglobal_lock);
Quarks.c:386:    _XUnlockMutex(_Xglobal_lock);
Quarks.c:394:    _XLockMutex(_Xglobal_lock);
Quarks.c:406:    _XUnlockMutex(_Xglobal_lock);
XlibInt.c:82:LockInfoPtr _Xglobal_lock = NULL;
XlibInt.c:4207:LockInfoPtr *_Xglobal_lock_p = &_Xglobal_lock;
Xlibint.h:307:#define _Xglobal_lock (*_Xglobal_lock_p)
Xlibint.h:332:extern LockInfoPtr _Xglobal_lock;

#### _Xi18n_lock ####
lcWrap.c:71:LockInfoPtr _Xi18n_lock;
lcWrap.c:273:    _XLockMutex(_Xi18n_lock);
lcWrap.c:312:    _XUnlockMutex(_Xi18n_lock);
locking.c:68:extern LockInfoPtr _Xi18n_lock;
locking.c:600:    _Xi18n_lock = &i18n_lock;
locking.c:601:    xmutex_init(_Xi18n_lock->lock);
locking.c:602:    xmutex_set_name(_Xi18n_lock->lock, "Xlib i18n");

#### _XimCbDispatch ####
imCallbk.c:182:_XimCbDispatch(Xim xim,
imDefIm.c:888:    _XimRegisterDispatcher(im, _XimCbDispatch, (XPointer)im);
Ximint.h:859:extern Bool _XimCbDispatch(

#### _XimCheckCreateICValues ####
imDefIc.c:1510:    if (!(_XimCheckCreateICValues(ic->private.proto.ic_resources,
imRm.c:2218:_XimCheckCreateICValues(
Ximint.h:219:extern Bool _XimCheckCreateICValues(

#### _XimCheckDataSize ####
imDefIm.c:67:_XimCheckDataSize(
Ximint.h:674:extern int	_XimCheckDataSize(

#### _XimCheckICMode ####
imRmAttr.c:118:    check = _XimCheckICMode(res, mode);
imRmAttr.c:160:	check = _XimCheckICMode(res, mode);
imRmAttr.c:526:	check = _XimCheckICMode(res, mode);
imRmAttr.c:1064:    check = _XimCheckICMode(res, mode);
imRmAttr.c:1110:	check = _XimCheckICMode(res, mode);
imRm.c:2598: _XimCheckICMode(
imRm.c:2701:	    check = _XimCheckICMode(res, mode);
imRm.c:2895:	    check = _XimCheckICMode(res, mode);
imRm.c:3056:	    check = _XimCheckICMode(res, mode);
Ximint.h:246:extern int _XimCheckICMode(

#### _XimCheckIMMode ####
imRmAttr.c:58:    check = _XimCheckIMMode(res, mode);
imRmAttr.c:92:	check = _XimCheckIMMode(res, mode);
imRmAttr.c:444:	check = _XimCheckIMMode(res, mode);
imRmAttr.c:789:    check = _XimCheckIMMode(res, mode);
imRmAttr.c:827:	check = _XimCheckIMMode(res, mode);
imRm.c:2271:	check = _XimCheckIMMode(res, XIM_SETIMVALUES);
imRm.c:2301:	check = _XimCheckIMMode(res, XIM_GETIMVALUES);
imRm.c:2365: _XimCheckIMMode(
imRm.c:2637:	check = _XimCheckIMMode(res, XIM_SETIMDEFAULTS);
Ximint.h:241:extern int _XimCheckIMMode(

#### _XimCheckIfLocalProcessing ####
imImSw.c:51:    { _XimCheckIfLocalProcessing, _XimLocalOpenIM, _XimLocalIMFree },
imLcIm.c:97:_XimCheckIfLocalProcessing(Xim im)
Ximint.h:331:extern Bool	 _XimCheckIfLocalProcessing(

#### _XimCheckIfThaiProcessing ####
imImSw.c:52:    { _XimCheckIfThaiProcessing,	_XimThaiOpenIM,	 _XimThaiIMFree },
imThaiIm.c:62:_XimCheckIfThaiProcessing(Xim im)
Ximint.h:335:extern Bool	 _XimCheckIfThaiProcessing(

#### _XimCheckLocalInputStyle ####
imLcIc.c:169:    if(_XimCheckLocalInputStyle(ic, (XPointer)&ic_values, values,
imRm.c:2937:_XimCheckLocalInputStyle(
imThaiIc.c:201:    if(_XimCheckLocalInputStyle(ic, (XPointer)&ic_values, values,
Ximint.h:280:extern Bool _XimCheckLocalInputStyle(

#### _XimCommitCallback ####
imDefIm.c:880:				 _XimCommitCallback, (XPointer)im);
imDefLkup.c:734:_XimCommitCallback(
Ximint.h:517:extern Bool	_XimCommitCallback(

#### _XimConnect ####
imDefFlt.c:157:	    if (_XimConnectServer(im)) {
imDefFlt.c:218:	    if (_XimConnectServer(im)) {
imDefIc.c:320:	    if (_XimConnectServer(im)) {
imDefIc.c:697:	    if (_XimConnectServer(im)) {
imDefIc.c:947:	    if (_XimConnectServer(im)) {
imDefIc.c:992:	    if (_XimConnectServer(im)) {
imDefIc.c:1444:	if (!_XimConnectServer(im)) {
imDefIm.c:559:_XimConnection(
imDefIm.c:577:    if(!(_XimConnect(im)))	/* Transport Connect */
imDefIm.c:1282:	    if (!_XimConnectServer(im)) {
imDefIm.c:1444:	    if (!_XimConnectServer(im)) {
imDefIm.c:1934:_XimConnectServer(
imDefIm.c:1943:    if (_XimPreConnect(im) && _XimConnection(im)
imDefIm.c:2029:	if (_XimConnection(im) && _XimOpen(im) && _XimEncodingNegotiation(im)) {
imTransR.c:73:_XimConnect(Xim im)
Ximint.h:814:extern Bool	_XimConnect(
Ximint.h:941:extern Bool _XimConnectServer(

#### _XimDecodeICATTRIBUTE ####
imDefIc.c:414:    decode_name = _XimDecodeICATTRIBUTE(ic, ic->private.proto.ic_resources,
imRmAttr.c:492:_XimDecodeICATTRIBUTE(
imRmAttr.c:548:	        if ((name = _XimDecodeICATTRIBUTE(ic, res_list, res_num,
imRmAttr.c:553:	        if ((name = _XimDecodeICATTRIBUTE(ic, res_list, res_num,
Ximint.h:460:extern char *	_XimDecodeICATTRIBUTE(

#### _XimDecodeIMATTRIBUTE ####
imDefIm.c:1517:    decode_name = _XimDecodeIMATTRIBUTE(im, im->core.im_resources,
imRmAttr.c:419:_XimDecodeIMATTRIBUTE(
Ximint.h:450:extern char *	_XimDecodeIMATTRIBUTE(

#### _XimDecodeLocalICAttr ####
imRmAttr.c:485:    if (!_XimDecodeLocalICAttr(res, (XPointer)&ic_values, arg->value, mode))
imRmAttr.c:1314:	if (!_XimDecodeLocalICAttr(res, top,(XPointer)&value, mode))
imRm.c:2999:_XimDecodeLocalICAttr(
imRm.c:3063:	    if(_XimDecodeLocalICAttr(res, top, p->value, mode) == False) {
Ximint.h:295:extern Bool _XimDecodeLocalICAttr(

#### _XimDecodeLocalIMAttr ####
imRmAttr.c:415:    return _XimDecodeLocalIMAttr(res, (XPointer)&im_values, arg->value);
imRmAttr.c:896:	if (!_XimDecodeLocalIMAttr(res, top, value))
imRm.c:2308:	if(!_XimDecodeLocalIMAttr(res, top, p->value)) {
imRm.c:2989:_XimDecodeLocalIMAttr(
Ximint.h:289:extern Bool _XimDecodeLocalIMAttr(

#### _XimDestroyIMStructureList ####
imDefIm.c:1136:    _XimDestroyIMStructureList(im);
imInt.c:76:_XimDestroyIMStructureList(Xim im)
imLcIm.c:231:    _XimDestroyIMStructureList(im);
Ximint.h:426:extern void	_XimDestroyIMStructureList(

#### _XimDispatchInit ####
imDefIm.c:580:    if(!_XimDispatchInit(im))
imDispch.c:99:_XimDispatchInit(Xim im)
Ximint.h:413:extern Bool	_XimDispatchInit(

#### _XimEncodeICATTRIBUTE ####
imDefIc.c:720:	if ((name = _XimEncodeICATTRIBUTE(ic, ic->private.proto.ic_resources,
imDefIc.c:1482:	if (_XimEncodeICATTRIBUTE(ic, ic->private.proto.ic_resources,
imRmAttr.c:1074:_XimEncodeICATTRIBUTE(
imRmAttr.c:1132:		if ((name = _XimEncodeICATTRIBUTE(ic, res_list, res_num,
imRmAttr.c:1142:		if ((name = _XimEncodeICATTRIBUTE(ic, res_list, res_num,
Ximint.h:592:extern char *	_XimEncodeICATTRIBUTE(

#### _XimEncodeIMATTRIBUTE ####
imDefIm.c:1299:	if ((name = _XimEncodeIMATTRIBUTE(im, im->core.im_resources,
imRmAttr.c:799:_XimEncodeIMATTRIBUTE(
Ximint.h:579:extern char *	_XimEncodeIMATTRIBUTE(

#### _XimEncodeLocalICAttr ####
imRmAttr.c:1070:    return _XimEncodeLocalICAttr(ic, res, top, arg, mode);
imRmAttr.c:1155:    	    if (!(_XimEncodeLocalICAttr(ic, res, top, p, mode)))
imRm.c:2751:_XimEncodeLocalICAttr(
imRm.c:2912:	    if(_XimEncodeLocalICAttr(ic, res, top, p, mode) == False) {
imRm.c:2954:	    if(!_XimEncodeLocalICAttr(ic, res, top, p, 0)) {
Ximint.h:272:extern Bool _XimEncodeLocalICAttr(

#### _XimEncodeLocalIMAttr ####
imRmAttr.c:795:    return _XimEncodeLocalIMAttr(res, top, arg->value);
imRmAttr.c:833:	if (!(_XimEncodeLocalIMAttr(res, top, p->value)))
imRm.c:2278:	if(!_XimEncodeLocalIMAttr(res, top, p->value)) {
imRm.c:2741:_XimEncodeLocalIMAttr(
Ximint.h:266:extern Bool _XimEncodeLocalIMAttr(

#### _XimError ####
imCallbk.c:311:	_XimError(im, ic,
imCallbk.c:384:	_XimError(im, ic,
imCallbk.c:615:	_XimError(im, ic,
imDefIm.c:583:    _XimRegProtoIntrCallback(im, XIM_ERROR, 0, _XimErrorCallback, (XPointer)im);
imDefLkup.c:421:	_XimError(im, 0, XIM_BadAlloc, (INT16)0, (CARD16)0, (char *)NULL);
imDefLkup.c:438:	_XimError(im, 0, XIM_BadAlloc, (INT16)0, (CARD16)0, (char *)NULL);
imDefLkup.c:629:	_XimError(im, ic, XIM_BadAlloc, (INT16)0, (CARD16)0, (char *)NULL);
imDefLkup.c:651:	_XimError(im, ic, XIM_BadAlloc, (INT16)0, (CARD16)0, (char *)NULL);
imDefLkup.c:700:	_XimError(im, ic, XIM_BadAlloc, (INT16)0, (CARD16)0, (char *)NULL);
imDefLkup.c:764:_XimErrorCallback(
imDefLkup.c:793:_XimError(
imTransR.c:243:	_XimError(im, 0, XIM_BadProtocol, (INT16)0, (CARD16)0, (char *)NULL);
imTransR.c:302:    _XimError(im, 0, XIM_BadProtocol, (INT16)0, (CARD16)0, (char *)NULL);
Ximint.h:480:extern Bool	_XimErrorCallback(
Ximint.h:487:extern Bool	_XimError(

#### _XimErrorCallback ####
imDefIm.c:583:    _XimRegProtoIntrCallback(im, XIM_ERROR, 0, _XimErrorCallback, (XPointer)im);
imDefLkup.c:764:_XimErrorCallback(
Ximint.h:480:extern Bool	_XimErrorCallback(

#### _XimExtension ####
imDefIm.c:884:    if(!_XimExtension(im))
imExten.c:416:_XimExtension(
Ximint.h:422:extern Bool	 _XimExtension(

#### _XimFilterWaitEvent ####
imTrans.c:208:    return _XimFilterWaitEvent(im);
imTransR.c:268:_XimFilterWaitEvent(Xim im)
imTrX.c:124:    ret = _XimFilterWaitEvent(im);
Ximint.h:843:extern Bool	_XimFilterWaitEvent(

#### _XimFlush ####
imCallbk.c:89:#define _XimFlushData(im) im->private.proto.flush((im))
imCallbk.c:358:	_XimFlushData(im);
imCallbk.c:409:	_XimFlushData(im);
imCallbk.c:639:	_XimFlushData(im);
imDefIc.c:192:    _XimFlush(im);
imDefIc.c:376:	_XimFlush(im);
imDefIc.c:773:    _XimFlush(im);
imDefIc.c:912:	_XimFlush(im);
imDefIc.c:969:    _XimFlush(im);
imDefIc.c:1014:    _XimFlush(im);
imDefIc.c:1079:    _XimFlush(im);
imDefIc.c:1527:    _XimFlush(im);
imDefIm.c:541:    _XimFlush(im);
imDefIm.c:609:	_XimFlush(im);
imDefIm.c:755:	_XimFlush(im);
imDefIm.c:823:    _XimFlush(im);
imDefIm.c:942:    _XimFlush(im);
imDefIm.c:1343:    _XimFlush(im);
imDefIm.c:1485:	_XimFlush(im);
imDefIm.c:1748:    _XimFlush(im);
imDefIm.c:1873:    _XimFlush(im);
imDefLkup.c:154:    _XimFlush(im);
imDefLkup.c:207:    _XimFlush(im);
imDefLkup.c:292:    _XimFlush(im);
imDefLkup.c:538:    _XimFlush(im);
imDefLkup.c:832:    _XimFlush(im);
imExten.c:262:    _XimFlush(im);
imExten.c:457:    _XimFlush(im);
imExten.c:550:    _XimFlush(im);
imTransR.c:261:_XimFlush(Xim im)
Ximint.h:839:extern void	_XimFlush(

#### _XimForwardEvent ####
imDefFlt.c:182:    if (_XimForwardEvent(ic, (XEvent *)ev,
imDefFlt.c:243:    if (_XimForwardEvent(ic, (XEvent *)ev,
imDefIm.c:878:				 _XimForwardEventCallback, (XPointer)im);
imDefLkup.c:256:_XimForwardEventCore(
imDefLkup.c:330:_XimForwardEvent(
imDefLkup.c:340:    return _XimForwardEventCore(ic, ev, sync);
imDefLkup.c:362:_XimForwardEventRecv(
imDefLkup.c:381:_XimForwardEventCallback(
imDefLkup.c:395:	(void)_XimForwardEventRecv(im, ic, (XPointer)&buf_s[2]);
Ximint.h:510:extern Bool	_XimForwardEventCallback(
Ximint.h:565:extern Bool	_XimForwardEvent(

#### _XimForwardEventCallback ####
imDefIm.c:878:				 _XimForwardEventCallback, (XPointer)im);
imDefLkup.c:381:_XimForwardEventCallback(
Ximint.h:510:extern Bool	_XimForwardEventCallback(

#### _XimFreeCommitInfo ####
imDefIc.c:857:	_XimFreeCommitInfo(ic);
imDefIc.c:1166:    _XimFreeCommitInfo( ic );
imDefIc.c:1224:    _XimFreeCommitInfo( ic );
imDefIc.c:1282:    _XimFreeCommitInfo( ic );
imDefLkup.c:611:_XimFreeCommitInfo(
Ximint.h:810:extern void	_XimFreeCommitInfo(

#### _XimFreeProtoIntrCallback ####
imDefIm.c:989:	_XimFreeProtoIntrCallback(im);
imDispch.c:64:_XimFreeProtoIntrCallback(Xim im)
Ximint.h:531:extern void	_XimFreeProtoIntrCallback(

#### _XimFreeTransIntrCallback ####
imTrans.c:133:    _XimFreeTransIntrCallback(im);
imTrans.c:168:_XimFreeTransIntrCallback(
XimTrans.h:102:extern void _XimFreeTransIntrCallback(

#### _XimGetAttributeID ####
imDefIm.c:854:    if (!(_XimGetAttributeID(im, &buf_s[1]))) {
imRmAttr.c:1405:_XimGetAttributeID(
Ximint.h:417:extern Bool	 _XimGetAttributeID(

#### _XimGetCharCode ####
imConv.c:81: * This converter is needed for _XimGetCharCode subroutine.
imConv.c:108:_XimGetCharCode (
XKBCvt.c:130:    return _XimGetCharCode(priv, keysym, (unsigned char *) buf, nbytes);
Ximint.h:188:int _XimGetCharCode (

#### _XimGetCurrentICValues ####
imDefIc.c:144:    _XimGetCurrentICValues(ic, &ic_values);
imDefIc.c:254:    _XimGetCurrentICValues(ic, &ic_values);
imDefIc.c:621:    _XimGetCurrentICValues(ic, &ic_values);
imDefIc.c:711:    _XimGetCurrentICValues(ic, &ic_values);
imDefIc.c:1337:    _XimGetCurrentICValues(ic, &ic_values);
imDefIc.c:1474:    _XimGetCurrentICValues(ic, &ic_values);
imLcGIc.c:42:    _XimGetCurrentICValues(ic, &ic_values);
imLcSIc.c:47:    _XimGetCurrentICValues(ic, &ic_values);
imRmAttr.c:484:    _XimGetCurrentICValues(ic, &ic_values);
imRm.c:3098:_XimGetCurrentICValues(Xic ic, XimDefICValues *ic_values)
Ximint.h:312:extern void _XimGetCurrentICValues(

#### _XimGetCurrentIMValues ####
imDefIm.c:1215:    _XimGetCurrentIMValues(im, &im_values);
imDefIm.c:1291:    _XimGetCurrentIMValues(im, &im_values);
imDefIm.c:1387:    _XimGetCurrentIMValues(im, &im_values);
imDefIm.c:1822:    _XimGetCurrentIMValues(im, &im_values);
imDefIm.c:1974:    _XimGetCurrentIMValues(im, &im_values);
imLcIm.c:243:    _XimGetCurrentIMValues(im, &im_values);
imLcIm.c:257:    _XimGetCurrentIMValues(im, &im_values);
imLcIm.c:657:    _XimGetCurrentIMValues(im, &im_values);
imRmAttr.c:414:    _XimGetCurrentIMValues(im, &im_values);
imRm.c:3072:_XimGetCurrentIMValues(Xim im, XimDefIMValues *im_values)
imThaiIm.c:99:    _XimGetCurrentIMValues(im, &im_values);
Ximint.h:302:extern void _XimGetCurrentIMValues(

#### _XimGetICValueData ####
imDefIc.c:255:    return  _XimGetICValueData(ic, (XPointer)&ic_values,
imLcGIc.c:43:    return(_XimGetICValueData(ic, (XPointer)&ic_values,
imRm.c:3023:_XimGetICValueData(Xic ic, XPointer top, XIMResourceList res_list,
imRm.c:3042:	    if((name = _XimGetICValueData(ic,
imRm.c:3049:	    if((name = _XimGetICValueData(ic,
Ximint.h:389:extern char *	 _XimGetICValueData(

#### _XimGetIMValueData ####
imDefIm.c:1388:    return(_XimGetIMValueData(im, (XPointer)&im_values, arg,
imLcIm.c:244:    return(_XimGetIMValueData(im, (XPointer)&im_values, values,
imRm.c:2286:_XimGetIMValueData(
Ximint.h:371:extern char *	 _XimGetIMValueData(

#### _XimGetLocaleCode ####
imConv.c:84:_XimGetLocaleCode (
XKBCvt.c:200:    cvt_rtrn->KSToMBPriv = _XimGetLocaleCode(encoding_name);
Ximint.h:184:XPointer _XimGetLocaleCode (

#### _XimGetMyEndian ####
imDefIm.c:97:_XimGetMyEndian(void)
imDefIm.c:591:    buf_b[0] = _XimGetMyEndian();
imLcIm.c:354:       sprintf (*res, "%s/%c%d_%03x_%08x_%08x", dir, _XimGetMyEndian(),
imLcIm.c:357:       sprintf (*res, "%s%c%d_%03x_%08x_%08x", dir, _XimGetMyEndian(),
Ximint.h:670:extern char _XimGetMyEndian(

#### _XimGetResourceListRec ####
imRmAttr.c:42:    return  _XimGetResourceListRec(res_list, res_num, XNSeparatorofNestedList);
imRmAttr.c:54:    if (!(res = _XimGetResourceListRec(im->private.proto.im_inner_resources,
imRmAttr.c:86:	if (!(res = _XimGetResourceListRec(res_list, res_num, p->name))) {
imRmAttr.c:114:    if (!(res = _XimGetResourceListRec(ic->private.proto.ic_inner_resources,
imRmAttr.c:153:	if (!(res = _XimGetResourceListRec(res_list, res_num, p->name))) {
imRmAttr.c:410:    if (!(res = _XimGetResourceListRec(im->private.proto.im_inner_resources,
imRmAttr.c:438:	if (!(res = _XimGetResourceListRec(res_list, res_num, p->name))) {
imRmAttr.c:480:    if (!(res = _XimGetResourceListRec(ic->private.proto.ic_inner_resources,
imRmAttr.c:520:	if (!(res = _XimGetResourceListRec(res_list, res_num, p->name))) {
imRmAttr.c:785:    if (!(res = _XimGetResourceListRec(im->private.proto.im_inner_resources,
imRmAttr.c:821:	if (!(res = _XimGetResourceListRec(res_list, res_num, p->name))) {
imRmAttr.c:892:	if (!(res = _XimGetResourceListRecByQuark(res_list,
imRmAttr.c:1060:    if (!(res = _XimGetResourceListRec(ic->private.proto.ic_inner_resources,
imRmAttr.c:1104:	if (!(res = _XimGetResourceListRec(res_list, res_num, p->name))) {
imRmAttr.c:1310:	if (!(res = _XimGetResourceListRecByQuark(res_list,
imRm.c:2202:_XimGetResourceListRecByMode(
imRm.c:2222:    if (!_XimGetResourceListRecByMode(res_list, list_num, XIM_MODE_IC_CREATE)) {
imRm.c:2229:_XimGetResourceListRecByQuark(
imRm.c:2245:_XimGetResourceListRec(
imRm.c:2252:    return _XimGetResourceListRecByQuark(res_list, list_num, quark);
imRm.c:2268:	if(!(res = _XimGetResourceListRec(res_list, list_num, p->name))) {
imRm.c:2298:	if(!(res = _XimGetResourceListRec(res_list, list_num, p->name))) {
imRm.c:2325:	if(!(res = _XimGetResourceListRecByQuark(res_list,
imRm.c:2415:	if(!(res = _XimGetResourceListRecByQuark(res_list,
imRm.c:2632:	if((res = _XimGetResourceListRecByQuark( res_list, list_num,
imRm.c:2696:	    if(!(res = _XimGetResourceListRecByQuark(res_list, list_num,
imRm.c:2876:	if((res = _XimGetResourceListRec(res_list, list_num,
imRm.c:2951:	    if(!(res = _XimGetResourceListRec(res_list, list_num, p->name))) {
imRm.c:3037:	if((res = _XimGetResourceListRec(res_list, list_num,
Ximint.h:224:extern XIMResourceList _XimGetResourceListRec(
Ximint.h:873:extern XIMResourceList _XimGetResourceListRecByQuark(

#### _XimGetResourceListRecByQuark ####
imRmAttr.c:892:	if (!(res = _XimGetResourceListRecByQuark(res_list,
imRmAttr.c:1310:	if (!(res = _XimGetResourceListRecByQuark(res_list,
imRm.c:2229:_XimGetResourceListRecByQuark(
imRm.c:2252:    return _XimGetResourceListRecByQuark(res_list, list_num, quark);
imRm.c:2325:	if(!(res = _XimGetResourceListRecByQuark(res_list,
imRm.c:2415:	if(!(res = _XimGetResourceListRecByQuark(res_list,
imRm.c:2632:	if((res = _XimGetResourceListRecByQuark( res_list, list_num,
imRm.c:2696:	    if(!(res = _XimGetResourceListRecByQuark(res_list, list_num,
Ximint.h:873:extern XIMResourceList _XimGetResourceListRecByQuark(

#### _XimGetWindowEventmask ####
imDefLkup.c:463:_XimGetWindowEventmask(
imDefLkup.c:521:    EVENTMASK	 mask = _XimGetWindowEventmask(ic);
imExten.c:96:    EVENTMASK	 select_mask = _XimGetWindowEventmask(ic);
Ximint.h:777:extern EVENTMASK	_XimGetWindowEventmask(

#### _XimICOfXICID ####
imCallbk.c:193:    Xic ic = _XimICOfXICID(im, icid);
imDefLkup.c:38:_XimICOfXICID(
imDefLkup.c:91:	    ic = _XimICOfXICID(im, icid);
imDefLkup.c:236:     && (ic = _XimICOfXICID(im, icid))) {
imDefLkup.c:394:     && (ic = _XimICOfXICID(im, icid))) {
imDefLkup.c:747:     && (ic = _XimICOfXICID(im, icid))) {
imDefLkup.c:784:	if (!(ic = _XimICOfXICID(im, icid)))
imExten.c:130:     && (ic = _XimICOfXICID(im, icid))) {
imExten.c:181:     && (ic = _XimICOfXICID(im, icid))) {
Ximint.h:781:extern Xic	_XimICOfXICID(

#### _XimImSportRec ####
imImSw.c:50:XimImsportSW _XimImSportRec[] = {
imInt.c:228:	if(_XimImSportRec[i].checkprocessing(im)) {
imInt.c:229:	    if(!(_XimImSportRec[i].im_open(im)))
imInt.c:238:    _XimImSportRec[i].im_free(im);
XimImSw.h:44:extern XimImsportSW _XimImSportRec[];

#### _XimInitialResourceInfo ####
imDefIm.c:2020:    _XimInitialResourceInfo();
imLcIm.c:645:    _XimInitialResourceInfo();
imRm.c:3200:_XimInitialResourceInfo(void)
imThaiIm.c:87:    _XimInitialResourceInfo();
Ximint.h:322:extern void _XimInitialResourceInfo(

#### _XimLcctstombs ####
imLcIm.c:631:    _XimLcctstombs,		/* ctstombs */
imLcLkup.c:341:_XimLcctstombs(XIM xim, char *from, int from_len,
imThaiIm.c:54:    _XimLcctstombs,            /* ctstombs */
Ximint.h:643:extern int	_XimLcctstombs(

#### _XimLcctstoutf8 ####
imLcIm.c:633:    _XimLcctstoutf8		/* ctstoutf8 */
imLcLkup.c:412:_XimLcctstoutf8(XIM xim, char *from, int from_len,
imThaiIm.c:56:    _XimLcctstoutf8            /* ctstoutf8 */
Ximint.h:661:extern int	_XimLcctstoutf8(

#### _XimLcctstowcs ####
imLcIm.c:632:    _XimLcctstowcs,		/* ctstowcs */
imLcLkup.c:349:_XimLcctstowcs(XIM xim, char *from, int from_len,
imThaiIm.c:55:    _XimLcctstowcs,            /* ctstowcs */
Ximint.h:652:extern int	_XimLcctstowcs(

#### _XimLocalCreateIC ####
imLcIc.c:136:_XimLocalCreateIC(
imLcIm.c:630:    _XimLocalCreateIC,          /* create_ic */
Ximint.h:408:extern XIC	 _XimLocalCreateIC(

#### _XimLocalFilter ####
imLcFlt.c:41:_XimLocalFilter(Display *d, Window w, XEvent *ev, XPointer client_data)
imLcIc.c:48:			ic->core.focus_window, _XimLocalFilter, (XPointer)ic);
imLcIc.c:63:			ic->core.focus_window, _XimLocalFilter, (XPointer)ic);
imLcIc.c:89:			_XimLocalFilter, (XPointer)ic);
imRm.c:2791:			KeyPress, KeyRelease, _XimLocalFilter, (XPointer)ic);
imRm.c:2797:			ic->core.focus_window, _XimLocalFilter, (XPointer)ic);
imRm.c:2803:			_XimLocalFilter, (XPointer)ic);
Ximint.h:866:extern Bool _XimLocalFilter(

#### _XimLocalGetICValues ####
imLcGIc.c:37:_XimLocalGetICValues(XIC xic, XIMArg *values)
imLcIc.c:126:    _XimLocalGetICValues,	/* get_values */
imThaiIc.c:141:    _XimLocalGetICValues,	/* get_values */
Ximint.h:888:extern char * _XimLocalGetICValues(

#### _XimLocalGetIMValues ####
imLcIm.c:236:_XimLocalGetIMValues(
imLcIm.c:629:    _XimLocalGetIMValues,       /* get_values */
imThaiIm.c:52:    _XimLocalGetIMValues,      /* get_values */
Ximint.h:403:extern char *	 _XimLocalGetIMValues(

#### _XimLocalIMFree ####
imImSw.c:51:    { _XimCheckIfLocalProcessing, _XimLocalOpenIM, _XimLocalIMFree },
imLcIm.c:149:_XimLocalIMFree(
imLcIm.c:230:    _XimLocalIMFree(im);
imLcIm.c:709:    _XimLocalIMFree(im);
Ximint.h:351:extern void	 _XimLocalIMFree(

#### _XimLocalMbLookupString ####
imLcIc.c:130:    _XimLocalMbLookupString,	/* mb_lookup_string */
imLcLkup.c:47:_XimLocalMbLookupString(XIC xic, XKeyEvent *ev, char *buffer, int bytes,
imThaiIc.c:145:    _XimLocalMbLookupString,	/* mb_lookup_string */
Ximint.h:893:extern int _XimLocalMbLookupString(

#### _XimLocalOpenIM ####
imImSw.c:51:    { _XimCheckIfLocalProcessing, _XimLocalOpenIM, _XimLocalIMFree },
imLcIm.c:637:_XimLocalOpenIM(
Ximint.h:339:extern Bool	 _XimLocalOpenIM(

#### _XimLocalSetICValues ####
imLcIc.c:125:    _XimLocalSetICValues,	/* set_values */
imLcSIc.c:41:_XimLocalSetICValues(XIC xic, XIMArg *values)
imThaiIc.c:140:    _XimLocalSetICValues,	/* set_values */
Ximint.h:883:extern char *_XimLocalSetICValues(

#### _XimLocalSetIMValues ####
imLcIm.c:249:_XimLocalSetIMValues(
imLcIm.c:628:    _XimLocalSetIMValues,       /* set_values */
imThaiIm.c:51:    _XimLocalSetIMValues,      /* set_values */
Ximint.h:398:extern char *	 _XimLocalSetIMValues(

#### _XimLocalUtf8LookupString ####
imLcIc.c:132:    _XimLocalUtf8LookupString	/* utf8_lookup_string */
imLcLkup.c:202:_XimLocalUtf8LookupString(XIC xic, XKeyEvent *ev, char *buffer, int bytes,
imThaiIc.c:147:    _XimLocalUtf8LookupString	/* utf8_lookup_string */
Ximint.h:911:extern int _XimLocalUtf8LookupString(

#### _XimLocalWcLookupString ####
imLcIc.c:131:    _XimLocalWcLookupString,	/* wc_lookup_string */
imLcLkup.c:130:_XimLocalWcLookupString(XIC xic, XKeyEvent *ev, wchar_t *buffer, int wlen,
imThaiIc.c:146:    _XimLocalWcLookupString,	/* wc_lookup_string */
Ximint.h:902:extern int _XimLocalWcLookupString(

#### _XimLookupMBText ####
imConv.c:158:_XimLookupMBText(
imDefLkup.c:1032:	ret = _XimLookupMBText(ic, ev, buffer, bytes, keysym, NULL);
imLcLkup.c:109:	ret = _XimLookupMBText(ic, ev, buffer, bytes, keysym, NULL);
Ximint.h:750:extern int	_XimLookupMBText(

#### _XimLookupUTF8Text ####
imConv.c:301:_XimLookupUTF8Text(
imDefLkup.c:1158:	ret = _XimLookupUTF8Text(ic, ev, buffer, bytes, keysym, NULL);
imLcLkup.c:254:	ret = _XimLookupUTF8Text(ic, ev, buffer, bytes, keysym, NULL);
Ximint.h:768:extern int	_XimLookupUTF8Text(

#### _XimLookupWCText ####
imConv.c:229:_XimLookupWCText(
imDefLkup.c:1095:	ret = _XimLookupWCText(ic, ev, buffer, bytes, keysym, NULL);
imLcLkup.c:181:	ret = _XimLookupWCText(ic, ev, buffer, wlen, keysym, NULL);
Ximint.h:759:extern int	_XimLookupWCText(

#### _XimMakeICAttrIDList ####
imDefIc.c:358:    makeid_name = _XimMakeICAttrIDList(ic, ic->private.proto.ic_resources,
imRmAttr.c:128:_XimMakeICAttrIDList(
imRmAttr.c:173:		if ((name = _XimMakeICAttrIDList(ic, res_list, res_num,
imRmAttr.c:183:		if ((name = _XimMakeICAttrIDList(ic, res_list, res_num,
Ximint.h:440:extern char *	_XimMakeICAttrIDList(

#### _XimMakeIMAttrIDList ####
imDefIm.c:1469:    makeid_name = _XimMakeIMAttrIDList(im, im->core.im_resources,
imRmAttr.c:68:_XimMakeIMAttrIDList(
Ximint.h:430:extern char *	_XimMakeIMAttrIDList(

#### _XimOpenIM ####
imInt.c:197:_XimOpenIM(
imInt.c:256:    lcd->methods->open_im = _XimOpenIM;
XlcPublic.h:230:extern XIM _XimOpenIM(

#### _XimParseStringFile ####
imLcIm.c:611:    _XimParseStringFile(fp, im);
imLcPrs.c:712:_XimParseStringFile(
Ximint.h:326:extern void	 _XimParseStringFile(

#### _XimProcError ####
imDefIc.c:222:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIc.c:402:	    _XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIc.c:799:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIc.c:1107:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIc.c:1557:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIm.c:846:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIm.c:964:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIm.c:1368:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIm.c:1509:	    _XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIm.c:1770:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefIm.c:1899:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefLkup.c:178:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefLkup.c:318:	    _XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefLkup.c:562:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
imDefLkup.c:755:_XimProcError(
imDefLkup.c:787:    _XimProcError(im, ic, (XPointer)&buf_s[3]);
imExten.c:286:	    _XimProcError(im, 0, (XPointer)&buf_s[3]);
imExten.c:480:	_XimProcError(im, 0, (XPointer)&buf_s[3]);
Ximint.h:847:extern void   _XimProcError(

#### _XimProcSyncReply ####
imDefFlt.c:132:	(void)_XimProcSyncReply(im, ic);
imDefLkup.c:189:_XimProcSyncReply(
imDefLkup.c:237:	(void)_XimProcSyncReply(im, ic);
imExten.c:111:    if (!(_XimProcSyncReply(im, ic)))
Ximint.h:555:extern Bool	_XimProcSyncReply(

#### _XimProtoCreateIC ####
imDefIc.c:1386:_XimProtoCreateIC(
imDefIm.c:1533:    _XimProtoCreateIC,          /* create_ic */
Ximint.h:535:extern XIC	 _XimProtoCreateIC(

#### _XimProtoEventToWire ####
imDefLkup.c:248:    if (!(_XimProtoEventToWire(ev, event, False)))
imEvToWire.c:45:_XimProtoEventToWire(
Ximint.h:730:extern Status	_XimProtoEventToWire(

#### _XimProtoIMFree ####
imDefIm.c:976:_XimProtoIMFree(
imDefIm.c:1126:    _XimProtoIMFree(im);
imDefIm.c:2040:    _XimProtoIMFree(im);
imImSw.c:53:    { _XimCheckIfDefault,         _XimProtoOpenIM, _XimProtoIMFree },
Ximint.h:359:extern void	 _XimProtoIMFree(

#### _XimProtoMbLookupString ####
imDefIc.c:1302:    _XimProtoMbLookupString,	/* mb_lookup_string */
imDefLkup.c:992:_XimProtoMbLookupString(
Ximint.h:691:extern int	_XimProtoMbLookupString(

#### _XimProtoOpenIM ####
imDefIm.c:2017:_XimProtoOpenIM(
imImSw.c:53:    { _XimCheckIfDefault,         _XimProtoOpenIM, _XimProtoIMFree },
Ximint.h:347:extern Bool	 _XimProtoOpenIM(

#### _XimProtoUtf8LookupString ####
imDefIc.c:1304:    _XimProtoUtf8LookupString	/* utf8_lookup_string */
imDefLkup.c:1118:_XimProtoUtf8LookupString(
Ximint.h:709:extern int	_XimProtoUtf8LookupString(

#### _XimProtoWcLookupString ####
imDefIc.c:1303:    _XimProtoWcLookupString,	/* wc_lookup_string */
imDefLkup.c:1055:_XimProtoWcLookupString(
Ximint.h:700:extern int	_XimProtoWcLookupString(

#### _XimProtoWireToEvent ####
imDefLkup.c:353:    _XimProtoWireToEvent(ev, xev, False);
imEvToWire.c:422:_XimProtoWireToEvent(
Ximint.h:736:extern Bool	_XimProtoWireToEvent(

#### _XimRead ####
imCallbk.c:87:#define _XimReadData(im,buf,buf_len,len) \
imDefIc.c:197:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIc.c:207:	    ret_code = _XimRead(im, &len, preply, buf_size,
imDefIc.c:379:	ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIc.c:389:		ret_code = _XimRead(im, &len, preply, buf_size,
imDefIc.c:778:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIc.c:785:	ret_code = _XimRead(im, &len, preply, buf_size,
imDefIc.c:914:	ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIc.c:919:	    (void)_XimRead(im, &len, preply, buf_size,
imDefIc.c:1082:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIc.c:1092:    	    ret_code = _XimRead(im, &len, preply, buf_size,
imDefIc.c:1532:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIc.c:1542:	    ret_code = _XimRead(im, &len, preply, buf_size,
imDefIm.c:611:	ret_code = _XimRead(im, &len, reply, buf_size, _XimAllRecv, 0);
imDefIm.c:620:		ret_code = _XimRead(im, &len, preply, buf_size, _XimAllRecv, 0);
imDefIm.c:757:	ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIm.c:763:		ret_code = _XimRead(im, &len, preply, buf_size,
imDefIm.c:825:    ret_code = _XimRead(im, &len, reply, buf_size,
imDefIm.c:835:	    ret_code = _XimRead(im, &len, preply, buf_size,
imDefIm.c:944:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIm.c:954:	    ret_code = _XimRead(im, &len, preply, buf_size, _XimCloseCheck, 0);
imDefIm.c:1347:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIm.c:1357:	    ret_code = _XimRead(im, &len, reply, buf_size,
imDefIm.c:1488:    	ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIm.c:1498:		ret_code = _XimRead(im, &len, preply, buf_size,
imDefIm.c:1751:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIm.c:1761:	    ret_code = _XimRead(im, &len, preply, buf_size,
imDefIm.c:1877:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefIm.c:1887:	    ret_code = _XimRead(im, &len, reply, buf_size,
imDefLkup.c:156:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefLkup.c:166:	    ret_code = _XimRead(im, &len, preply, buf_size,
imDefLkup.c:296:	ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefLkup.c:306:		ret_code = _XimRead(im, &len, preply, buf_size,
imDefLkup.c:540:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imDefLkup.c:550:	    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imExten.c:265:    	ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imExten.c:275:    		ret_code = _XimRead(im, &len, preply, buf_size,
imExten.c:459:    ret_code = _XimRead(im, &len, (XPointer)reply, buf_size,
imExten.c:469:    	    ret_code = _XimRead(im, &len, reply, buf_size,
imLcIm.c:268:_XimReadCachedDefaultTree(
imLcIm.c:423:       _XimReadCachedDefaultTree (fd, name, encoding, size)) {
imTransR.c:102:_XimReadData(
imTransR.c:228:_XimRead(Xim im, INT16 *len, XPointer buf, int buf_size,
imTransR.c:235:	ret_code = _XimReadData(im, &read_len, buf, buf_size);
imTransR.c:278:    ret_code = _XimReadData(im, &read_len, (XPointer)reply, buf_size);
imTransR.c:287:	    ret_code = _XimReadData(im, &read_len, preply, buf_size);
Ximint.h:828:extern Bool	_XimRead(

#### _XimRegProtoIntrCallback ####
imDefIm.c:583:    _XimRegProtoIntrCallback(im, XIM_ERROR, 0, _XimErrorCallback, (XPointer)im);
imDefIm.c:714:    _XimRegProtoIntrCallback(im, XIM_REGISTER_TRIGGERKEYS, 0,
imDefIm.c:875:    _XimRegProtoIntrCallback(im, XIM_SET_EVENT_MASK, 0,
imDefIm.c:877:    _XimRegProtoIntrCallback(im, XIM_FORWARD_EVENT, 0,
imDefIm.c:879:    _XimRegProtoIntrCallback(im, XIM_COMMIT, 0,
imDefIm.c:881:    _XimRegProtoIntrCallback(im, XIM_SYNC, 0,
imDispch.c:40:_XimRegProtoIntrCallback(
imExten.c:495:	_XimRegProtoIntrCallback(im,
imExten.c:501:	_XimRegProtoIntrCallback(im,
Ximint.h:470:extern Bool	_XimRegProtoIntrCallback(

#### _XimRegisterDispatcher ####
imDefIm.c:888:    _XimRegisterDispatcher(im, _XimCbDispatch, (XPointer)im);
imDispch.c:101:    if (_XimRegisterDispatcher(im, _XimTransportIntr, (XPointer)im))
imTransR.c:250:_XimRegisterDispatcher(
Ximint.h:983:_XimRegisterDispatcher(

#### _XimRegisterFilter ####
imDefFlt.c:327:_XimRegisterFilter(
imDefIc.c:232:    _XimRegisterFilter(ic);
imDefIc.c:971:    _XimRegisterFilter(ic);
imDefIc.c:1354:    _XimRegisterFilter(ic);
imDefIc.c:1514:    _XimRegisterFilter(ic);
imRmAttr.c:935:	_XimRegisterFilter(ic);
imRmAttr.c:941:	    _XimRegisterFilter(ic);
Ximint.h:718:extern void	_XimRegisterFilter(

#### _XimRegisterIMInstantiateCallback ####
imInsClbk.c:154:_XimRegisterIMInstantiateCallback(
imInt.c:257:    lcd->methods->register_callback = _XimRegisterIMInstantiateCallback;
Ximint.h:790:extern Bool	_XimRegisterIMInstantiateCallback(

#### _XimRegisterServerFilter ####
imDefFlt.c:380:_XimRegisterServerFilter(
imDefIm.c:1947:	    _XimRegisterServerFilter(im);
imDefIm.c:2030:	    _XimRegisterServerFilter(im);
Ximint.h:540:extern void	_XimRegisterServerFilter(

#### _XimRegisterTriggerKeysCallback ####
imDefIm.c:715:				 _XimRegisterTriggerKeysCallback, (XPointer)im);
imDefLkup.c:449:_XimRegisterTriggerKeysCallback(
Ximint.h:496:extern Bool	_XimRegisterTriggerKeysCallback(

#### _XimReregisterFilter ####
imDefFlt.c:346:_XimReregisterFilter(
imDefLkup.c:72:    _XimReregisterFilter(ic);
imExten.c:109:    _XimReregisterFilter(ic);
Ximint.h:726:extern void	_XimReregisterFilter(

#### _XimResetIMInstantiateCallback ####
imDefIm.c:1123:    _XimResetIMInstantiateCallback(im);
imInsClbk.c:271:_XimResetIMInstantiateCallback(Xim xim)
imInt.c:114:	_XimResetIMInstantiateCallback( im );
imInt.c:143:	_XimResetIMInstantiateCallback( im );
Ximint.h:786:extern void	_XimResetIMInstantiateCallback(

#### _XimRespSyncReply ####
imDefLkup.c:212:_XimRespSyncReply(
imDefLkup.c:373:    (void)_XimRespSyncReply(ic, buf_s[0]);
imDefLkup.c:704:    (void)_XimRespSyncReply(ic, flag);
imExten.c:161:    _XimRespSyncReply(ic, buf_s[0]);
Ximint.h:991:_XimRespSyncReply(

#### _XimServerDestroy ####
imDefFlt.c:374:	_XimServerDestroy(im);
imInt.c:90:_XimServerDestroy(Xim im_2_destroy)
Ximint.h:575:extern void	_XimServerDestroy(

#### _XimSetCurrentICValues ####
imDefIc.c:626:    _XimSetCurrentICValues(ic, &ic_values);
imDefIc.c:747:    _XimSetCurrentICValues(ic, &ic_values);
imDefIc.c:1347:    _XimSetCurrentICValues(ic, &ic_values);
imDefIc.c:1353:    _XimSetCurrentICValues(ic, &ic_values);
imDefIc.c:1508:    _XimSetCurrentICValues(ic, &ic_values);
imLcIc.c:183:    _XimSetCurrentICValues(ic, &ic_values);
imLcIc.c:188:    _XimSetCurrentICValues(ic, &ic_values);
imLcSIc.c:52:    _XimSetCurrentICValues(ic, &ic_values);
imRmAttr.c:487:    _XimSetCurrentICValues(ic, &ic_values);
imRm.c:3121:_XimSetCurrentICValues(
imThaiIc.c:219:    _XimSetCurrentICValues(ic, &ic_values);
Ximint.h:317:extern void _XimSetCurrentICValues(

#### _XimSetCurrentIMValues ####
imDefIm.c:1218:    _XimSetCurrentIMValues(im, &im_values);
imDefIm.c:1327:    _XimSetCurrentIMValues(im, &im_values);
imDefIm.c:1979:    _XimSetCurrentIMValues(im, &im_values);
imLcIm.c:260:    _XimSetCurrentIMValues(im, &im_values);
imLcIm.c:662:    _XimSetCurrentIMValues(im, &im_values);
imRm.c:3086:_XimSetCurrentIMValues(Xim im, XimDefIMValues *im_values)
imThaiIm.c:104:    _XimSetCurrentIMValues(im, &im_values);
Ximint.h:307:extern void _XimSetCurrentIMValues(

#### _XimSetEventMaskCallback ####
imDefIm.c:876:				 _XimSetEventMaskCallback, (XPointer)im);
imDefLkup.c:77:_XimSetEventMaskCallback(
Ximint.h:503:extern Bool	_XimSetEventMaskCallback(

#### _XimSetHeader ####
imCallbk.c:340:	_XimSetHeader((XPointer)buf, XIM_STR_CONVERSION_REPLY, 0, &buf_len);
imCallbk.c:341:	buf_len -= XIM_HEADER_SIZE; /* added by _XimSetHeader (HACK) */
imCallbk.c:400:	_XimSetHeader((XPointer)buf, XIM_PREEDIT_START_REPLY, 0, &buf_len);
imCallbk.c:630:	_XimSetHeader((XPointer)buf, XIM_PREEDIT_CARET_REPLY, 0, &len);
imDefIc.c:186:    _XimSetHeader((XPointer)buf, XIM_CREATE_IC, 0, &len);
imDefIc.c:371:	_XimSetHeader((XPointer)buf, XIM_GET_IC_VALUES, 0, &len);
imDefIc.c:767:    _XimSetHeader((XPointer)buf, XIM_SET_IC_VALUES, 0, &len);
imDefIc.c:910:	_XimSetHeader((XPointer)buf, XIM_DESTROY_IC, 0, &len);
imDefIc.c:967:    _XimSetHeader((XPointer)buf, XIM_SET_IC_FOCUS, 0, &len);
imDefIc.c:1012:    _XimSetHeader((XPointer)buf, XIM_UNSET_IC_FOCUS, 0, &len);
imDefIc.c:1076:    _XimSetHeader((XPointer)buf, XIM_RESET_IC, 0, &len);
imDefIc.c:1521:    _XimSetHeader((XPointer)buf, XIM_CREATE_IC, 0, &len);
imDefIm.c:79:_XimSetHeader(
imDefIm.c:539:    _XimSetHeader((XPointer)buf, XIM_AUTH_NG, 0, &len);
imDefIm.c:606:	_XimSetHeader((XPointer)buf, major_opcode, 0, &len);
imDefIm.c:752:	_XimSetHeader((XPointer)buf, XIM_DISCONNECT, 0, &len);
imDefIm.c:820:    _XimSetHeader((XPointer)buf, XIM_OPEN, 0, &len);
imDefIm.c:939:    _XimSetHeader((XPointer)buf, XIM_CLOSE, 0, &len);
imDefIm.c:1337:    _XimSetHeader((XPointer)buf, XIM_SET_IM_VALUES, 0, &len);
imDefIm.c:1480:	_XimSetHeader((XPointer)buf, XIM_GET_IM_VALUES, 0, &len);
imDefIm.c:1743:    _XimSetHeader((XPointer)buf, XIM_ENCODING_NEGOTIATION, 0, &len);
imDefIm.c:1867:    _XimSetHeader((XPointer)buf, XIM_SET_IM_VALUES, 0, &len);
imDefLkup.c:151:    _XimSetHeader((XPointer)buf, XIM_SYNC, 0, &len);
imDefLkup.c:204:    _XimSetHeader((XPointer)buf, XIM_SYNC_REPLY, 0, &len);
imDefLkup.c:289:    _XimSetHeader((XPointer)buf, XIM_FORWARD_EVENT, 0, &len);
imDefLkup.c:535:    _XimSetHeader((XPointer)buf, XIM_TRIGGER_NOTIFY, 0, &len);
imDefLkup.c:829:    _XimSetHeader((XPointer)buf, XIM_ERROR, 0, &len);
imExten.c:257:    _XimSetHeader((XPointer)buf,
imExten.c:451:    _XimSetHeader((XPointer)buf, XIM_QUERY_EXTENSION, 0, &len);
imExten.c:546:    _XimSetHeader((XPointer)buf, extensions[idx].major_opcode,
Ximint.h:679:extern void	_XimSetHeader(

#### _XimSetICDefaults ####
imDefIc.c:1348:    if (!_XimSetICDefaults(ic, (XPointer)&ic_values,
imLcIc.c:184:    if(_XimSetICDefaults(ic, (XPointer)&ic_values,
imRm.c:2655:_XimSetICDefaults(
imRm.c:2686:	    if(!_XimSetICDefaults(ic, (XPointer)((char *)top + info[i].offset),
imRm.c:2691:	    if(!_XimSetICDefaults(ic, (XPointer)((char *)top + info[i].offset),
imThaiIc.c:214:    if(_XimSetICDefaults(ic, (XPointer)&ic_values,
Ximint.h:258:extern Bool _XimSetICDefaults(

#### _XimSetICMode ####
imDefIc.c:138:    _XimSetICMode(ic->private.proto.ic_resources,
imDefIc.c:141:    _XimSetICMode(ic->private.proto.ic_inner_resources,
imDefIc.c:1341:    _XimSetICMode(res, num, input_style);
imDefIc.c:1377:    _XimSetICMode(res, num, input_style);
imDefIc.c:1468:    _XimSetICMode(ic->private.proto.ic_resources,
imDefIc.c:1471:    _XimSetICMode(ic->private.proto.ic_inner_resources,
imLcIc.c:174:    _XimSetICMode(res, num, ic_values.input_style);
imRm.c:2384:_XimSetICMode(XIMResourceList res_list, unsigned int list_num, XIMStyle style)
imThaiIc.c:206:    _XimSetICMode(res, num, ic_values.input_style);
Ximint.h:235:extern void _XimSetICMode(

#### _XimSetICResourceList ####
imDefIm.c:1967:    if(!_XimSetICResourceList(&im->core.ic_resources,
imDefIm.c:1999:    if(!_XimSetICResourceList(&im->core.ic_resources,
imLcIm.c:650:    if(_XimSetICResourceList(&im->core.ic_resources,
imRm.c:2175:_XimSetICResourceList(
imThaiIm.c:92:    if(_XimSetICResourceList(&im->core.ic_resources,
Ximint.h:204:extern Bool _XimSetICResourceList(

#### _XimSetICValueData ####
imDefIc.c:622:    name = _XimSetICValueData(ic, (XPointer)&ic_values,
imDefIc.c:1343:    if (_XimSetICValueData(ic, (XPointer)&ic_values, res, num,
imLcIc.c:176:    if(_XimSetICValueData(ic, (XPointer)&ic_values,
imLcSIc.c:48:    name = _XimSetICValueData(ic, (XPointer)&ic_values,
imRm.c:2856:_XimSetICValueData(
imRm.c:2881:	    if(((name = _XimSetICValueData(ic,
imRm.c:2888:	    if(((name = _XimSetICValueData(ic,
imThaiIc.c:208:    if(_XimSetICValueData(ic, (XPointer)&ic_values,
Ximint.h:379:extern char *	 _XimSetICValueData(

#### _XimSetIMMode ####
imDefIm.c:870:    _XimSetIMMode(im->core.im_resources, im->core.im_num_resources);
imDefIm.c:871:    _XimSetIMMode(im->private.proto.im_inner_resources,
imDefIm.c:1972:    _XimSetIMMode(im->core.im_resources, im->core.im_num_resources);
imDefIm.c:2004:    _XimSetIMMode(im->core.im_resources, im->core.im_num_resources);
imLcIm.c:655:    _XimSetIMMode(im->core.im_resources, im->core.im_num_resources);
imRm.c:2316:_XimSetIMMode(
imThaiIm.c:97:    _XimSetIMMode(im->core.im_resources, im->core.im_num_resources);
Ximint.h:230:extern void _XimSetIMMode(

#### _XimSetIMResourceList ####
imDefIm.c:1963:    if(!_XimSetIMResourceList(&im->core.im_resources,
imDefIm.c:1995:    if(!_XimSetIMResourceList(&im->core.im_resources,
imLcIm.c:646:    if(_XimSetIMResourceList(&im->core.im_resources,
imRm.c:2166:_XimSetIMResourceList(
imThaiIm.c:88:    if(_XimSetIMResourceList(&im->core.im_resources,
Ximint.h:199:extern Bool _XimSetIMResourceList(

#### _XimSetIMValueData ####
imDefIm.c:1216:    name = _XimSetIMValueData(im, (XPointer)&im_values, values,
imLcIm.c:258:    name = _XimSetIMValueData(im, (XPointer)&im_values, values,
imRm.c:2256:_XimSetIMValueData(
Ximint.h:363:extern char *	 _XimSetIMValueData(

#### _XimSetInnerICResourceList ####
imDefIm.c:866:    if (!(_XimSetInnerICResourceList(&(im->private.proto.ic_inner_resources),
imRm.c:2193:_XimSetInnerICResourceList(
Ximint.h:214:extern Bool _XimSetInnerICResourceList(

#### _XimSetInnerIMResourceList ####
imDefIm.c:862:    if (!(_XimSetInnerIMResourceList(&(im->private.proto.im_inner_resources),
imRm.c:2184:_XimSetInnerIMResourceList(
Ximint.h:209:extern Bool _XimSetInnerIMResourceList(

#### _XimSetLocalIMDefaults ####
imDefIm.c:1975:    if(!_XimSetLocalIMDefaults(im, (XPointer)&im_values,
imLcIm.c:658:    if(_XimSetLocalIMDefaults(im, (XPointer)&im_values,
imRm.c:2616:_XimSetLocalIMDefaults(
imThaiIm.c:100:    if(_XimSetLocalIMDefaults(im, (XPointer)&im_values,
Ximint.h:251:extern Bool _XimSetLocalIMDefaults(

#### _XimShutdown ####
imDefIm.c:773:    if (!(_XimShutdown(im)))	/* Transport shutdown */
imDefIm.c:2033:	_XimShutdown(im);
imTransR.c:79:_XimShutdown(Xim im)
Ximint.h:818:extern Bool	_XimShutdown(

#### _XimSync ####
imDefIm.c:882:				 _XimSyncCallback, (XPointer)im);
imDefLkup.c:102:_XimSyncCheck(
imDefLkup.c:131:_XimSync(
imDefLkup.c:157:					_XimSyncCheck, (XPointer)ic);
imDefLkup.c:167:					_XimSyncCheck, (XPointer)ic);
imDefLkup.c:223:_XimSyncCallback(
imDefLkup.c:297:					_XimSyncCheck, (XPointer)ic);
imDefLkup.c:307:					_XimSyncCheck, (XPointer)ic);
Ximint.h:524:extern Bool	_XimSyncCallback(
Ximint.h:686:extern Bool	_XimSync(

#### _XimSyncCallback ####
imDefIm.c:882:				 _XimSyncCallback, (XPointer)im);
imDefLkup.c:223:_XimSyncCallback(
Ximint.h:524:extern Bool	_XimSyncCallback(

#### _XimThaiCloseIM ####
imThaiIm.c:50:    _XimThaiCloseIM,           /* close */
imThaiIm.c:219:_XimThaiCloseIM(XIM xim)
Ximint.h:932:extern Status _XimThaiCloseIM(

#### _XimThaiCreateIC ####
imThaiIc.c:151:_XimThaiCreateIC(
imThaiIm.c:53:    _XimThaiCreateIC,          /* create_ic */
Ximint.h:927:extern XIC _XimThaiCreateIC(

#### _XimThaiFilter ####
imThaiFlt.c:1214: * Helper functions for _XimThaiFilter()
imThaiFlt.c:1288:_XimThaiFilter(Display *d, Window w, XEvent *ev, XPointer client_data)
imThaiIc.c:54:			_XimThaiFilter, (XPointer)ic);
imThaiIc.c:103:			KeyPress, KeyPress, _XimThaiFilter, (XPointer)ic);
Ximint.h:920:extern Bool _XimThaiFilter(

#### _XimThaiIMFree ####
imImSw.c:52:    { _XimCheckIfThaiProcessing,	_XimThaiOpenIM,	 _XimThaiIMFree },
imThaiIm.c:144:    _XimThaiIMFree(im);
imThaiIm.c:149:_XimThaiIMFree(Xim im)
imThaiIm.c:233:    _XimThaiIMFree(im);
Ximint.h:355:extern void	 _XimThaiIMFree(

#### _XimThaiOpenIM ####
imImSw.c:52:    { _XimCheckIfThaiProcessing,	_XimThaiOpenIM,	 _XimThaiIMFree },
imThaiIm.c:80:_XimThaiOpenIM(Xim im)
Ximint.h:343:extern Bool	 _XimThaiOpenIM(

#### _XimTransCallDispatcher ####
imTrans.c:184:_XimTransCallDispatcher(Xim im, INT16 len, XPointer data)
imTrans.c:318:    im->private.proto.call_dispatcher = _XimTransCallDispatcher;
XimTrans.h:96:extern Bool _XimTransCallDispatcher(

#### _XimTransConf ####
imTrans.c:294:_XimTransConf(
imTransR.c:64:    { "tcp",        _XimTransConf }, /* use X transport lib */
imTransR.c:67:    { "local",      _XimTransConf }, /* use X transport lib */
XimTrInt.h:78:extern Bool	_XimTransConf(

#### _XimTransFilterWaitEvent ####
imTrans.c:117:				_XimTransFilterWaitEvent, (XPointer)im);
imTrans.c:136:				_XimTransFilterWaitEvent, (XPointer)im);
imTrans.c:198:_XimTransFilterWaitEvent(
XimTrans.h:106:extern Bool _XimTransFilterWaitEvent(

#### _XimTransFlush ####
imTrans.c:285:_XimTransFlush(
imTrans.c:316:    im->private.proto.flush    = _XimTransFlush;
XimTrans.h:132:extern void _XimTransFlush(

#### _XimTransInternalConnection ####
imTrans.c:120:			(_XInternalConnectionProc)_XimTransInternalConnection,
imTrans.c:213:_XimTransInternalConnection(
XimTrans.h:113:extern void _XimTransInternalConnection(

#### _XimTransRead ####
imTrans.c:264:_XimTransRead(
imTrans.c:315:    im->private.proto.read     = _XimTransRead;
XimTrans.h:125:extern Bool _XimTransRead(

#### _XimTransRegisterDispatcher ####
imTrans.c:146:_XimTransRegisterDispatcher(
imTrans.c:317:    im->private.proto.register_dispatcher = _XimTransRegisterDispatcher;
XimTrans.h:79:extern Bool _XimTransRegisterDispatcher(

#### _XimTransWrite ####
imTrans.c:247:_XimTransWrite(Xim im, INT16 len, XPointer data)
imTrans.c:314:    im->private.proto.write    = _XimTransWrite;
XimTrans.h:119:extern Bool _XimTransWrite(

#### _XimTransportRec ####
imDefIm.c:368:    for(i = 0; _XimTransportRec[i].transportname ; i++) {
imDefIm.c:370:				_XimTransportRec[i].transportname,
imDefIm.c:371:				strlen(_XimTransportRec[i].transportname),
imDefIm.c:373:	    if( _XimTransportRec[i].config(im, trans_addr) ) {
imTransR.c:60:TransportSW _XimTransportRec[] = {
XimTrInt.h:65:extern TransportSW _XimTransportRec[];

#### _XimTriggerNotify ####
imDefFlt.c:99:	    (void)_XimTriggerNotify(im, ic, 0, (CARD32)idx); /* Trigger on */
imDefFlt.c:118:	    _XimTriggerNotify(im, ic, 1, (CARD32)idx); /* Trigger off */
imDefLkup.c:476:_XimTriggerNotifyCheck(
imDefLkup.c:505:_XimTriggerNotify(
imDefLkup.c:541:				_XimTriggerNotifyCheck, (XPointer)ic);
imDefLkup.c:551:				_XimTriggerNotifyCheck, (XPointer)ic);
Ximint.h:548:extern Bool	_XimTriggerNotify(

#### _XimUnRegisterIMInstantiateCallback ####
imInsClbk.c:217:_XimUnRegisterIMInstantiateCallback(
imInt.c:258:    lcd->methods->unregister_callback = _XimUnRegisterIMInstantiateCallback;
Ximint.h:800:extern Bool	_XimUnRegisterIMInstantiateCallback(

#### _XimUnregisterFilter ####
imDefFlt.c:337:_XimUnregisterFilter(
imDefIc.c:925:    _XimUnregisterFilter(ic);
imDefIc.c:1016:    _XimUnregisterFilter(ic);
imDefIc.c:1570:    _XimUnregisterFilter(ic);
imRmAttr.c:939:	    _XimUnregisterFilter(ic);
Ximint.h:722:extern void	_XimUnregisterFilter(

#### _XimUnregisterServerFilter ####
imDefFlt.c:399:_XimUnregisterServerFilter(
imDefIm.c:1122:    _XimUnregisterServerFilter(im);
Ximint.h:544:extern void	_XimUnregisterServerFilter(

#### _XimWrite ####
imCallbk.c:85:#define _XimWriteData(im,len,data) \
imCallbk.c:355:	if (!(_XimWriteData(im, buf_len, buf))) {
imCallbk.c:406:	if (!(_XimWriteData(im, buf_len, buf))) {
imCallbk.c:636:	if (!(_XimWriteData(im, len, buf))) {
imDefIc.c:187:    if (!(_XimWrite(im, len, (XPointer)buf))) {
imDefIc.c:372:	if (!(_XimWrite(im, len, (XPointer)buf))) {
imDefIc.c:768:    if (!(_XimWrite(im, len, (XPointer)buf))) {
imDefIc.c:911:	(void)_XimWrite(im, len, (XPointer)buf);
imDefIc.c:968:    (void)_XimWrite(im, len, (XPointer)buf);
imDefIc.c:1013:    (void)_XimWrite(im, len, (XPointer)buf);
imDefIc.c:1077:    if (!(_XimWrite(im, len, (XPointer)buf)))
imDefIc.c:1522:    if (!(_XimWrite(im, len, (XPointer)buf))) {
imDefIm.c:540:    (void)_XimWrite(im, len, (XPointer)buf);
imDefIm.c:607:	if (!(_XimWrite(im, len, (XPointer)buf)))
imDefIm.c:753:	if (!(_XimWrite(im, len, (XPointer)buf)))
imDefIm.c:821:    if (!(_XimWrite(im, len, (XPointer)buf)))
imDefIm.c:940:    if (!(_XimWrite(im, len, (XPointer)buf)))
imDefIm.c:1338:    if (!(_XimWrite(im, len, (XPointer)buf))) {
imDefIm.c:1481:	if (!(_XimWrite(im, len, (XPointer)buf))) {
imDefIm.c:1744:    if (!(_XimWrite(im, len, (XPointer)buf))) {
imDefIm.c:1868:    if (!(_XimWrite(im, len, (XPointer)buf))) {
imDefLkup.c:152:    if (!(_XimWrite(im, len, (XPointer)buf)))
imDefLkup.c:205:    if (!(_XimWrite(im, len, (XPointer)buf)))
imDefLkup.c:290:    if (!(_XimWrite(im, len, (XPointer)buf)))
imDefLkup.c:536:    if (!(_XimWrite(im, len, (XPointer)buf)))
imDefLkup.c:830:    if (!(_XimWrite(im, len, (XPointer)buf)))
imExten.c:260:    if (!(_XimWrite(im, len, (XPointer)buf)))
imExten.c:452:    if (!(_XimWrite(im, len, (XPointer)buf))) {
imExten.c:548:    if (!(_XimWrite(im, len, (XPointer)buf)))
imLcIm.c:436:_XimWriteCachedDefaultTree(
imLcIm.c:617:	_XimWriteCachedDefaultTree (intname, encoding, cachename, im);
imTransR.c:85:_XimWrite(Xim im, INT16 len, XPointer data)
Ximint.h:822:extern Bool	_XimWrite(

#### _XimXConf ####
imTransR.c:61:    { "X",          _XimXConf },  /* 1st entry must be X.
imTrX.c:495:_XimXConf(Xim im, char *address)
XimTrInt.h:71:extern Bool	_XimXConf(

#### _XimXTransBytesReadable ####

#### _XimXTransClose ####
imTrans.c:94:	    _XimXTransClose (spec->trans_conn);
imTrans.c:132:    (void)_XimXTransClose(spec->trans_conn);

#### _XimXTransCloseForCloning ####

#### _XimXTransConnect ####
imTrans.c:91:	if ((connect_stat = _XimXTransConnect (

#### _XimXTransDisconnect ####
imTrans.c:131:    _XimXTransDisconnect(spec->trans_conn);

#### _XimXTransFreeConnInfo ####

#### _XimXTransGetConnectionNumber ####
imTrans.c:109:    spec->fd = _XimXTransGetConnectionNumber (spec->trans_conn);

#### _XimXTransGetHostname ####

#### _XimXTransGetPeerAddr ####

#### _XimXTransIsLocal ####

#### _XimXTransOpenCOTSClient ####
imTrans.c:85:	if ((spec->trans_conn = _XimXTransOpenCOTSClient (

#### _XimXTransRead ####
imTrans.c:277:    if ((len = _XimXTransRead(spec->trans_conn, recv_buf, buf_len)) <= 0)

#### _XimXTransReadv ####

#### _XimXTransSetOption ####

#### _XimXTransSocketINET6Funcs ####

#### _XimXTransSocketINETFuncs ####

#### _XimXTransSocketLocalFuncs ####

#### _XimXTransSocketTCPFuncs ####

#### _XimXTransSocketUNIXFuncs ####

#### _XimXTransWrite ####
imTrans.c:254:	if ((nbyte = _XimXTransWrite(spec->trans_conn, buf, len)) <= 0)

#### _XimXTransWritev ####

#### _Ximctstombs ####
imDefIm.c:1534:    _Ximctstombs,		/* ctstombs */
imDefLkup.c:903:_Ximctstombs(XIM xim, char *from, int from_len,
Ximint.h:616:extern int	_Ximctstombs(

#### _Ximctstoutf8 ####
imDefIm.c:1536:    _Ximctstoutf8		/* ctstoutf8 */
imDefLkup.c:979:_Ximctstoutf8(
Ximint.h:634:extern int	_Ximctstoutf8(

#### _Ximctstowcs ####
imDefIm.c:1535:    _Ximctstowcs,		/* ctstowcs */
imDefLkup.c:911:_Ximctstowcs(
Ximint.h:625:extern int	_Ximctstowcs(

#### _XkbCopyFromReadBuffer ####
XKBExtDev.c:137:                    if (!_XkbCopyFromReadBuffer(buf,
XKBExtDev.c:209:        if (!_XkbCopyFromReadBuffer(&buf, (char *) act, size))
XKBGeom.c:294:        if (!_XkbCopyFromReadBuffer(buf, (char *) geom->key_aliases,
XKBGetMap.c:266:        if (!_XkbCopyFromReadBuffer(buf, (char *) numDesc, nKeyActs)) {
XKBGetMap.c:295:                if (!_XkbCopyFromReadBuffer(buf, (char *) newActs,
XKBNames.c:188:            if (!_XkbCopyFromReadBuffer(&buf,
XKBNames.c:200:        if (!_XkbCopyFromReadBuffer(&buf, (char *) names->key_aliases,
XKBRdBuf.c:67:_XkbCopyFromReadBuffer(XkbReadBufferPtr from, char *to, int size)
XKBlibint.h:203:extern int _XkbCopyFromReadBuffer(
XKBlibint.h:231:#define _XkbReadBufferCopy32(f,t,s) _XkbCopyFromReadBuffer(f, (char *)t, (s)*4)

#### _XkbFreeReadBuffer ####
XKBCompat.c:98:    i = _XkbFreeReadBuffer(&buf);
XKBCompat.c:105:    _XkbFreeReadBuffer(&buf);
XKBExtDev.c:221:    tmp = _XkbFreeReadBuffer(&buf);
XKBExtDev.c:228:    _XkbFreeReadBuffer(&buf);
XKBGeom.c:647:            left = _XkbFreeReadBuffer(&buf);
XKBGetMap.c:545:            left = _XkbFreeReadBuffer(&buf);
XKBleds.c:94:                        _XkbFreeReadBuffer(&buf);
XKBleds.c:109:        left = _XkbFreeReadBuffer(&buf);
XKBList.c:200:            _XkbFreeReadBuffer(&buf);
XKBList.c:221:        left = _XkbFreeReadBuffer(&buf);
XKBNames.c:228:    len = _XkbFreeReadBuffer(&buf);
XKBNames.c:234:    _XkbFreeReadBuffer(&buf);
XKBRdBuf.c:164:_XkbFreeReadBuffer(XkbReadBufferPtr buf)
XKBlibint.h:277:extern int _XkbFreeReadBuffer(

#### _XkbGetAtomNameFunc ####
XKB.c:36:XkbGetAtomNameFunc      _XkbGetAtomNameFunc = XGetAtomName;
XKB.c:773:    _XkbGetAtomNameFunc = (getName ? getName : XGetAtomName);
XKBlibint.h:64:extern  XkbGetAtomNameFunc      _XkbGetAtomNameFunc;

#### _XkbGetCharset ####
Font.c:667:    /* next three lines stolen from _XkbGetCharset() */
XKBBind.c:605:        _XkbGetConverters(_XkbGetCharset(), &xkb->cvt);
XKBCvt.c:210: * The function _XkbGetCharset seems to be missnamed as what it seems to
XKBCvt.c:231:_XkbGetCharset(void)
XKBCvt.c:334:_XkbGetCharset(void)
XKBlibint.h:287:extern char *_XkbGetCharset(

#### _XkbGetConverters ####
XKBBind.c:605:        _XkbGetConverters(_XkbGetCharset(), &xkb->cvt);
XKBBind.c:606:        _XkbGetConverters("ISO8859-1", &xkb->latin1cvt);
XKBCvt.c:194:_XkbGetConverters(const char *encoding_name, XkbConverters * cvt_rtrn)
XKBlibint.h:291:extern int       _XkbGetConverters(

#### _XkbGetReadBufferCountedString ####
XKBExtDev.c:199:    if (!_XkbGetReadBufferCountedString(&buf, &devi->name))
XKBGeom.c:269:            ok = _XkbGetReadBufferCountedString(buf, &name) && ok;
XKBGeom.c:270:            ok = _XkbGetReadBufferCountedString(buf, &value) && ok;
XKBGeom.c:320:            if (!_XkbGetReadBufferCountedString(buf, &spec))
XKBGeom.c:429:        if (!_XkbGetReadBufferCountedString(buf, &doodad->text.text))
XKBGeom.c:431:        if (!_XkbGetReadBufferCountedString(buf, &doodad->text.font))
XKBGeom.c:442:        if (!_XkbGetReadBufferCountedString(buf, &doodad->logo.logo_name))
XKBGeom.c:633:            if (!_XkbGetReadBufferCountedString(&buf, &geom->label_font))
XKBRdBuf.c:180:_XkbGetReadBufferCountedString(XkbReadBufferPtr buf, char **rtrn)
XKBlibint.h:282:_XkbGetReadBufferCountedString(

#### _XkbGetReadBufferPtr ####
XKBCompat.c:60:        wire = (xkbSymInterpretWireDesc *) _XkbGetReadBufferPtr(&buf,
XKBCompat.c:86:            _XkbGetReadBufferPtr(&buf, nGroups * SIZEOF(xkbModsWireDesc));
XKBGeom.c:352:            _XkbGetReadBufferPtr(buf, SIZEOF(xkbShapeWireDesc));
XKBGeom.c:365:                _XkbGetReadBufferPtr(buf, SIZEOF(xkbOutlineWireDesc));
XKBGeom.c:376:                    _XkbGetReadBufferPtr(buf, SIZEOF(xkbPointWireDesc));
XKBGeom.c:408:        _XkbGetReadBufferPtr(buf, SIZEOF(xkbDoodadWireDesc));
XKBGeom.c:461:        _XkbGetReadBufferPtr(buf, SIZEOF(xkbOverlayWireDesc));
XKBGeom.c:474:            _XkbGetReadBufferPtr(buf, SIZEOF(xkbOverlayRowWireDesc));
XKBGeom.c:484:            _XkbGetReadBufferPtr(buf,
XKBGeom.c:514:            _XkbGetReadBufferPtr(buf, SIZEOF(xkbSectionWireDesc));
XKBGeom.c:536:                    _XkbGetReadBufferPtr(buf, SIZEOF(xkbRowWireDesc));
XKBGeom.c:553:                            _XkbGetReadBufferPtr(buf, SIZEOF(xkbKeyWireDesc));
XKBGetMap.c:58:                _XkbGetReadBufferPtr(buf, SIZEOF(xkbKeyTypeWireDesc));
XKBGetMap.c:112:                    (xkbKTMapEntryWireDesc *) _XkbGetReadBufferPtr(buf, size);
XKBGetMap.c:130:                    pwire = (xkbModsWireDesc *) _XkbGetReadBufferPtr(buf, sz);
XKBGetMap.c:179:                _XkbGetReadBufferPtr(buf, SIZEOF(xkbSymMapWireDesc));
XKBGetMap.c:222:                _XkbGetReadBufferPtr(buf, SIZEOF(xkbSymMapWireDesc));
XKBGetMap.c:331:            wire = (xkbBehaviorWireDesc *) _XkbGetReadBufferPtr(buf,
XKBGetMap.c:353:        data = _XkbGetReadBufferPtr(buf, XkbPaddedSize(nVMods));
XKBGetMap.c:391:        wire = (unsigned char *) _XkbGetReadBufferPtr(buf, i);
XKBGetMap.c:421:        wire = (unsigned char *) _XkbGetReadBufferPtr(buf, i);
XKBGetMap.c:459:        wire = (xkbVModMapWireDesc *) _XkbGetReadBufferPtr(buf, i);
XKBleds.c:91:                        _XkbGetReadBufferPtr(&buf,
XKBList.c:72:        flags = (CARD16 *) _XkbGetReadBufferPtr(buf, 2 * sizeof(CARD16));
XKBList.c:82:        str = (char *) _XkbGetReadBufferPtr(buf, wlen);
XKBNames.c:121:            (CARD8 *) _XkbGetReadBufferPtr(&buf, XkbPaddedSize(rep->nTypes));
XKBRdBuf.c:150:_XkbGetReadBufferPtr(XkbReadBufferPtr from, int size)
XKBlibint.h:271:extern char *_XkbGetReadBufferPtr(
XKBlibint.h:275:#define _XkbGetTypedRdBufPtr(b,n,t) ((t *)_XkbGetReadBufferPtr(b,(n)*SIZEOF(t)))

#### _XkbInitReadBuffer ####
XKBCompat.c:45:    if (!_XkbInitReadBuffer(dpy, &buf, (int) rep->length * 4))
XKBExtDev.c:182:    if (!_XkbInitReadBuffer(dpy, &buf, (int) rep->length * 4))
XKBGeom.c:628:        if (_XkbInitReadBuffer(dpy, &buf, (int) rep->length * 4)) {
XKBGetMap.c:524:        if (_XkbInitReadBuffer(dpy, &buf, extraData)) {
XKBleds.c:77:        if (!_XkbInitReadBuffer(dpy, &buf, (int) rep->length * 4))
XKBList.c:195:    if (_XkbInitReadBuffer(dpy, &buf, extraLen)) {
XKBNames.c:76:    if (!_XkbInitReadBuffer(dpy, &buf, (int) rep->length * 4))
XKBRdBuf.c:38:_XkbInitReadBuffer(Display *dpy, XkbReadBufferPtr buf, int size)
XKBlibint.h:192:extern  int _XkbInitReadBuffer(

#### _XkbInternAtomFunc ####
XKB.c:35:XkbInternAtomFunc       _XkbInternAtomFunc  = XInternAtom;
XKB.c:772:    _XkbInternAtomFunc = (getAtom ? getAtom : XInternAtom);
XKBlibint.h:63:extern  XkbInternAtomFunc       _XkbInternAtomFunc;

#### _XkbNoteCoreMapChanges ####
XKBBind.c:416:            _XkbNoteCoreMapChanges(&changes, event, XKB_XLIB_MAP_MASK);
XKBUse.c:181:_XkbNoteCoreMapChanges(XkbMapChangesPtr old,
XKBUse.c:309:            _XkbNoteCoreMapChanges(&xkbi->changes, ev, XKB_XLIB_MAP_MASK);
XKBlibint.h:186:extern void _XkbNoteCoreMapChanges(

#### _XkbPeekAtReadBuffer ####
XKBRdBuf.c:141:_XkbPeekAtReadBuffer(XkbReadBufferPtr from, int size)
XKBlibint.h:266:extern char *_XkbPeekAtReadBuffer(

#### (arch=amd64 ia64 alpha ppc64 arm64)_XkbReadBufferCopy32 ####

#### _XkbReadBufferCopyKeySyms ####
XKBGetMap.c:203:                _XkbReadBufferCopyKeySyms(buf, (KeySym *) &map->syms[offset],
XKBGetMap.c:235:                _XkbReadBufferCopyKeySyms(buf, newSyms, newMap->nSyms);
XKBRdBuf.c:90:_XkbReadBufferCopyKeySyms(XkbReadBufferPtr from, KeySym * to, int num_words)
XKBlibint.h:251:extern int _XkbReadBufferCopyKeySyms(
XKBlibint.h:263:#define _XkbReadBufferCopyKeySyms(f,t,s)        _XkbReadBufferCopy32(f,t,s)

#### (arch=amd64 ia64 alpha ppc64 arm64)_XkbReadCopyData32 ####

#### _XkbReadCopyKeySyms ####
XKBRdBuf.c:81:_XkbReadCopyKeySyms(int *wire, KeySym * to, int num_words)
XKBRdBuf.c:94:    _XkbReadCopyKeySyms((int *) from->data, to, num_words);
XKBlibint.h:239:extern int _XkbReadCopyKeySyms(
XKBlibint.h:261:#define _XkbReadCopyKeySyms(f,t,n)              _XkbReadCopyData32(f,t,n)

#### _XkbReadGetCompatMapReply ####
XKBCompat.c:37:_XkbReadGetCompatMapReply(Display *dpy,
XKBCompat.c:148:    status = _XkbReadGetCompatMapReply(dpy, &rep, xkb, NULL);
XKBGetByName.c:166:        status = _XkbReadGetCompatMapReply(dpy, &crep, xkb, &nread);
XKBlibint.h:305:extern  Status  _XkbReadGetCompatMapReply(

#### _XkbReadGetGeometryReply ####
XKBGeom.c:607:_XkbReadGetGeometryReply(Display *dpy,
XKBGeom.c:692:        status = _XkbReadGetGeometryReply(dpy, &rep, xkb, NULL);
XKBGeom.c:720:        status = _XkbReadGetGeometryReply(dpy, &rep, xkb, NULL);
XKBGetByName.c:202:        status = _XkbReadGetGeometryReply(dpy, &grep, xkb, &nread);
XKBlibint.h:326:extern  Status  _XkbReadGetGeometryReply(

#### _XkbReadGetIndicatorMapReply ####
XKBGetByName.c:178:        status = _XkbReadGetIndicatorMapReply(dpy, &irep, xkb, &nread);
XKBleds.c:61:_XkbReadGetIndicatorMapReply(Display *dpy,
XKBleds.c:148:    status = _XkbReadGetIndicatorMapReply(dpy, &rep, xkb, NULL);
XKBlibint.h:312:extern  Status  _XkbReadGetIndicatorMapReply(

#### _XkbReadGetMapReply ####
XKBGetByName.c:154:        status = _XkbReadGetMapReply(dpy, &mrep, xkb, &nread);
XKBGetMap.c:493:_XkbReadGetMapReply(Display *dpy,
XKBGetMap.c:567:    return _XkbReadGetMapReply(dpy, &rep, xkb, NULL);
XKBlibint.h:298:extern  Status  _XkbReadGetMapReply(

#### _XkbReadGetNamesReply ####
XKBGetByName.c:190:        status = _XkbReadGetNamesReply(dpy, &nrep, xkb, &nread);
XKBNames.c:55:_XkbReadGetNamesReply(Display *dpy,
XKBNames.c:270:    status = _XkbReadGetNamesReply(dpy, &rep, xkb, NULL);
XKBlibint.h:319:extern  Status  _XkbReadGetNamesReply(

#### _XkbReloadDpy ####
XKBBind.c:362:        _XkbReloadDpy(dpy);
XKBBind.c:409:        _XkbReloadDpy(dpy);
XKBBind.c:545:_XkbReloadDpy(Display *dpy)
XKBlibint.h:89:        _XkbReloadDpy((d)); \
XKBlibint.h:129:extern  void _XkbReloadDpy(

#### _XkbSkipReadBufferData ####
XKBGeom.c:301:        _XkbSkipReadBufferData(buf, (rep->nKeyAliases * XkbKeyNameLength * 2));
XKBGetMap.c:271:        if ((i > 0) && (!_XkbSkipReadBufferData(buf, i))) {
XKBNames.c:113:        if ((len > 0) && (!_XkbSkipReadBufferData(&buf, len)))
XKBNames.c:129:                    if (!_XkbSkipReadBufferData(&buf, nLevels[i] * 4))
XKBNames.c:149:                    _XkbSkipReadBufferData(&buf, nLevels[i] * 4);
XKBNames.c:155:                _XkbSkipReadBufferData(&buf, nLevels[i] * 4);
XKBNames.c:194:            _XkbSkipReadBufferData(&buf, rep->nKeys * XkbKeyNameLength);
XKBRdBuf.c:55:_XkbSkipReadBufferData(XkbReadBufferPtr from, int size)
XKBlibint.h:198:extern int _XkbSkipReadBufferData(

#### (arch=amd64 ia64 alpha ppc64 arm64)_XkbWriteCopyData32 ####

#### _XkbWriteCopyKeySyms ####
XKBRdBuf.c:100:_XkbWriteCopyKeySyms(register KeySym * from, CARD32 *to, int len)
XKBSetMap.c:150:            _XkbWriteCopyKeySyms(pSym, outSym, desc->nSyms);
XKBlibint.h:245:extern  int _XkbWriteCopyKeySyms(
XKBlibint.h:262:#define _XkbWriteCopyKeySyms(f,t,n)             _XkbWriteCopyData32(f,t,n)

#### _XkeyTable ####
KeysymStr.c:91:	    const unsigned char *entry = &_XkeyTable[idx];
StrKeysym.c:95:	entry = &_XkeyTable[idx];
Key.h:9:extern const unsigned char _XkeyTable[];

#### _XlcAddCT ####
lcCT.c:405: * at runtime through _XlcAddCT.
lcCT.c:456:_XlcAddCT(
lcCT.c:1276:	    charset = _XlcAddCT(ct_data->name, ct_data->ct_sequence);
lcGeneric.c:525:        _XlcAddCT(charsetd->name, charsetd->ct_sequence);
lcGeneric.c:837:		    charset = _XlcAddCT(name, encoding);
XlcPubI.h:129:extern XlcCharSet _XlcAddCT(

#### _XlcAddCharSet ####
lcCharSet.c:87:_XlcAddCharSet(
lcCT.c:476:        _XlcAddCharSet(charset);
lcGeneric.c:406:        _XlcAddCharSet(charset);
lcGeneric.c:845:			_XlcAddCharSet(charset);
XlcPublic.h:133:extern Bool _XlcAddCharSet(

#### _XlcAddGB18030LocaleConverters ####
lcUTF8.c:2364:_XlcAddGB18030LocaleConverters(
lcUTF8Load.c:60:        _XlcAddGB18030LocaleConverters(lcd);
Xlcint.h:914:extern void _XlcAddGB18030LocaleConverters(

#### _XlcAddLoader ####
lcInit.c:121:    _XlcAddLoader(_XlcDynamicLoad, XlcHead);
lcInit.c:125:    _XlcAddLoader(_XlcGenericLoader, XlcHead);
lcInit.c:129:    _XlcAddLoader(_XlcDefaultLoader, XlcHead);
lcInit.c:133:    _XlcAddLoader(_XlcUtf8Loader, XlcHead);
lcInit.c:137:    _XlcAddLoader(_XlcDynamicLoader, XlcHead);
lcWrap.c:212:_XlcAddLoader(
Xlcint.h:893:extern Bool _XlcAddLoader(

#### _XlcAddUtf8Converters ####
lcDefConv.c:803:    _XlcAddUtf8Converters(lcd);
lcGenConv.c:3109:    _XlcAddUtf8Converters(lcd);
lcUTF8.c:1133:_XlcAddUtf8Converters(
lcUTF8Load.c:67:    _XlcAddUtf8Converters(lcd);
Xlcint.h:904:extern void _XlcAddUtf8Converters(

#### _XlcAddUtf8LocaleConverters ####
lcUTF8.c:2330:_XlcAddUtf8LocaleConverters(
lcUTF8Load.c:57:        _XlcAddUtf8LocaleConverters(lcd);
Xlcint.h:909:extern void _XlcAddUtf8LocaleConverters(

#### _XlcCloseConverter ####
imDefIm.c:1009:	_XlcCloseConverter(im->private.proto.ctom_conv);
imDefIm.c:1013:	_XlcCloseConverter(im->private.proto.ctow_conv);
imDefIm.c:1017:	_XlcCloseConverter(im->private.proto.ctoutf8_conv);
imDefIm.c:1021:	_XlcCloseConverter(im->private.proto.cstomb_conv);
imDefIm.c:1025:	_XlcCloseConverter(im->private.proto.cstowc_conv);
imDefIm.c:1029:	_XlcCloseConverter(im->private.proto.cstoutf8_conv);
imDefIm.c:1033:	_XlcCloseConverter(im->private.proto.ucstoc_conv);
imDefIm.c:1037:	_XlcCloseConverter(im->private.proto.ucstoutf8_conv);
imLcIm.c:180:	_XlcCloseConverter(im->private.local.ctom_conv);
imLcIm.c:184:	_XlcCloseConverter(im->private.local.ctow_conv);
imLcIm.c:188:	_XlcCloseConverter(im->private.local.ctoutf8_conv);
imLcIm.c:192:	_XlcCloseConverter(im->private.local.cstomb_conv);
imLcIm.c:196:	_XlcCloseConverter(im->private.local.cstowc_conv);
imLcIm.c:200:	_XlcCloseConverter(im->private.local.cstoutf8_conv);
imLcIm.c:204:	_XlcCloseConverter(im->private.local.ucstoc_conv);
imLcIm.c:208:	_XlcCloseConverter(im->private.local.ucstoutf8_conv);
imThaiFlt.c:589:            _XlcCloseConverter(conv);
imThaiIm.c:184:	_XlcCloseConverter(im->private.local.ctom_conv);
imThaiIm.c:188:	_XlcCloseConverter(im->private.local.ctow_conv);
imThaiIm.c:192:	_XlcCloseConverter(im->private.local.ctoutf8_conv);
imThaiIm.c:196:	_XlcCloseConverter(im->private.local.cstomb_conv);
imThaiIm.c:200:	_XlcCloseConverter(im->private.local.cstowc_conv);
imThaiIm.c:204:	_XlcCloseConverter(im->private.local.cstoutf8_conv);
imThaiIm.c:208:	_XlcCloseConverter(im->private.local.ucstoc_conv);
imThaiIm.c:212:	_XlcCloseConverter(im->private.local.ucstoutf8_conv);
lcConv.c:313:_XlcCloseConverter(
lcPrTxt.c:225:        _XlcCloseConverter(conv);
lcRM.c:178:    _XlcCloseConverter(((MbState) state)->conv);
lcStd.c:54:	_XlcCloseConverter(conv);
lcStd.c:97:	_XlcCloseConverter(conv);
lcStd.c:154:    _XlcCloseConverter(conv);
lcStd.c:193:    _XlcCloseConverter(conv);
lcStd.c:346:    _XlcCloseConverter(conv);
lcTxtPr.c:175:	    _XlcCloseConverter(conv);
lcTxtPr.c:191:    _XlcCloseConverter(conv);
omGeneric.c:1413:	_XlcCloseConverter(gen->mbs_to_cs);
omGeneric.c:1416:	_XlcCloseConverter(gen->wcs_to_cs);
omGeneric.c:1419:	_XlcCloseConverter(gen->utf8_to_cs);
XDefaultIMIF.c:237:        _XlcCloseConverter(im->private->ctom_conv);
XDefaultIMIF.c:239:        _XlcCloseConverter(im->private->ctow_conv);
XlcPublic.h:250:extern void _XlcCloseConverter(

#### _XlcCompareISOLatin1 ####
imDefIm.c:176:	    if( locale_name[n] && !_XlcCompareISOLatin1( pp, locale_name[n] ) )
lcGeneric.c:718:    if (num > 0 && !_XlcCompareISOLatin1(value[0], "True"))
lcGeneric.c:724:    if (num > 0 && !_XlcCompareISOLatin1(value[0], "True"))
lcGeneric.c:755:	    if (tmp != NULL && !_XlcCompareISOLatin1(tmp + 1, "Default")) {
lcPublic.c:125:    if (num > 0 && !_XlcCompareISOLatin1(values[0], "True"))
lcUTF8.c:958:	&& _XlcCompareISOLatin1(XLC_PUBLIC_PART(lcd)->codeset, "UTF-8") == 0) {
lcUTF8Load.c:56:    else if (!_XlcCompareISOLatin1(XLC_PUBLIC_PART(lcd)->codeset, "UTF-8")) {
lcUTF8Load.c:59:    else if (!_XlcCompareISOLatin1(XLC_PUBLIC_PART(lcd)->codeset, "GB18030")) {
lcUtil.c:42:_XlcCompareISOLatin1(
omGeneric.c:606:    if (_XlcCompareISOLatin1(last - length, font_data->name) == 0)
omGeneric.c:1600:	    if (!_XlcCompareISOLatin1(gen->object_name, methods_list->name)) {
omGeneric.c:1850:        if (bufptr && _XlcCompareISOLatin1(bufptr, "GL") == 0)
omGeneric.c:1852:        else if (bufptr && _XlcCompareISOLatin1(bufptr, "GR") == 0)
omGeneric.c:1926:    if (count > 0 && _XlcCompareISOLatin1(*value, "True") == 0)
XDefaultOMIF.c:179:	if (_XlcCompareISOLatin1(last - length, font_data->name) == 0)
XDefaultOMIF.c:428:		if (_XlcCompareISOLatin1(charset_p,
XlcPublic.h:304:extern int _XlcCompareISOLatin1(

#### _XlcCompileResourceList ####
lcCharSet.c:132:	_XlcCompileResourceList(resources, XlcNumber(resources));
lcPublic.c:307:	_XlcCompileResourceList(resources, XlcNumber(resources));
lcWrap.c:578:_XlcCompileResourceList(
omGeneric.c:1579:	_XlcCompileResourceList(oc_resources, XlcNumber(oc_resources));
omGeneric.c:1779:	_XlcCompileResourceList(om_resources, XlcNumber(om_resources));
XDefaultOMIF.c:886:	_XlcCompileResourceList(oc_resources, XlcNumber(oc_resources));
XDefaultOMIF.c:1109:	_XlcCompileResourceList(om_resources, XlcNumber(om_resources));
Xlcint.h:863:extern void _XlcCompileResourceList(

#### _XlcConvert ####
imConv.c:201:	if (_XlcConvert(private->ucstoc_conv,
imConv.c:211:	    if (_XlcConvert(private->cstomb_conv,
imConv.c:270:	if (_XlcConvert(private->ucstoc_conv,
imConv.c:281:	    if (_XlcConvert(private->cstowc_conv,
imConv.c:342:	if (_XlcConvert(private->ucstoutf8_conv,
imDefLkup.c:877:	if (_XlcConvert(conv, (XPointer *)&from_buf, &from_left,
imDefLkup.c:953:	if (_XlcConvert(conv, (XPointer *)&from_buf, &from_left,
imLcLkup.c:315:	if (_XlcConvert(conv, (XPointer *)&from_buf, &from_left,
imLcLkup.c:386:	if (_XlcConvert(conv, (XPointer *)&from_buf, &from_left,
imLcPrs.c:425:    if (_XlcConvert(im->private.local.ucstoc_conv,
imLcPrs.c:435:    if (_XlcConvert(im->private.local.cstomb_conv,
imThaiFlt.c:584:            if (_XlcConvert(conv, (XPointer *)&from_buf, &from_left,
lcConv.c:33:typedef struct _XlcConverterListRec {
lcConv.c:41:    struct _XlcConverterListRec *next;
lcConv.c:320:_XlcConvert(
lcPrTxt.c:195:	        ret = _XlcConvert(conv, &from, &from_left, &to, &to_left, NULL, 0);
lcRM.c:145:    ret = _XlcConvert(conv, (XPointer *) &from, &from_left,
lcStd.c:71:    if (_XlcConvert(conv, &from, &from_left, &to, &to_left, NULL, 0) < 0)
lcStd.c:114:    if (_XlcConvert(conv, &from, &from_left, &to, &to_left, NULL, 0) < 0)
lcStd.c:146:    if (_XlcConvert(conv, &from, &from_left, &to, &to_left, NULL, 0) < 0)
lcStd.c:185:    if (_XlcConvert(conv, &from, &from_left, &to, &to_left, NULL, 0) < 0)
lcStd.c:338:    if (_XlcConvert(conv, &from, &from_left, &to, &to_left, NULL, 0) < 0)
lcTxtPr.c:168:	ret = _XlcConvert(conv, &from, &from_left, (XPointer *) &to, &to_left,
omDefault.c:59:    ret = _XlcConvert(conv, (XPointer *) &from, &length, (XPointer *) &to,
omDefault.c:82:    ret = _XlcConvert(conv, (XPointer *) &from, &length, (XPointer *) &to,
omXChar.c:325:    ret = _XlcConvert(conv, from, from_left, &cs, &cs_left, lc_args, 1);
XDefaultOMIF.c:595:    ret = _XlcConvert(conv, (XPointer *) &from, &length, (XPointer *) &to,
XlcPublic.h:254:extern int _XlcConvert(

#### _XlcCopyFromArg ####
lcWrap.c:499:_XlcCopyFromArg(
lcWrap.c:638:		_XlcCopyFromArg(args->value, base + res->offset, res->size);
Xlcint.h:851:extern void _XlcCopyFromArg(

#### _XlcCopyToArg ####
lcWrap.c:523:_XlcCopyToArg(
lcWrap.c:606:		    _XlcCopyToArg(base + res->offset, &args->value, res->size);
Xlcint.h:857:extern void _XlcCopyToArg(

#### _XlcCountVaList ####
lcCharSet.c:150:    _XlcCountVaList(var, &num_args);
lcPubWrap.c:42:    _XlcCountVaList(var, &num_args);
lcWrap.c:547:_XlcCountVaList(
OCWrap.c:41:    _XlcCountVaList(var, &num_args);
OCWrap.c:99:    _XlcCountVaList(var, &num_args);
OCWrap.c:125:    _XlcCountVaList(var, &num_args);
OMWrap.c:76:    _XlcCountVaList(var, &num_args);
OMWrap.c:102:    _XlcCountVaList(var, &num_args);
Xlcint.h:839:extern void _XlcCountVaList(

#### _XlcCreateDefaultCharSet ####
lcCharSet.c:170:_XlcCreateDefaultCharSet(
lcCT.c:311: * Used by _XlcCreateDefaultCharSet.
lcCT.c:473:        charset = _XlcCreateDefaultCharSet(name, ct_sequence);
lcGeneric.c:405:        (charset = _XlcCreateDefaultCharSet(name, ""))) {
lcGeneric.c:842:			(charset = _XlcCreateDefaultCharSet(name, ""))) {
XlcPubI.h:124:extern XlcCharSet _XlcCreateDefaultCharSet(

#### _XlcCreateLC ####
lcDefConv.c:779:    lcd = _XlcCreateLC(name, _XlcGenericMethods);
lcDynamic.c:72:    lcd = _XlcCreateLC(name,_XlcGenericMethods);
lcGenConv.c:3061:    lcd = _XlcCreateLC(name, _XlcGenericMethods);
lcPubWrap.c:69:_XlcCreateLC(
lcUTF8Load.c:47:    lcd = _XlcCreateLC(name, _XlcGenericMethods);
XlcPubI.h:107:extern XLCd _XlcCreateLC(

#### _XlcCreateLocaleDataBase ####
lcDB.c:1269:/*	_XlcCreateLocaleDataBase(lcd)					*/
lcDB.c:1275:_XlcCreateLocaleDataBase(
lcPublic.c:113:    if(_XlcCreateLocaleDataBase(lcd) == NULL)
XlcPubI.h:219:extern XPointer _XlcCreateLocaleDataBase(

#### _XlcCurrentLC ####
Font.c:668:    lcd = _XlcCurrentLC();
Font.c:669:    if ((lcd = _XlcCurrentLC()) != 0)
IMWrap.c:194:    XLCd	lcd = _XlcCurrentLC();
lcStd.c:46:	lcd = _XlcCurrentLC();
lcStd.c:89:	lcd = _XlcCurrentLC();
lcStd.c:132:	lcd = _XlcCurrentLC();
lcStd.c:171:	lcd = _XlcCurrentLC();
lcStd.c:324:	lcd = _XlcCurrentLC();
lcWrap.c:78:    XLCd lcd = _XlcCurrentLC();
lcWrap.c:98:    return _XlcCurrentLC() != (XLCd)NULL;
lcWrap.c:349:_XlcCurrentLC(void)
lcWrap.c:383:    XLCd lcd = _XlcCurrentLC();
lcWrap.c:399:    XLCd lcd = _XlcCurrentLC();
lcWrap.c:415:    XLCd lcd = _XlcCurrentLC();
lcWrap.c:432:    XLCd lcd = _XlcCurrentLC();
lcWrap.c:449:    XLCd lcd = _XlcCurrentLC();
lcWrap.c:466:    XLCd lcd = _XlcCurrentLC();
lcWrap.c:479:    XLCd lcd = _XlcCurrentLC();
lcWrap.c:490:    XLCd lcd = _XlcCurrentLC();
XKBCvt.c:343:    lcd = _XlcCurrentLC();
Xlcint.h:767:extern XLCd _XlcCurrentLC (void);

#### _XlcDbg_printValue ####
lcGeneric.c:364:_XlcDbg_printValue(
lcGeneric.c:434:        _XlcDbg_printValue(name,value,num);
lcGeneric.c:442:                _XlcDbg_printValue(name,value,num);
lcGeneric.c:474:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:481:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:488:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:499:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:515:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:576:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:590:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:602:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:613:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:621:            _XlcDbg_printValue(name,value,num);
lcGeneric.c:880:                _XlcDbg_printValue(name,value,num);
lcGeneric.c:901:                _XlcDbg_printValue(name,value,num);
lcGeneric.c:913:                _XlcDbg_printValue(name,value,num);
lcGeneric.c:925:                _XlcDbg_printValue(name,value,num);
lcGeneric.c:932:                _XlcDbg_printValue(name,value,num);
omGeneric.c:1897:        _XlcDbg_printValue(buf,value,count);
omGeneric.c:1905:        _XlcDbg_printValue(buf,value,count);
XlcGeneric.h:149:_XlcDbg_printValue(

#### _XlcDeInitLoader ####
lcInit.c:144:_XlcDeInitLoader(void)
lcWrap.c:339:	_XlcDeInitLoader();
Xlcint.h:889:extern void _XlcDeInitLoader (void);

#### _XlcDefaultLoader ####
lcDefConv.c:774:_XlcDefaultLoader(
lcInit.c:129:    _XlcAddLoader(_XlcDefaultLoader, XlcHead);
lcInit.c:156:    _XlcRemoveLoader(_XlcDefaultLoader);
Xlcint.h:919:extern XLCd _XlcDefaultLoader(

#### _XlcDefaultMapModifiers ####
lcPublic.c:48:	_XlcDefaultMapModifiers,
lcWrap.c:131:_XlcDefaultMapModifiers(
Xlcint.h:774:extern char *_XlcDefaultMapModifiers(

#### _XlcDestroyLC ####
lcDefConv.c:784:        _XlcDestroyLC(lcd);
lcPubWrap.c:60:_XlcDestroyLC(
lcPubWrap.c:95:    _XlcDestroyLC(lcd);
lcUTF8Load.c:53:	_XlcDestroyLC(lcd);
lcUTF8Load.c:63:	_XlcDestroyLC(lcd);
XlcPubI.h:112:extern void _XlcDestroyLC(

#### _XlcDestroyLocaleDataBase ####
lcDB.c:1232:/*	_XlcDestroyLocaleDataBase(lcd)					*/
lcDB.c:1241:_XlcDestroyLocaleDataBase(
lcPublic.c:273:    _XlcDestroyLocaleDataBase(lcd);
XlcPubI.h:223:extern void _XlcDestroyLocaleDataBase(

#### _XlcFileName ####
imLcIm.c:103:	name = _XlcFileName(im->core.lcd, COMPOSE_FILE);
imLcIm.c:547:        tmpname = name = _XlcFileName(im->core.lcd, COMPOSE_FILE);
imLcPrs.c:336:                     lcCompose = _XlcFileName(im->core.lcd, COMPOSE_FILE);
lcDB.c:1285:    name = _XlcFileName(lcd, "locale");
lcFile.c:465:_XlcFileName(
XlcPublic.h:284:extern char *_XlcFileName(

#### _XlcGenericLoader ####
lcGenConv.c:3053:_XlcGenericLoader(
lcInit.c:125:    _XlcAddLoader(_XlcGenericLoader, XlcHead);
lcInit.c:152:    _XlcRemoveLoader(_XlcGenericLoader);
Xlcint.h:925:extern XLCd _XlcGenericLoader(

#### _XlcGenericMethods ####
lcDefConv.c:779:    lcd = _XlcCreateLC(name, _XlcGenericMethods);
lcDynamic.c:64:    XLCdMethods _XlcGenericMethods;
lcDynamic.c:71:    _XlcGenericMethods = (XLCdMethods)dlsym(nlshandler,"genericMethods");
lcDynamic.c:72:    lcd = _XlcCreateLC(name,_XlcGenericMethods);
lcGenConv.c:3061:    lcd = _XlcCreateLC(name, _XlcGenericMethods);
lcGeneric.c:53:XLCdMethods _XlcGenericMethods = (XLCdMethods) &genericMethods;
lcUTF8Load.c:47:    lcd = _XlcCreateLC(name, _XlcGenericMethods);
XlcGeneric.h:142:extern XLCdMethods _XlcGenericMethods;

#### _XlcGetCSValues ####
lcCharSet.c:142:_XlcGetCSValues(XlcCharSet charset, ...)
XlcPublic.h:140:extern char *_XlcGetCSValues(

#### _XlcGetCharSet ####
lcCharSet.c:46:_XlcGetCharSet(
lcCharSet.c:66:_XlcGetCharSetWithSide(
lcCharSet.c:92:    if (_XlcGetCharSet(charset->name))
lcCT.c:467:    charset = _XlcGetCharSet(name);
lcCT.c:682:	default_GL_charset = _XlcGetCharSet("ISO8859-1:GL");
lcCT.c:683:	default_GR_charset = _XlcGetCharSet("ISO8859-1:GR");
lcGenConv.c:3066:    default_GL_charset = _XlcGetCharSet("ISO8859-1:GL");
lcGenConv.c:3067:    default_GR_charset = _XlcGetCharSet("ISO8859-1:GR");
lcGeneric.c:403:    charset = _XlcGetCharSet(name);
lcGeneric.c:840:		    charset = _XlcGetCharSet(name);
lcUTF8.c:644:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:747:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:1038:        charset = _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:1527:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:1620:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:1763:	    XlcCharSet charset = _XlcGetCharSet(*value++);
lcUTF8.c:1958:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:2053:		_XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
omGeneric.c:1959:	    *charset_list++ = _XlcGetCharSet(*value++);
XlcPublic.h:119:extern XlcCharSet _XlcGetCharSet(
XlcPublic.h:126:extern XlcCharSet _XlcGetCharSetWithSide(

#### _XlcGetCharSetWithSide ####
lcCharSet.c:66:_XlcGetCharSetWithSide(
lcUTF8.c:644:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:747:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:1038:        charset = _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:1527:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:1620:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:1958:	        _XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
lcUTF8.c:2053:		_XlcGetCharSetWithSide(chosen_charset->name, chosen_side);
XlcPublic.h:126:extern XlcCharSet _XlcGetCharSetWithSide(

#### _XlcGetLocaleDataBase ####
lcDB.c:1203:/*	_XlcGetLocaleDataBase(lcd, category, class, value, count)	*/
lcDB.c:1208:_XlcGetLocaleDataBase(
lcPublic.c:69:	_XlcGetLocaleDataBase
XlcPubI.h:227:extern void _XlcGetLocaleDataBase(

#### _XlcGetResource ####
lcDB.c:1184:/*	_XlcGetResource(lcd, category, class, value, count)		*/
lcDB.c:1189:_XlcGetResource(
lcGeneric.c:433:        _XlcGetResource(lcd, "XLC_CHARSET_DEFINE", name, &value, &num);
lcGeneric.c:440:            _XlcGetResource(lcd, "XLC_CHARSET_DEFINE", name, &value, &num);
lcGeneric.c:472:        _XlcGetResource(lcd, "XLC_CHARSET_DEFINE", name, &value, &num);
lcGeneric.c:479:        _XlcGetResource(lcd, "XLC_CHARSET_DEFINE", name, &value, &num);
lcGeneric.c:486:        _XlcGetResource(lcd, "XLC_CHARSET_DEFINE", name, &value, &num);
lcGeneric.c:497:        _XlcGetResource(lcd, "XLC_CHARSET_DEFINE", name, &value, &num);
lcGeneric.c:513:        _XlcGetResource(lcd, "XLC_CHARSET_DEFINE", name, &value, &num);
lcGeneric.c:570:        _XlcGetResource(lcd, "XLC_SEGMENTCONVERSION", name, &value, &num);
lcGeneric.c:587:        _XlcGetResource(lcd, "XLC_SEGMENTCONVERSION", name, &value, &num);
lcGeneric.c:599:        _XlcGetResource(lcd, "XLC_SEGMENTCONVERSION", name, &value, &num);
lcGeneric.c:611:        _XlcGetResource(lcd, "XLC_SEGMENTCONVERSION", name, &value, &num);
lcGeneric.c:619:        _XlcGetResource(lcd, "XLC_SEGMENTCONVERSION", name, &value, &num);
lcGeneric.c:704:    _XlcGetResource(lcd, "XLC_XLOCALE", "wc_encoding_mask", &value, &num);
lcGeneric.c:711:    _XlcGetResource(lcd, "XLC_XLOCALE", "wc_shift_bits", &value, &num);
lcGeneric.c:717:    _XlcGetResource(lcd, "XLC_XLOCALE", "use_stdc_env", &value, &num);
lcGeneric.c:723:    _XlcGetResource(lcd, "XLC_XLOCALE", "force_convert_to_mb", &value, &num);
lcGeneric.c:738:	_XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:765:	_XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:776:	_XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:812:	_XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:823:	_XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:865:            _XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:899:        _XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:911:        _XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:923:        _XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcGeneric.c:930:        _XlcGetResource(lcd, "XLC_XLOCALE", name, &value, &num);
lcPublic.c:116:    _XlcGetResource(lcd, "XLC_XLOCALE", "mb_cur_max", &values, &num);
lcPublic.c:124:    _XlcGetResource(lcd, "XLC_XLOCALE", "state_depend_encoding", &values, &num);
lcPublic.c:130:    _XlcGetResource(lcd, "XLC_XLOCALE", "encoding_name", &values, &num);
lcUTF8.c:1737:	_XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
lcUTF8.c:1740:	    _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
lcUTF8.c:1755:        _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
lcUTF8.c:1758:            _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:1895:    _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:1903:    _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:1925:    _XlcGetResource(lcd, "XLC_FONTSET", "on_demand_loading", &value, &count);
omGeneric.c:1929:    _XlcGetResource(lcd, "XLC_FONTSET", "object_name", &value, &count);
omGeneric.c:1939:        _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:1943:            _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:1962:        _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:1986:        _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:1989:            _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:2002:        _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
omGeneric.c:2011:            _XlcGetResource(lcd, "XLC_FONTSET", buf, &value, &count);
XlcPublic.h:276:extern void _XlcGetResource(

#### _XlcGetValues ####
lcCharSet.c:134:    return _XlcGetValues((XPointer) charset, resources, XlcNumber(resources),
lcPublic.c:309:    return _XlcGetValues((XPointer) pub, resources, XlcNumber(resources), args,
lcWrap.c:587:_XlcGetValues(
omGeneric.c:1486:    return _XlcGetValues((XPointer) oc, oc->core.resources,
omGeneric.c:1727:    return _XlcGetValues((XPointer) om, om->core.resources,
XDefaultOMIF.c:571:    return _XlcGetValues((XPointer) oc, oc->core.resources,
XDefaultOMIF.c:968:    return _XlcGetValues((XPointer) om, om->core.resources,
Xlcint.h:868:extern char *_XlcGetValues(

#### _XlcInitCTInfo ####
lcCT.c:1265:_XlcInitCTInfo(void)
lcPublic.c:210:    _XlcInitCTInfo();
XlcPubI.h:134:extern Bool _XlcInitCTInfo (void);

#### _XlcInitLoader ####
lcInit.c:112: * The _XlcInitLoader function initializes the locale object loader list
lcInit.c:117:_XlcInitLoader(void)
lcWrap.c:287:	_XlcInitLoader();
Xlcint.h:887:extern void _XlcInitLoader (void);

#### _XlcLocaleDirName ####
lcFile.c:618:_XlcLocaleDirName(char *dir_name, size_t dir_len, const char *lc_name)
XlcDL.c:383:    if (_XlcLocaleDirName(lc_dir, BUFSIZE, lc_name) == NULL)
XlcDL.c:523:  if (_XlcLocaleDirName(lc_dir, BUFSIZE, lc_name) == NULL) return False;
XlcPubI.h:213:extern char *_XlcLocaleDirName(

#### _XlcLocaleLibDirName ####
lcFile.c:696:_XlcLocaleLibDirName(char *dir_name, size_t dir_len, const char *lc_name)
XlcDL.c:385:    if (_XlcLocaleLibDirName(lc_lib_dir, BUFSIZE, lc_name) == NULL)
XlcDL.c:428:  if (_XlcLocaleLibDirName(lc_dir, BUFSIZE, lc_name) == NULL) return (XIM)0;
XlcDL.c:476:  if (_XlcLocaleLibDirName(lc_dir, BUFSIZE, lc_name) == NULL) return False;
XlcDL.c:580:  if (_XlcLocaleLibDirName(lc_dir, BUFSIZE, lc_name) == NULL) return (XOM)0;
XlcPubI.h:207:extern char *_XlcLocaleLibDirName(

#### _XlcMapOSLocaleName ####
lcPublic.c:227:    name = _XlcMapOSLocaleName(name, siname);
lcWrap.c:269:        name = _XlcMapOSLocaleName(name, siname);
SetLocale.c:82: * _XlcMapOSLocaleName is an implementation dependent routine that derives
SetLocale.c:98:_XlcMapOSLocaleName(
XlcPubI.h:87:    char *siname;			/* for _XlcMapOSLocaleName() */
XlcPubI.h:241:extern char *_XlcMapOSLocaleName(

#### _XlcNCompareISOLatin1 ####
Font.c:678:    if (_XlcNCompareISOLatin1(name + l - 2 - (p - charset), charset, p - charset))
lcGenConv.c:480:    if ( _XlcNCompareISOLatin1(inbufptr, encoding_name, name_len) != 0 )
lcGeneric.c:443:                if (!_XlcNCompareISOLatin1(value[0], "none", 4)) {
lcGeneric.c:445:                } else if (!_XlcNCompareISOLatin1(value[0], "GL", 2)) {
lcGeneric.c:658:        if (!_XlcNCompareISOLatin1(ptr, "GL", 2)) {
lcGeneric.c:746:            if (!_XlcNCompareISOLatin1(value[0], "none", 4)) {
lcGeneric.c:748:            } else if (!_XlcNCompareISOLatin1(value[0], "GL", 2)) {
lcGeneric.c:796:		    if (!_XlcNCompareISOLatin1(tmp, shifts[j].str,
lcUtil.c:65:_XlcNCompareISOLatin1(
XlcPublic.h:311:extern int _XlcNCompareISOLatin1(

#### _XlcOpenConverter ####
imDefIm.c:1603:	if (!(ctom_conv = _XlcOpenConverter(lcd,
imDefIm.c:1606:	if (!(ctow_conv = _XlcOpenConverter(lcd,
imDefIm.c:1609:	if (!(ctoutf8_conv = _XlcOpenConverter(lcd,
imDefIm.c:1618:		if (!(ctom_conv = _XlcOpenConverter(lcd,
imDefIm.c:1621:		if (!(ctow_conv = _XlcOpenConverter(lcd,
imDefIm.c:1624:		if (!(ctoutf8_conv = _XlcOpenConverter(lcd,
imDefIm.c:1649:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNMultiByte)))
imDefIm.c:1653:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNWideChar)))
imDefIm.c:1657:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNUtf8String)))
imDefIm.c:1661:    if (!(conv = _XlcOpenConverter(lcd,	XlcNUcsChar, lcd, XlcNChar)))
imDefIm.c:1665:    if (!(conv = _XlcOpenConverter(lcd,	XlcNUcsChar, lcd, XlcNUtf8String)))
imLcIm.c:664:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCompoundText, lcd, XlcNMultiByte)))
imLcIm.c:668:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCompoundText, lcd, XlcNWideChar)))
imLcIm.c:672:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCompoundText, lcd, XlcNUtf8String)))
imLcIm.c:676:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNMultiByte)))
imLcIm.c:680:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNWideChar)))
imLcIm.c:684:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNUtf8String)))
imLcIm.c:688:    if (!(conv = _XlcOpenConverter(lcd,	XlcNUcsChar, lcd, XlcNChar)))
imLcIm.c:692:    if (!(conv = _XlcOpenConverter(lcd,	XlcNUcsChar, lcd, XlcNUtf8String)))
imThaiFlt.c:570:                conv = _XlcOpenConverter(im->core.lcd, XlcNWideChar,
imThaiFlt.c:575:                conv = _XlcOpenConverter(im->core.lcd, XlcNMultiByte,
imThaiIm.c:106:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCompoundText, lcd, XlcNMultiByte)))
imThaiIm.c:110:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCompoundText, lcd, XlcNWideChar)))
imThaiIm.c:114:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCompoundText, lcd, XlcNUtf8String)))
imThaiIm.c:118:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNMultiByte)))
imThaiIm.c:122:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNWideChar)))
imThaiIm.c:126:    if (!(conv = _XlcOpenConverter(lcd,	XlcNCharSet, lcd, XlcNUtf8String)))
imThaiIm.c:130:    if (!(conv = _XlcOpenConverter(lcd,	XlcNUcsChar, lcd, XlcNChar)))
imThaiIm.c:134:    if (!(conv = _XlcOpenConverter(lcd,	XlcNUcsChar, lcd, XlcNUtf8String)))
lcConv.c:294:_XlcOpenConverter(
lcPrTxt.c:170:        conv = _XlcOpenConverter(lcd, from_type, lcd, to_type);
lcRM.c:215:	state->conv = _XlcOpenConverter(lcd, XlcNMultiByte, lcd, XlcNWideChar);
lcStd.c:61:	conv = _XlcOpenConverter(lcd, XlcNMultiByte, lcd, XlcNWideChar);
lcStd.c:104:	conv = _XlcOpenConverter(lcd, XlcNWideChar, lcd, XlcNMultiByte);
lcStd.c:137:    conv = _XlcOpenConverter(lcd, XlcNMultiByte, lcd, XlcNWideChar);
lcStd.c:176:    conv = _XlcOpenConverter(lcd, XlcNWideChar, lcd, XlcNMultiByte);
lcStd.c:329:    conv = _XlcOpenConverter(lcd, XlcNMultiByte, lcd, XlcNUtf8String);
lcTxtPr.c:141:    conv = _XlcOpenConverter(lcd, from_type, lcd, to_type);
omXChar.c:395:    conv = _XlcOpenConverter(lcd, conv_type, lcd, XlcNFontCharSet);
omXChar.c:397:        conv = _XlcOpenConverter(lcd, conv_type, lcd, XlcNCharSet);
XDefaultIMIF.c:181:    if ((im->private->ctom_conv = _XlcOpenConverter(lcd, XlcNCompoundText,
XDefaultIMIF.c:186:    if ((im->private->ctow_conv = _XlcOpenConverter(lcd, XlcNCompoundText,
XDefaultOMIF.c:588:	conv = _XlcOpenConverter(lcd, XlcNWideChar, lcd, XlcNMultiByte);
XlcPublic.h:243:extern XlcConv _XlcOpenConverter(

#### _XlcParseCharSet ####
lcCharSet.c:220:    if (!_XlcParseCharSet(charset))
lcCT.c:314:_XlcParseCharSet(
XlcPubI.h:118:extern Bool _XlcParseCharSet(

#### _XlcParse_scopemaps ####
lcGeneric.c:343:_XlcParse_scopemaps(
lcGeneric.c:623:                _XlcParse_scopemaps(value[0],&conversion->conv_num);
lcGeneric.c:904:                _XlcParse_scopemaps(value[0],&(codeset->mbconv->conv_num));
lcGeneric.c:916:                _XlcParse_scopemaps(value[0],&(codeset->ctconv->conv_num));
omGeneric.c:1858:            font_data->scopes = _XlcParse_scopemaps(scp,&(font_data->scopes_num));
omGeneric.c:1877:        range = (CodeRange) _XlcParse_scopemaps(value[0],vrotate_num);
XlcGeneric.h:145:_XlcParse_scopemaps(

#### _XlcPublicMethods ####
lcGeneric.c:998:    XLCdPublicMethods superclass = (XLCdPublicMethods) _XlcPublicMethods;
lcPublic.c:73:XLCdMethods _XlcPublicMethods = (XLCdMethods) &publicMethods;
XlcPubI.h:103:extern XLCdMethods _XlcPublicMethods;

#### _XlcRemoveLoader ####
lcInit.c:148:    _XlcRemoveLoader(_XlcDynamicLoad);
lcInit.c:152:    _XlcRemoveLoader(_XlcGenericLoader);
lcInit.c:156:    _XlcRemoveLoader(_XlcDefaultLoader);
lcInit.c:160:    _XlcRemoveLoader(_XlcUtf8Loader);
lcInit.c:164:    _XlcRemoveLoader(_XlcDynamicLoader);
lcWrap.c:184:_XlcRemoveLoader(
lcWrap.c:218:    _XlcRemoveLoader(proc);		/* remove old loader, if exist */
Xlcint.h:899:extern void _XlcRemoveLoader(

#### _XlcResetConverter ####
imDefLkup.c:866:    _XlcResetConverter(conv);
imDefLkup.c:942:    _XlcResetConverter(conv);
imLcLkup.c:304:    _XlcResetConverter(conv);
imLcLkup.c:375:    _XlcResetConverter(conv);
imThaiFlt.c:583:            _XlcResetConverter(conv);
lcConv.c:334:_XlcResetConverter(
lcGenConv.c:763:	_XlcResetConverter(conv);
lcGenConv.c:1260:    _XlcResetConverter(conv); /* ??? */
lcGenConv.c:1263:	_XlcResetConverter(conv);
lcGenConv.c:1654:	_XlcResetConverter(conv);
lcGenConv.c:1771:	_XlcResetConverter(conv);
lcGenConv.c:2634:    _XlcResetConverter(conv);
lcPrTxt.c:217:	        _XlcResetConverter(conv);
lcRM.c:113:    _XlcResetConverter(((MbState) state)->conv);
lcTxtPr.c:188:	_XlcResetConverter(conv);
omXChar.c:389:	_XlcResetConverter(conv);
XDefaultOMIF.c:593:	_XlcResetConverter(conv);
XlcPublic.h:264:extern void _XlcResetConverter(

#### _XlcResolveI18NPath ####
lcFile.c:609:_XlcResolveI18NPath(char *buf, int buf_len)
XlcPubI.h:202:extern int _XlcResolveI18NPath(

#### _XlcResolveLocaleName ####
lcFile.c:525:_XlcResolveLocaleName(
lcPublic.c:229:    /* _XlcResolveLocaleName will lookup the SI's name for the locale */
lcPublic.c:230:    if (_XlcResolveLocaleName(name, pub) == 0) {
XlcPubI.h:197:extern int _XlcResolveLocaleName(

#### _XlcSetConverter ####
lcConv.c:82:_XlcSetConverter(
lcCT.c:1287:        _XlcSetConverter((XLCd) NULL, XlcNCompoundText,
lcCT.c:1290:        _XlcSetConverter((XLCd) NULL, XlcNString,
lcCT.c:1294:        _XlcSetConverter((XLCd) NULL, XlcNCharSet,
lcCT.c:1297:        _XlcSetConverter((XLCd) NULL, XlcNCharSet,
lcDefConv.c:788:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNWideChar, open_mbstowcs);
lcDefConv.c:789:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNString, open_mbstostr);
lcDefConv.c:790:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNCharSet, open_mbstocs);
lcDefConv.c:791:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNChar, open_mbstocs);
lcDefConv.c:793:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNMultiByte, open_wcstombs);
lcDefConv.c:794:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNString, open_wcstostr);
lcDefConv.c:795:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNCharSet, open_wcstocs);
lcDefConv.c:797:    _XlcSetConverter(lcd, XlcNString, lcd, XlcNMultiByte, open_strtombs);
lcDefConv.c:798:    _XlcSetConverter(lcd, XlcNString, lcd, XlcNWideChar, open_mbstowcs);
lcDefConv.c:800:    _XlcSetConverter(lcd, XlcNCharSet, lcd, XlcNMultiByte, open_cstombs);
lcDefConv.c:801:    _XlcSetConverter(lcd, XlcNCharSet, lcd, XlcNWideChar, open_cstowcs);
lcGenConv.c:3069:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNCompoundText, open_mbstocts);
lcGenConv.c:3070:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNString,       open_mbstostr);
lcGenConv.c:3071:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNCharSet,      open_mbstocs);
lcGenConv.c:3072:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNChar,         open_mbtocs);
lcGenConv.c:3073:    _XlcSetConverter(lcd, XlcNCompoundText, lcd, XlcNMultiByte, open_ctstombs);
lcGenConv.c:3074:    _XlcSetConverter(lcd, XlcNString,    lcd, XlcNMultiByte,    open_strtombs);
lcGenConv.c:3075:    _XlcSetConverter(lcd, XlcNCharSet,   lcd, XlcNMultiByte,    open_cstombs);
lcGenConv.c:3082:        _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNWideChar,     open_mbstowcs);
lcGenConv.c:3083:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNMultiByte,    open_wcstombs);
lcGenConv.c:3084:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNCompoundText, open_wcstocts);
lcGenConv.c:3085:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNString,       open_wcstostr);
lcGenConv.c:3086:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNCharSet,      open_wcstocs);
lcGenConv.c:3087:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNChar,         open_wctocs);
lcGenConv.c:3088:        _XlcSetConverter(lcd, XlcNCompoundText, lcd, XlcNWideChar,  open_ctstowcs);
lcGenConv.c:3089:        _XlcSetConverter(lcd, XlcNString,    lcd, XlcNWideChar,     open_strtowcs);
lcGenConv.c:3090:        _XlcSetConverter(lcd, XlcNCharSet,   lcd, XlcNWideChar,     open_cstowcs);
lcGenConv.c:3097:        _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNWideChar,     open_stdc_mbstowcs);
lcGenConv.c:3098:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNMultiByte,    open_stdc_wcstombs);
lcGenConv.c:3099:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNCompoundText, open_stdc_wcstocts);
lcGenConv.c:3100:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNString,       open_stdc_wcstostr);
lcGenConv.c:3101:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNCharSet,      open_stdc_wcstocs);
lcGenConv.c:3102:        _XlcSetConverter(lcd, XlcNWideChar,  lcd, XlcNChar,         open_stdc_wctocs);
lcGenConv.c:3103:        _XlcSetConverter(lcd, XlcNCompoundText, lcd, XlcNWideChar,  open_stdc_ctstowcs);
lcGenConv.c:3104:        _XlcSetConverter(lcd, XlcNString,    lcd, XlcNWideChar,     open_stdc_strtowcs);
lcGenConv.c:3105:        _XlcSetConverter(lcd, XlcNCharSet,   lcd, XlcNWideChar,     open_stdc_cstowcs);
lcUTF8.c:1136:    _XlcSetConverter(lcd, XlcNCharSet, lcd, XlcNUtf8String, open_cstoutf8);
lcUTF8.c:1137:    _XlcSetConverter(lcd, XlcNUtf8String, lcd, XlcNCharSet, open_utf8tocs);
lcUTF8.c:1138:    _XlcSetConverter(lcd, XlcNUtf8String, lcd, XlcNChar, open_utf8tocs1);
lcUTF8.c:1139:    _XlcSetConverter(lcd, XlcNString, lcd, XlcNUtf8String, open_strtoutf8);
lcUTF8.c:1140:    _XlcSetConverter(lcd, XlcNUtf8String, lcd, XlcNString, open_utf8tostr);
lcUTF8.c:1141:    _XlcSetConverter(lcd, XlcNUcsChar,    lcd, XlcNChar, open_ucstocs1);
lcUTF8.c:1142:    _XlcSetConverter(lcd, XlcNUcsChar,    lcd, XlcNUtf8String, open_ucstoutf8);
lcUTF8.c:2335:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNWideChar, open_utf8towcs);
lcUTF8.c:2337:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNMultiByte, open_wcstoutf8);
lcUTF8.c:2338:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNString, open_wcstostr);
lcUTF8.c:2340:    _XlcSetConverter(lcd, XlcNString, lcd, XlcNWideChar, open_strtowcs);
lcUTF8.c:2345:    _XlcSetConverter(lcd, XlcNCharSet, lcd, XlcNMultiByte, open_cstoutf8);
lcUTF8.c:2346:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNCharSet, open_utf8tocs);
lcUTF8.c:2347:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNChar, open_utf8tocs1);
lcUTF8.c:2349:    _XlcSetConverter(lcd, XlcNCharSet, lcd, XlcNWideChar, open_cstowcs);
lcUTF8.c:2350:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNCharSet, open_wcstocs);
lcUTF8.c:2351:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNChar, open_wcstocs1);
lcUTF8.c:2353:    _XlcSetConverter(lcd, XlcNString, lcd, XlcNMultiByte, open_strtoutf8);
lcUTF8.c:2354:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNString, open_utf8tostr);
lcUTF8.c:2355:    _XlcSetConverter(lcd, XlcNUtf8String, lcd, XlcNMultiByte, open_identity);
lcUTF8.c:2356:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNUtf8String, open_identity);
lcUTF8.c:2359:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNFontCharSet, open_utf8tofcs);
lcUTF8.c:2360:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNFontCharSet, open_wcstofcs);
lcUTF8.c:2369:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNWideChar, open_iconv_mbstowcs);
lcUTF8.c:2370:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNMultiByte, open_iconv_wcstombs);
lcUTF8.c:2375:    _XlcSetConverter(lcd, XlcNCharSet, lcd, XlcNMultiByte, open_iconv_cstombs);
lcUTF8.c:2376:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNCharSet, open_iconv_mbstocs);
lcUTF8.c:2377:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNChar, open_iconv_mbtocs);
lcUTF8.c:2378:    _XlcSetConverter(lcd, XlcNString, lcd, XlcNMultiByte, open_iconv_strtombs);
lcUTF8.c:2379:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNString, open_iconv_mbstostr);
lcUTF8.c:2382:    _XlcSetConverter(lcd, XlcNMultiByte, lcd, XlcNFontCharSet, open_iconv_mbstofcs);
lcUTF8.c:2384:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNString, open_wcstostr);
lcUTF8.c:2385:    _XlcSetConverter(lcd, XlcNString, lcd, XlcNWideChar, open_strtowcs);
lcUTF8.c:2386:    _XlcSetConverter(lcd, XlcNCharSet, lcd, XlcNWideChar, open_cstowcs);
lcUTF8.c:2387:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNCharSet, open_wcstocs);
lcUTF8.c:2388:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNChar, open_wcstocs1);
lcUTF8.c:2391:    _XlcSetConverter(lcd, XlcNWideChar, lcd, XlcNFontCharSet, open_wcstofcs);
XlcPublic.h:268:extern Bool _XlcSetConverter(

#### _XlcSetValues ####
lcWrap.c:619:_XlcSetValues(
omGeneric.c:1455:    ret = _XlcSetValues((XPointer) oc, oc->core.resources,
omGeneric.c:1581:    if (_XlcSetValues((XPointer) oc, oc_resources, XlcNumber(oc_resources),
omGeneric.c:1714:    return _XlcSetValues((XPointer) om, om->core.resources,
XDefaultOMIF.c:558:    return _XlcSetValues((XPointer) oc, oc->core.resources,
XDefaultOMIF.c:888:    if (_XlcSetValues((XPointer) oc, oc_resources, XlcNumber(oc_resources),
XDefaultOMIF.c:955:    return _XlcSetValues((XPointer) om, om->core.resources,
Xlcint.h:877:extern char *_XlcSetValues(

#### _XlcUtf8Loader ####
lcInit.c:133:    _XlcAddLoader(_XlcUtf8Loader, XlcHead);
lcInit.c:160:    _XlcRemoveLoader(_XlcUtf8Loader);
lcUTF8Load.c:42:_XlcUtf8Loader(
Xlcint.h:931:extern XLCd _XlcUtf8Loader(

#### _XlcVaToArgList ####
lcCharSet.c:154:    _XlcVaToArgList(var, num_args, &args);
lcPubWrap.c:46:    _XlcVaToArgList(var, num_args, &args);
lcWrap.c:560:_XlcVaToArgList(
OCWrap.c:45:    _XlcVaToArgList(var, num_args, &args);
OCWrap.c:103:    _XlcVaToArgList(var, num_args, &args);
OCWrap.c:129:    _XlcVaToArgList(var, num_args, &args);
OMWrap.c:80:    _XlcVaToArgList(var, num_args, &args);
OMWrap.c:106:    _XlcVaToArgList(var, num_args, &args);
Xlcint.h:844:extern void _XlcVaToArgList(

#### _XlcValidModSyntax ####
lcWrap.c:101:Bool _XlcValidModSyntax(
lcWrap.c:139:    if (!_XlcValidModSyntax(prog_mods, im_valid))
lcWrap.c:141:    if (!_XlcValidModSyntax(user_mods, im_valid))
Xlcint.h:769:extern Bool _XlcValidModSyntax(

#### _Xlcmbstoutf8 ####
imThaiFlt.c:1410:    _Xlcmbstoutf8(ic->core.im->core.lcd, &b->utf8[b->tree[ic->private.local.composed].utf8],
lcStd.c:313:_Xlcmbstoutf8(
lcStd.c:357:    return _Xlcmbstoutf8((XLCd) NULL, ustr, str, len);
XlcPubI.h:251:_Xlcmbstoutf8(

#### _Xlcmbstowcs ####
lcStd.c:121:_Xlcmbstowcs(
lcStd.c:232:    return _Xlcmbstowcs((XLCd) NULL, wstr, str, len);
XlcPubI.h:268:_Xlcmbstowcs(

#### _Xlcmbtowc ####
lcStd.c:33:_Xlcmbtowc(
lcStd.c:206:    return _Xlcmbtowc((XLCd) NULL, wstr, str, len);
XlcPubI.h:279:_Xlcmbtowc(

#### _Xlcwcstombs ####
imThaiFlt.c:1407:    _Xlcwcstombs(ic->core.im->core.lcd, &b->mb[b->tree[ic->private.local.composed].mb],
lcStd.c:160:_Xlcwcstombs(
lcStd.c:241:    return _Xlcwcstombs((XLCd) NULL, str, wstr, len);
XlcPubI.h:262:_Xlcwcstombs(

#### _Xlcwctomb ####
imLcLkup.c:65:	    ret = _Xlcwctomb(ic->core.im->core.lcd, mb, BRL_UC_ROW | pattern);
lcStd.c:78:_Xlcwctomb(
lcStd.c:223:    return _Xlcwctomb((XLCd) NULL, str, wc);
XlcPubI.h:285:_Xlcwctomb(

#### _XmbDefaultDrawImageString ####
omDefault.c:406:_XmbDefaultDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,
omDefault.c:426:    _XmbDefaultDrawImageString(dpy, d, oc, gc, x, y, buf, length);
omDefault.c:445:    _XmbDefaultDrawImageString(dpy, d, oc, gc, x, y, buf, length);
omGeneric.c:1498:    _XmbDefaultDrawImageString,
XDefaultOMIF.c:810:_XmbDefaultDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,
XDefaultOMIF.c:830:    _XmbDefaultDrawImageString(dpy, d, oc, gc, x, y, buf, length);
XDefaultOMIF.c:844:    _XmbDefaultDrawImageString,
XomGeneric.h:220:_XmbDefaultDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,

#### _XmbDefaultDrawString ####
omDefault.c:346:_XmbDefaultDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,
omDefault.c:373:    ret = _XmbDefaultDrawString(dpy, d, oc, gc, x, y, buf, length);
omDefault.c:397:    ret = _XmbDefaultDrawString(dpy, d, oc, gc, x, y, buf, length);
omGeneric.c:1497:    _XmbDefaultDrawString,
XDefaultOMIF.c:776:_XmbDefaultDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,
XDefaultOMIF.c:801:    ret = _XmbDefaultDrawString(dpy, d, oc, gc, x, y, buf, length);
XDefaultOMIF.c:843:    _XmbDefaultDrawString,
XomGeneric.h:211:_XmbDefaultDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,

#### _XmbDefaultTextEscapement ####
omDefault.c:91:_XmbDefaultTextEscapement(XOC oc, _Xconst char *text, int length)
omDefault.c:111:    ret = _XmbDefaultTextEscapement(oc, buf, length);
omDefault.c:134:    ret = _XmbDefaultTextEscapement(oc, buf, length);
omGeneric.c:1494:    _XmbDefaultTextEscapement,
XDefaultOMIF.c:604:_XmbDefaultTextEscapement(XOC oc, _Xconst char *text, int length)
XDefaultOMIF.c:622:    ret = _XmbDefaultTextEscapement(oc, buf, length);
XDefaultOMIF.c:840:    _XmbDefaultTextEscapement,
XomGeneric.h:175:_XmbDefaultTextEscapement(XOC oc, _Xconst char *text, int length);

#### _XmbDefaultTextExtents ####
omDefault.c:143:_XmbDefaultTextExtents(XOC oc, _Xconst char *text, int length,
omDefault.c:185:    ret = _XmbDefaultTextExtents(oc, buf, length, overall_ink, overall_logical);
omDefault.c:209:    ret = _XmbDefaultTextExtents(oc, buf, length, overall_ink, overall_logical);
omGeneric.c:1495:    _XmbDefaultTextExtents,
XDefaultOMIF.c:631:_XmbDefaultTextExtents(XOC oc, _Xconst char *text, int length,
XDefaultOMIF.c:671:    ret = _XmbDefaultTextExtents(oc, buf, length, overall_ink, overall_logical);
XDefaultOMIF.c:841:    _XmbDefaultTextExtents,
XomGeneric.h:181:_XmbDefaultTextExtents(XOC oc, _Xconst char *text, int length,

#### _XmbDefaultTextPerCharExtents ####
omDefault.c:218:_XmbDefaultTextPerCharExtents(XOC oc, _Xconst char *text, int length,
omDefault.c:306:    ret = _XmbDefaultTextPerCharExtents(oc, buf, length, ink_buf, logical_buf,
omDefault.c:335:    ret = _XmbDefaultTextPerCharExtents(oc, buf, length, ink_buf, logical_buf,
omGeneric.c:1496:    _XmbDefaultTextPerCharExtents,
XDefaultOMIF.c:680:_XmbDefaultTextPerCharExtents(XOC oc, _Xconst char *text, int length,
XDefaultOMIF.c:765:    ret = _XmbDefaultTextPerCharExtents(oc, buf, length, ink_buf, logical_buf,
XDefaultOMIF.c:842:    _XmbDefaultTextPerCharExtents,
XomGeneric.h:190:_XmbDefaultTextPerCharExtents(

#### _XmbGenericDrawImageString ####
omGeneric.c:1519:    _XmbGenericDrawImageString,
omImText.c:65:_XmbGenericDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,
XomGeneric.h:270:_XmbGenericDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,

#### _XmbGenericDrawString ####
omGeneric.c:1518:    _XmbGenericDrawString,
omText.c:349:_XmbGenericDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,
XomGeneric.h:273:_XmbGenericDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,

#### _XmbGenericTextEscapement ####
omGeneric.c:1515:    _XmbGenericTextEscapement,
omTextEsc.c:284:_XmbGenericTextEscapement(XOC oc, _Xconst char *text, int length)
XomGeneric.h:230:_XmbGenericTextEscapement(XOC oc, _Xconst char *text, int length);

#### _XmbGenericTextExtents ####
omGeneric.c:1516:    _XmbGenericTextExtents,
omTextExt.c:114:_XmbGenericTextExtents(XOC oc, _Xconst char *text, int length,
XomGeneric.h:232:_XmbGenericTextExtents(XOC oc, _Xconst char *text, int length,

#### _XmbGenericTextPerCharExtents ####
omGeneric.c:1517:    _XmbGenericTextPerCharExtents,
omTextPer.c:166:_XmbGenericTextPerCharExtents(XOC oc, _Xconst char *text, int length,
XomGeneric.h:276:_XmbGenericTextPerCharExtents(XOC oc, _Xconst char *text, int length,

#### _XmbTextListToTextProperty ####
lcPublic.c:55:	_XmbTextListToTextProperty,
lcTxtPr.c:218:_XmbTextListToTextProperty(
XlcPubI.h:165:extern int _XmbTextListToTextProperty(

#### _XmbTextPropertyToTextList ####
lcPrTxt.c:245:_XmbTextPropertyToTextList(
lcPublic.c:52:	_XmbTextPropertyToTextList,
XlcPubI.h:141:extern int _XmbTextPropertyToTextList(

#### _Xmblen ####
lcStd.c:210:_Xmblen(
Xlib.h:64:_Xmblen(

#### _Xmbstoutf8 ####
imLcPrs.c:55:extern int _Xmbstoutf8(
imLcPrs.c:642:    l = _Xmbstoutf8(local_utf8_buf, rhs_string_mb, LOCAL_UTF8_BUFSIZE - 1);
lcStd.c:352:_Xmbstoutf8(
XlcPubI.h:246:_Xmbstoutf8(

#### _Xmbstowcs ####
imLcPrs.c:49:extern int _Xmbstowcs(
imLcPrs.c:626:    l = _Xmbstowcs(local_wc_buf, rhs_string_mb, LOCAL_WC_BUFSIZE - 1);
lcStd.c:227:_Xmbstowcs(
XlcPubI.h:257:_Xmbstowcs(

#### _Xmbtowc ####
lcStd.c:200:_Xmbtowc(
lcStd.c:215:    return _Xmbtowc((wchar_t *) NULL, str, len);
Xlib.h:4010:extern int _Xmbtowc(

#### _XomConvert ####
omText.c:317:	if (_XomConvert(oc, conv, (XPointer *) &text, &length,
omTextEsc.c:269:	if (_XomConvert(oc, conv, (XPointer *) &text, &length,
omTextExt.c:66:	if (_XomConvert(oc, conv, (XPointer *) &text, &length,
omTextPer.c:71:	if (_XomConvert(oc, conv, (XPointer *) &text, &length,
omXChar.c:306:_XomConvert(
XomGeneric.h:163:extern int _XomConvert(

#### _XomGenericDrawString ####
omImText.c:61:    _XomGenericDrawString(dpy, d, oc, gc, x, y, type, text, length);
omText.c:282:_XomGenericDrawString(
omText.c:352:    return _XomGenericDrawString(dpy, d, oc, gc, x, y, XOMMultiByte,
omText.c:360:    return _XomGenericDrawString(dpy, d, oc, gc, x, y, XOMWideChar,
omText.c:368:    return _XomGenericDrawString(dpy, d, oc, gc, x, y, XOMUtf8String,
XomGeneric.h:288:_XomGenericDrawString(

#### _XomGenericOpenOM ####
omGeneric.c:2073:_XomGenericOpenOM(XLCd lcd, Display *dpy, XrmDatabase rdb,
omGeneric.c:2097:    lcd->methods->open_om = _XomGenericOpenOM;
XomGeneric.h:150:extern XOM _XomGenericOpenOM(

#### _XomGenericTextExtents ####
omImText.c:55:    _XomGenericTextExtents(oc, type, text, length, 0, &extent);
omTextExt.c:34:_XomGenericTextExtents(
omTextExt.c:117:    return _XomGenericTextExtents(oc, XOMMultiByte, (XPointer) text, length,
omTextExt.c:125:    return _XomGenericTextExtents(oc, XOMWideChar, (XPointer) text, length,
omTextExt.c:133:    return _XomGenericTextExtents(oc, XOMUtf8String, (XPointer) text, length,
XomGeneric.h:298:_XomGenericTextExtents(

#### _XomGetFontDataFromFontSet ####
omText.c:184:        fd = _XomGetFontDataFromFontSet(fs,
omText.c:192:	* _XomGetFontDataFromFontSet() always seems to return for
omText.c:223:		fd = _XomGetFontDataFromFontSet(fs,
omText.c:232:		    fd = _XomGetFontDataFromFontSet(fs,
omTextEsc.c:149:	fd = _XomGetFontDataFromFontSet(font_set, ptr, length, &ptr_len,
omTextEsc.c:158:	 * _XomGetFontDataFromFontSet() always seems to return for
omTextEsc.c:194:		fd = _XomGetFontDataFromFontSet(font_set, ptr, length, &ptr_len,
omTextEsc.c:203:		    fd = _XomGetFontDataFromFontSet(font_set, ptr, length,
omXChar.c:116:_XomGetFontDataFromFontSet(
XomGeneric.h:306:_XomGetFontDataFromFontSet(

#### _XomInitConverter ####
omDefault.c:54:    conv = _XomInitConverter(oc, XOMWideChar);
omDefault.c:77:    conv = _XomInitConverter(oc, XOMUtf8String);
omText.c:305:    conv = _XomInitConverter(oc, type);
omTextEsc.c:257:    conv = _XomInitConverter(oc, type);
omTextExt.c:52:    conv = _XomInitConverter(oc, type);
omTextPer.c:57:    conv = _XomInitConverter(oc, type);
omXChar.c:360:_XomInitConverter(
XomGeneric.h:158:extern XlcConv _XomInitConverter(

#### _XrmDefaultInitParseInfo ####
lcPublic.c:51:	_XrmDefaultInitParseInfo,
lcRM.c:82:/* Frees the state, which was allocated by _XrmDefaultInitParseInfo. */
lcRM.c:173:/* Frees the state, which was allocated by _XrmDefaultInitParseInfo. */
lcRM.c:194:_XrmDefaultInitParseInfo(
Xlcint.h:168:   init_parse_info function (default: _XrmDefaultInitParseInfo). */
XlcPubI.h:136:extern XrmMethods _XrmDefaultInitParseInfo(

#### _XrmInitParseInfo ####
lcWrap.c:365:_XrmInitParseInfo(
Xrm.c:503:	db->methods = _XrmInitParseInfo(&db->mbstate);
Xlcint.h:796:extern XrmMethods _XrmInitParseInfo(

#### _XrmInternalStringToQuark ####
Quarks.c:238:_XrmInternalStringToQuark(
Quarks.c:286:	return _XrmInternalStringToQuark(name, len, sig, permstring);
Quarks.c:358:    return _XrmInternalStringToQuark(name, tname-(char *)name-1, sig, False);
Quarks.c:374:    return _XrmInternalStringToQuark(name, tname-(char *)name-1, sig, True);
StrKeysym.c:121:	names[0] = _XrmInternalStringToQuark(s, p - s - 1, sig, False);
Xrm.c:377:		    *quarks++ = _XrmInternalStringToQuark(name,tname - name,
Xrm.c:389:	*quarks++ = _XrmInternalStringToQuark(name, tname - name, sig, False);
Xrm.c:414:		    *quarks++ = _XrmInternalStringToQuark(name, tname - name,
Xrm.c:432:	*quarks++ = _XrmInternalStringToQuark(name, tname - name, sig, False);
Xrm.c:1244:			_XrmInternalStringToQuark(lhs, ptr - lhs, sig, False);
Xresinternal.h:13:extern XrmQuark _XrmInternalStringToQuark(

#### _Xthread_self_fn ####
locking.c:609:    _Xthread_self_fn = _Xthread_self;
XlibInt.c:100:xthread_t (*_Xthread_self_fn)(void) = NULL;
XlibInt.c:102:#define XThread_Self()	((*_Xthread_self_fn)())
locking.h:49:extern xthread_t (*_Xthread_self_fn)( /* in XlibInt.c */

#### _Xutf8DefaultDrawImageString ####
omDefault.c:433:_Xutf8DefaultDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,
omGeneric.c:1508:    _Xutf8DefaultDrawImageString
XomGeneric.h:226:_Xutf8DefaultDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,

#### _Xutf8DefaultDrawString ####
omDefault.c:382:_Xutf8DefaultDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,
omGeneric.c:1507:    _Xutf8DefaultDrawString,
XomGeneric.h:217:_Xutf8DefaultDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,

#### _Xutf8DefaultTextEscapement ####
omDefault.c:120:_Xutf8DefaultTextEscapement(XOC oc, _Xconst char *text, int length)
omGeneric.c:1504:    _Xutf8DefaultTextEscapement,
XomGeneric.h:179:_Xutf8DefaultTextEscapement(XOC oc, _Xconst char *text, int length);

#### _Xutf8DefaultTextExtents ####
omDefault.c:194:_Xutf8DefaultTextExtents(XOC oc, _Xconst char *text, int length,
omGeneric.c:1505:    _Xutf8DefaultTextExtents,
XomGeneric.h:187:_Xutf8DefaultTextExtents(XOC oc, _Xconst char *text, int length,

#### _Xutf8DefaultTextPerCharExtents ####
omDefault.c:317:_Xutf8DefaultTextPerCharExtents(XOC oc, _Xconst char *text, int length,
omGeneric.c:1506:    _Xutf8DefaultTextPerCharExtents,
XomGeneric.h:204:_Xutf8DefaultTextPerCharExtents(

#### _Xutf8GenericDrawImageString ####
omGeneric.c:1529:    _Xutf8GenericDrawImageString
omImText.c:81:_Xutf8GenericDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,
XomGeneric.h:238:_Xutf8GenericDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,

#### _Xutf8GenericDrawString ####
omGeneric.c:1528:    _Xutf8GenericDrawString,
omText.c:365:_Xutf8GenericDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,
XomGeneric.h:235:_Xutf8GenericDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,

#### _Xutf8GenericTextEscapement ####
omGeneric.c:1525:    _Xutf8GenericTextEscapement,
omTextEsc.c:296:_Xutf8GenericTextEscapement(XOC oc, _Xconst char *text, int length)
XomGeneric.h:251:_Xutf8GenericTextEscapement(XOC oc, _Xconst char *text, int length);

#### _Xutf8GenericTextExtents ####
omGeneric.c:1526:    _Xutf8GenericTextExtents,
omTextExt.c:130:_Xutf8GenericTextExtents(XOC oc, _Xconst char *text, int length,
XomGeneric.h:248:_Xutf8GenericTextExtents(XOC oc, _Xconst char *text, int length,

#### _Xutf8GenericTextPerCharExtents ####
omGeneric.c:1527:    _Xutf8GenericTextPerCharExtents,
omTextPer.c:192:_Xutf8GenericTextPerCharExtents(XOC oc, _Xconst char *text, int length,
XomGeneric.h:241:_Xutf8GenericTextPerCharExtents(

#### _Xutf8TextListToTextProperty ####
lcPublic.c:57:	_Xutf8TextListToTextProperty,
lcTxtPr.c:244:_Xutf8TextListToTextProperty(
XlcPubI.h:183:extern int _Xutf8TextListToTextProperty(

#### _Xutf8TextPropertyToTextList ####
lcPrTxt.c:269:_Xutf8TextPropertyToTextList(
lcPublic.c:54:	_Xutf8TextPropertyToTextList,
XlcPubI.h:157:extern int _Xutf8TextPropertyToTextList(

#### _XwcDefaultDrawImageString ####
omDefault.c:414:_XwcDefaultDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,
omGeneric.c:1503:    _XwcDefaultDrawImageString,
XDefaultOMIF.c:818:_XwcDefaultDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,
XDefaultOMIF.c:849:    _XwcDefaultDrawImageString
XomGeneric.h:223:_XwcDefaultDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,

#### _XwcDefaultDrawString ####
omDefault.c:358:_XwcDefaultDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,
omGeneric.c:1502:    _XwcDefaultDrawString,
XDefaultOMIF.c:788:_XwcDefaultDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,
XDefaultOMIF.c:848:    _XwcDefaultDrawString,
XomGeneric.h:214:_XwcDefaultDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,

#### _XwcDefaultTextEscapement ####
omDefault.c:97:_XwcDefaultTextEscapement(XOC oc, _Xconst wchar_t *text, int length)
omGeneric.c:1499:    _XwcDefaultTextEscapement,
XDefaultOMIF.c:610:_XwcDefaultTextEscapement(XOC oc, _Xconst wchar_t *text, int length)
XDefaultOMIF.c:845:    _XwcDefaultTextEscapement,
XomGeneric.h:177:_XwcDefaultTextEscapement(XOC oc, _Xconst wchar_t *text, int length);

#### _XwcDefaultTextExtents ####
omDefault.c:170:_XwcDefaultTextExtents(XOC oc, _Xconst wchar_t *text, int length,
omGeneric.c:1500:    _XwcDefaultTextExtents,
XDefaultOMIF.c:658:_XwcDefaultTextExtents(XOC oc, _Xconst wchar_t *text, int length,
XDefaultOMIF.c:846:    _XwcDefaultTextExtents,
XomGeneric.h:184:_XwcDefaultTextExtents(XOC oc, _Xconst wchar_t *text, int length,

#### _XwcDefaultTextPerCharExtents ####
omDefault.c:288:_XwcDefaultTextPerCharExtents(XOC oc, _Xconst wchar_t *text, int length,
omGeneric.c:1501:    _XwcDefaultTextPerCharExtents,
XDefaultOMIF.c:749:_XwcDefaultTextPerCharExtents(XOC oc, _Xconst wchar_t *text, int length,
XDefaultOMIF.c:847:    _XwcDefaultTextPerCharExtents,
XomGeneric.h:197:_XwcDefaultTextPerCharExtents(

#### _XwcFreeStringList ####
lcPrTxt.c:281:_XwcFreeStringList(
lcPublic.c:58:	_XwcFreeStringList,
XlcPubI.h:192:extern void _XwcFreeStringList(

#### _XwcGenericDrawImageString ####
omGeneric.c:1524:    _XwcGenericDrawImageString,
omImText.c:73:_XwcGenericDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,
XomGeneric.h:253:_XwcGenericDrawImageString(Display *dpy, Drawable d, XOC oc, GC gc, int x,

#### _XwcGenericDrawString ####
omGeneric.c:1523:    _XwcGenericDrawString,
omText.c:357:_XwcGenericDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,
XomGeneric.h:256:_XwcGenericDrawString(Display *dpy, Drawable d, XOC oc, GC gc, int x, int y,

#### _XwcGenericTextEscapement ####
omGeneric.c:1520:    _XwcGenericTextEscapement,
omTextEsc.c:290:_XwcGenericTextEscapement(XOC oc, _Xconst wchar_t *text, int length)
XomGeneric.h:268:_XwcGenericTextEscapement(XOC oc, _Xconst wchar_t *text, int length);

#### _XwcGenericTextExtents ####
omGeneric.c:1521:    _XwcGenericTextExtents,
omTextExt.c:122:_XwcGenericTextExtents(XOC oc, _Xconst wchar_t *text, int length,
XomGeneric.h:265:_XwcGenericTextExtents(XOC oc, _Xconst wchar_t *text, int length,

#### _XwcGenericTextPerCharExtents ####
omGeneric.c:1522:    _XwcGenericTextPerCharExtents,
omTextPer.c:179:_XwcGenericTextPerCharExtents(XOC oc, _Xconst wchar_t *text, int length,
XomGeneric.h:259:_XwcGenericTextPerCharExtents(XOC oc, _Xconst wchar_t *text, int length,

#### _XwcTextListToTextProperty ####
lcPublic.c:56:	_XwcTextListToTextProperty,
lcTxtPr.c:231:_XwcTextListToTextProperty(
XlcPubI.h:174:extern int _XwcTextListToTextProperty(

#### _XwcTextPropertyToTextList ####
lcPrTxt.c:257:_XwcTextPropertyToTextList(
lcPublic.c:53:	_XwcTextPropertyToTextList,
XlcPubI.h:149:extern int _XwcTextPropertyToTextList(

#### _Xwcscmp ####
lcStd.c:286:_Xwcscmp(
XlcPublic.h:299:extern int _Xwcscmp(wchar_t *wstr1, wchar_t *wstr2);

#### _Xwcscpy ####
lcPrTxt.c:87:	    _Xwcscpy(wstr, wc_text);
lcStd.c:245:_Xwcscpy(
XlcPublic.h:293:extern wchar_t *_Xwcscpy(

#### _Xwcslen ####
imLcLkup.c:157:	    ret = _Xwcslen(&wc[b[ic->private.local.composed].wc]);
lcPrTxt.c:89:	    length = _Xwcslen(wstr) + 1;
lcStd.c:181:    from_left = _Xwcslen(wstr);
lcStd.c:274:_Xwcslen(
lcTxtPr.c:52:		length += _Xwcslen(*wc_list) + 1;
lcTxtPr.c:160:	    from_left = _Xwcslen(*wc_list);
XlcPublic.h:289:extern int _Xwcslen(

#### _Xwcsncmp ####
lcStd.c:297:_Xwcsncmp(
XlcPublic.h:300:extern int _Xwcsncmp(wchar_t *wstr1, wchar_t *wstr2, int len);

#### _Xwcsncpy ####
lcStd.c:257:_Xwcsncpy(
XlcPublic.h:298:extern wchar_t *_Xwcsncpy(wchar_t *wstr1, wchar_t *wstr2, int len);

#### _Xwcstombs ####
lcStd.c:236:_Xwcstombs(
XlcPubI.h:274:_Xwcstombs(

#### _Xwctomb ####
lcStd.c:219:_Xwctomb(
Xlib.h:4016:extern int _Xwctomb(

#### _qfree ####
globals.c:74:ZEROINIT (_XQEvent *, _qfree, NULL);

#### read_EncodingInfo ####
omGeneric.c:1820:read_EncodingInfo(
omGeneric.c:1899:        font_set->vmap = read_EncodingInfo(count,value);
omGeneric.c:1994:	font_data = read_EncodingInfo(count,value);
omGeneric.c:2004:            font_data = read_EncodingInfo(count,value);
omGeneric.c:2016:                font_data = read_EncodingInfo(count,value);
XomGeneric.h:283:read_EncodingInfo(

#### xlocaledir ####
imLcPrs.c:347:                     xlocaledir(dir, XLC_BUFSIZE);
lcFile.c:199:xlocaledir(
lcFile.c:484:    xlocaledir(dir,XLC_BUFSIZE);
lcFile.c:537:    xlocaledir (dir, PATH_MAX);
lcFile.c:612:	xlocaledir(buf, buf_len);
lcFile.c:637:    xlocaledir (dir, PATH_MAX);
Xlibint.h:1359:extern void xlocaledir(
